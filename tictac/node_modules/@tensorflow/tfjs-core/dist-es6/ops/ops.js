import { ArrayOps } from './array_ops';
import { BatchNormOps } from './batchnorm';
import { BinaryOps } from './binary_ops';
import { CompareOps } from './compare';
import { ConcatOps } from './concat';
import { ConvOps } from './conv';
import { ImageOps } from './image_ops';
import { LinalgOps } from './linalg_ops';
import { LogicalOps } from './logical_ops';
import { LossOps, Reduction } from './loss_ops';
import { LRNOps } from './lrn';
import { LSTMOps } from './lstm';
import { MatmulOps } from './matmul';
import { MovingAverageOps } from './moving_average';
import { NormOps } from './norm';
import { PoolOps } from './pool';
import { ReductionOps } from './reduction_ops';
import { ReverseOps } from './reverse';
import { SliceOps } from './slice';
import { SoftmaxOps } from './softmax';
import { StridedSliceOps } from './strided_slice';
import { TransposeOps } from './transpose';
import { UnaryOps } from './unary_ops';
export var batchNormalization = BatchNormOps.batchNormalization;
export var batchNormalization2d = BatchNormOps.batchNormalization2d;
export var batchNormalization3d = BatchNormOps.batchNormalization3d;
export var batchNormalization4d = BatchNormOps.batchNormalization4d;
export var concat = ConcatOps.concat;
export var concat1d = ConcatOps.concat1d;
export var concat2d = ConcatOps.concat2d;
export var concat3d = ConcatOps.concat3d;
export var concat4d = ConcatOps.concat4d;
export var conv1d = ConvOps.conv1d;
export var conv2d = ConvOps.conv2d;
export var conv2dTranspose = ConvOps.conv2dTranspose;
export var depthwiseConv2d = ConvOps.depthwiseConv2d;
export var separableConv2d = ConvOps.separableConv2d;
export var matMul = MatmulOps.matMul;
export var matrixTimesVector = MatmulOps.matrixTimesVector;
export var outerProduct = MatmulOps.outerProduct;
export var vectorTimesMatrix = MatmulOps.vectorTimesMatrix;
export var avgPool = PoolOps.avgPool;
export var maxPool = PoolOps.maxPool;
export var transpose = TransposeOps.transpose;
export var reverse = ReverseOps.reverse;
export var reverse1d = ReverseOps.reverse1d;
export var reverse2d = ReverseOps.reverse2d;
export var reverse3d = ReverseOps.reverse3d;
export var reverse4d = ReverseOps.reverse4d;
export var slice = SliceOps.slice;
export var slice1d = SliceOps.slice1d;
export var slice2d = SliceOps.slice2d;
export var slice3d = SliceOps.slice3d;
export var slice4d = SliceOps.slice4d;
export var stridedSlice = StridedSliceOps.stridedSlice;
export var argMax = ReductionOps.argMax;
export var argMin = ReductionOps.argMin;
export var logSumExp = ReductionOps.logSumExp;
export var max = ReductionOps.max;
export var mean = ReductionOps.mean;
export var min = ReductionOps.min;
export var moments = ReductionOps.moments;
export var sum = ReductionOps.sum;
export var unsortedSegmentSum = ReductionOps.unsortedSegmentSum;
export var equal = CompareOps.equal;
export var equalStrict = CompareOps.equalStrict;
export var greater = CompareOps.greater;
export var greaterStrict = CompareOps.greaterStrict;
export var greaterEqual = CompareOps.greaterEqual;
export var greaterEqualStrict = CompareOps.greaterEqualStrict;
export var less = CompareOps.less;
export var lessStrict = CompareOps.lessStrict;
export var lessEqual = CompareOps.lessEqual;
export var lessEqualStrict = CompareOps.lessEqualStrict;
export var notEqual = CompareOps.notEqual;
export var notEqualStrict = CompareOps.notEqualStrict;
export var logicalNot = LogicalOps.logicalNot;
export var logicalAnd = LogicalOps.logicalAnd;
export var logicalOr = LogicalOps.logicalOr;
export var logicalXor = LogicalOps.logicalXor;
export var where = LogicalOps.where;
export var abs = UnaryOps.abs;
export var acos = UnaryOps.acos;
export var acosh = UnaryOps.acosh;
export var asin = UnaryOps.asin;
export var asinh = UnaryOps.asinh;
export var atan = UnaryOps.atan;
export var atanh = UnaryOps.atanh;
export var ceil = UnaryOps.ceil;
export var clipByValue = UnaryOps.clipByValue;
export var cos = UnaryOps.cos;
export var cosh = UnaryOps.cosh;
export var elu = UnaryOps.elu;
export var exp = UnaryOps.exp;
export var expm1 = UnaryOps.expm1;
export var floor = UnaryOps.floor;
export var sign = UnaryOps.sign;
export var leakyRelu = UnaryOps.leakyRelu;
export var log = UnaryOps.log;
export var log1p = UnaryOps.log1p;
export var logSigmoid = UnaryOps.logSigmoid;
export var neg = UnaryOps.neg;
export var prelu = UnaryOps.prelu;
export var relu = UnaryOps.relu;
export var reciprocal = UnaryOps.reciprocal;
export var round = UnaryOps.round;
export var selu = UnaryOps.selu;
export var sigmoid = UnaryOps.sigmoid;
export var sin = UnaryOps.sin;
export var sinh = UnaryOps.sinh;
export var softplus = UnaryOps.softplus;
export var sqrt = UnaryOps.sqrt;
export var rsqrt = UnaryOps.rsqrt;
export var square = UnaryOps.square;
export var step = UnaryOps.step;
export var tan = UnaryOps.tan;
export var tanh = UnaryOps.tanh;
export var erf = UnaryOps.erf;
export var add = BinaryOps.add;
export var addStrict = BinaryOps.addStrict;
export var atan2 = BinaryOps.atan2;
export var div = BinaryOps.div;
export var divStrict = BinaryOps.divStrict;
export var maximum = BinaryOps.maximum;
export var maximumStrict = BinaryOps.maximumStrict;
export var minimum = BinaryOps.minimum;
export var minimumStrict = BinaryOps.minimumStrict;
export var mod = BinaryOps.mod;
export var modStrict = BinaryOps.modStrict;
export var mul = BinaryOps.mul;
export var mulStrict = BinaryOps.mulStrict;
export var pow = BinaryOps.pow;
export var powStrict = BinaryOps.powStrict;
export var sub = BinaryOps.sub;
export var subStrict = BinaryOps.subStrict;
export var squaredDifference = BinaryOps.squaredDifference;
export var squaredDifferenceStrict = BinaryOps.squaredDifferenceStrict;
export var norm = NormOps.norm;
export var cast = ArrayOps.cast;
export var clone = ArrayOps.clone;
export var fromPixels = ArrayOps.fromPixels;
export var toPixels = ArrayOps.toPixels;
export var ones = ArrayOps.ones;
export var onesLike = ArrayOps.onesLike;
export var zeros = ArrayOps.zeros;
export var zerosLike = ArrayOps.zerosLike;
export var eye = ArrayOps.eye;
export var rand = ArrayOps.rand;
export var randomNormal = ArrayOps.randomNormal;
export var truncatedNormal = ArrayOps.truncatedNormal;
export var randomUniform = ArrayOps.randomUniform;
export var multinomial = ArrayOps.multinomial;
export var reshape = ArrayOps.reshape;
export var squeeze = ArrayOps.squeeze;
export var tile = ArrayOps.tile;
export var gather = ArrayOps.gather;
export var oneHot = ArrayOps.oneHot;
export var linspace = ArrayOps.linspace;
export var range = ArrayOps.range;
export var buffer = ArrayOps.buffer;
export var fill = ArrayOps.fill;
export var tensor = ArrayOps.tensor;
export var scalar = ArrayOps.scalar;
export var tensor1d = ArrayOps.tensor1d;
export var tensor2d = ArrayOps.tensor2d;
export var tensor3d = ArrayOps.tensor3d;
export var tensor4d = ArrayOps.tensor4d;
export var print = ArrayOps.print;
export var expandDims = ArrayOps.expandDims;
export var stack = ArrayOps.stack;
export var unstack = ArrayOps.unstack;
export var split = ArrayOps.split;
export var cumsum = ArrayOps.cumsum;
export var pad = ArrayOps.pad;
export var pad1d = ArrayOps.pad1d;
export var pad2d = ArrayOps.pad2d;
export var pad3d = ArrayOps.pad3d;
export var pad4d = ArrayOps.pad4d;
export var movingAverage = MovingAverageOps.movingAverage;
export var basicLSTMCell = LSTMOps.basicLSTMCell;
export var multiRNNCell = LSTMOps.multiRNNCell;
export var softmax = SoftmaxOps.softmax;
export var localResponseNormalization = LRNOps.localResponseNormalization;
export var linalg = LinalgOps;
export { operation } from './operation';
import { Tensor } from '../tensor';
import { Rank } from '../types';
[Tensor, Rank];
[Reduction];
export var losses = {
    absoluteDifference: LossOps.absoluteDifference,
    computeWeightedLoss: LossOps.computeWeightedLoss,
    cosineDistance: LossOps.cosineDistance,
    hingeLoss: LossOps.hingeLoss,
    logLoss: LossOps.logLoss,
    meanSquaredError: LossOps.meanSquaredError,
    softmaxCrossEntropy: SoftmaxOps.softmaxCrossEntropy
};
export var image = {
    resizeBilinear: ImageOps.resizeBilinear,
    resizeNearestNeighbor: ImageOps.resizeNearestNeighbor,
};
//# sourceMappingURL=ops.js.map