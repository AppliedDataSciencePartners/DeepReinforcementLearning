import { DataType, Scalar, Tensor, Tensor1D, Tensor2D } from '@tensorflow/tfjs-core';
import { DataFormat } from '../common';
import { Shape, SymbolicTensor } from '../types';
import { LayerVariable } from '../variables';
import { epsilon as common_epsilon } from './common';
export declare function disposeScalarCache(): void;
export declare function setBackend(requestedBackend: 'cpu' | 'webgl'): void;
export declare function getBackend(): 'cpu' | 'webgl';
export declare function getScalar(value: number, dtype?: DataType): Scalar;
export declare const epsilon: typeof common_epsilon;
export declare function isBackendSymbolic(): boolean;
export declare function shape(x: Tensor | SymbolicTensor): Shape;
export declare function intShape(x: Tensor | SymbolicTensor): number[];
export declare function dtype(x: Tensor | SymbolicTensor): DataType;
export declare function countParams(x: Tensor | SymbolicTensor): number;
export declare function cast(x: Tensor, dtype: 'float32' | 'int32' | 'bool'): Tensor;
export declare function expandDims(x: Tensor, axis?: number): Tensor;
export declare function repeat(x: Tensor, n: number): Tensor;
export declare function flatten(x: Tensor): Tensor;
export declare function batchFlatten(x: Tensor): Tensor;
export declare function sliceAlongFirstAxis(array: Tensor, start: number, size: number): Tensor;
export declare function sliceAlongLastAxis(array: Tensor, start: number, size: number): Tensor;
export declare function sliceAlongAxis(array: Tensor, start: number, size: number, axis: number): Tensor;
export declare function concatenate(tensors: Tensor[], axis?: number): Tensor;
export declare function concatAlongFirstAxis(a: Tensor, b: Tensor): Tensor;
export declare function tile(x: Tensor, n: number | number[]): Tensor;
export declare function identity(x: Tensor): Tensor;
export declare function eyeVariable(size: number, dtype?: DataType, name?: string): LayerVariable;
export declare function scalarTimesArray(c: Scalar, x: Tensor): Tensor;
export declare function scalarPlusArray(c: Scalar, x: Tensor): Tensor;
export declare function randomNormal(shape: Shape, mean?: number, stddev?: number, dtype?: 'float32' | 'int32', seed?: number): Tensor;
export declare function dot(x: Tensor, y: Tensor): Tensor;
export declare function sign(x: Tensor): Tensor;
export declare function qr(x: Tensor2D): [Tensor, Tensor];
export declare function oneHot(indices: Tensor, numClasses: number): Tensor;
export declare function gather(reference: Tensor, indices: number[] | Tensor1D, axis?: number): Tensor;
export declare function square(x: Tensor): Tensor;
export declare function pow(x: Tensor, a: Tensor | number): Tensor;
export declare function biasAdd(x: Tensor, bias: Tensor, dataFormat?: DataFormat): Tensor;
export declare function elu(x: Tensor, alpha?: number): Tensor;
export declare function softsign(x: Tensor): Tensor;
export declare function dropout(x: Tensor, level: Scalar, noiseShape?: number[], seed?: number): Tensor;
export declare function nameScope<T>(name: string, fn: () => T): T;
export declare function floatx(): DataType;
export declare function getUid(prefix?: string): string;
export declare function hardSigmoid(x: Tensor): Tensor;
export declare function inTrainPhase<T>(x: () => T, alt: () => T, training?: boolean): T;
export declare function gradients(lossFn: () => Scalar, variables: LayerVariable[]): Tensor[];
