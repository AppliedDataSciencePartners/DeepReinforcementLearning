// @tensorflow/tfjs Copyright 2018 Google
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.tf = global.tf || {})));
}(this, (function (exports) { 'use strict';

	/**
	 * @license
	 * Copyright 2018 Google LLC. All Rights Reserved.
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 * =============================================================================
	 */
	var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) {
	  e.__proto__ = t;
	} || function (e, t) {
	  for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n]);
	};function __extends(e, t) {
	  function n() {
	    this.constructor = e;
	  }extendStatics(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n());
	}function __decorate(e, t, n, r) {
	  var a,
	      o = arguments.length,
	      i = o < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) i = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) (a = e[s]) && (i = (o < 3 ? a(i) : o > 3 ? a(t, n, i) : a(t, n)) || i);return o > 3 && i && Object.defineProperty(t, n, i), i;
	}function __awaiter(e, t, n, r) {
	  return new (n || (n = Promise))(function (a, o) {
	    function i(e) {
	      try {
	        u(r.next(e));
	      } catch (e) {
	        o(e);
	      }
	    }function s(e) {
	      try {
	        u(r.throw(e));
	      } catch (e) {
	        o(e);
	      }
	    }function u(e) {
	      e.done ? a(e.value) : new n(function (t) {
	        t(e.value);
	      }).then(i, s);
	    }u((r = r.apply(e, t || [])).next());
	  });
	}function __generator(e, t) {
	  var n,
	      r,
	      a,
	      o,
	      i = { label: 0, sent: function () {
	      if (1 & a[0]) throw a[1];return a[1];
	    }, trys: [], ops: [] };return o = { next: s(0), throw: s(1), return: s(2) }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {
	    return this;
	  }), o;function s(o) {
	    return function (s) {
	      return function (o) {
	        if (n) throw new TypeError("Generator is already executing.");for (; i;) try {
	          if (n = 1, r && (a = 2 & o[0] ? r.return : o[0] ? r.throw || ((a = r.return) && a.call(r), 0) : r.next) && !(a = a.call(r, o[1])).done) return a;switch (r = 0, a && (o = [2 & o[0], a.value]), o[0]) {case 0:case 1:
	              a = o;break;case 4:
	              return i.label++, { value: o[1], done: !1 };case 5:
	              i.label++, r = o[1], o = [0];continue;case 7:
	              o = i.ops.pop(), i.trys.pop();continue;default:
	              if (!(a = (a = i.trys).length > 0 && a[a.length - 1]) && (6 === o[0] || 2 === o[0])) {
	                i = 0;continue;
	              }if (3 === o[0] && (!a || o[1] > a[0] && o[1] < a[3])) {
	                i.label = o[1];break;
	              }if (6 === o[0] && i.label < a[1]) {
	                i.label = a[1], a = o;break;
	              }if (a && i.label < a[2]) {
	                i.label = a[2], i.ops.push(o);break;
	              }a[2] && i.ops.pop(), i.trys.pop();continue;}o = t.call(e, i);
	        } catch (e) {
	          o = [6, e], r = 0;
	        } finally {
	          n = a = 0;
	        }if (5 & o[0]) throw o[1];return { value: o[0] ? o[1] : void 0, done: !0 };
	      }([o, s]);
	    };
	  }
	}function isMobile() {
	  var e = navigator.userAgent || navigator.vendor || window.opera;return (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0, 4))
	  );
	}function doc(e) {
	  return function () {
	    for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
	  };
	}function assertArgumentIsTensor(e, t, n) {
	  assert(e instanceof Tensor, "Argument '" + t + "' passed to '" + n + "' must be a Tensor, but got " + typeof e + ".");
	}function assertArgumentsAreTensors(e, t) {
	  var n = function (n) {
	    var r = e[n];Array.isArray(r) ? r.forEach(function (e, r) {
	      assertArgumentIsTensor(e, n + "[" + r + "]", t);
	    }) : assertArgumentIsTensor(r, n, t);
	  };for (var r in e) n(r);
	}function shuffle(e) {
	  for (var t = e.length, n = 0, r = 0; t > 0;) r = Math.random() * t | 0, n = e[--t], e[t] = e[r], e[r] = n;
	}function clamp(e, t, n) {
	  return Math.max(e, Math.min(t, n));
	}function randUniform(e, t) {
	  return Math.random() * (t - e) + e;
	}function distSquared(e, t) {
	  for (var n = 0, r = 0; r < e.length; r++) {
	    var a = Number(e[r]) - Number(t[r]);n += a * a;
	  }return n;
	}function assert(e, t) {
	  if (!e) throw new Error(t);
	}function assertShapesMatch(e, t, n) {
	  void 0 === n && (n = ""), assert(arraysEqual(e, t), n + " Shapes " + e + " and " + t + " must match");
	}function assertTypesMatch(e, t) {
	  assert(e.dtype === t.dtype, " The dtypes of the first(" + e.dtype + ") and second(" + t.dtype + ") input must match");
	}function flatten(e, t) {
	  if (void 0 === t && (t = []), Array.isArray(e)) for (var n = 0; n < e.length; ++n) flatten(e[n], t);else t.push(e);return t;
	}function inferShape(e) {
	  if (isTypedArray(e)) return [e.length];if (!Array.isArray(e)) return [];for (var t = []; e instanceof Array;) t.push(e.length), e = e[0];return t;
	}function sizeFromShape(e) {
	  if (0 === e.length) return 1;for (var t = e[0], n = 1; n < e.length; n++) t *= e[n];return t;
	}function isScalarShape(e) {
	  return 0 === e.length;
	}function arraysEqual(e, t) {
	  if (e.length !== t.length) return !1;for (var n = 0; n < e.length; n++) if (e[n] !== t[n]) return !1;return !0;
	}function isInt(e) {
	  return e % 1 == 0;
	}function tanh(e) {
	  if (null != Math.tanh) return Math.tanh(e);if (e === 1 / 0) return 1;if (e === -1 / 0) return -1;var t = Math.exp(2 * e);return (t - 1) / (t + 1);
	}function sizeToSquarishShape(e) {
	  for (var t = Math.floor(Math.sqrt(e)); t > 1; --t) if (e % t == 0) return [t, e / t];return [1, e];
	}function createShuffledIndices(e) {
	  for (var t = new Uint32Array(e), n = 0; n < e; ++n) t[n] = n;return shuffle(t), t;
	}function rightPad(e, t) {
	  return t <= e.length ? e : e + " ".repeat(t - e.length);
	}function repeatedTry(e, t, n) {
	  return void 0 === t && (t = function (e) {
	    return 0;
	  }), new Promise(function (r, a) {
	    var o = 0,
	        i = function () {
	      if (e()) r();else {
	        var s = t(++o);null != n && o >= n ? a() : setTimeout(i, s);
	      }
	    };i();
	  });
	}function getQueryParams(e) {
	  var t = {};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, function (e) {
	    for (var n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];return decodeParam(t, n[0], n[1]), n.join("=");
	  }), t;
	}function decodeParam(e, t, n) {
	  e[decodeURIComponent(t)] = decodeURIComponent(n || "");
	}function inferFromImplicitShape(e, t) {
	  for (var n = 1, r = -1, a = 0; a < e.length; ++a) if (e[a] > 0) n *= e[a];else if (-1 === e[a]) {
	    if (-1 !== r) throw Error("Shapes can only have 1 implicit size. Found - 1 at dim " + r + " and dim " + a);r = a;
	  } else if (e[a] <= 0) throw Error("Shapes can not be <= 0. Found " + e[a] + " at dim " + a);if (-1 === r) {
	    if (t > 0 && t !== n) throw Error("Size(" + t + ") must match the product of shape " + e);return e;
	  }if (t % n != 0) throw Error("The implicit shape can't be a fractional number. Got " + t + " / " + n);var o = e.slice();return o[r] = t / n, o;
	}function squeezeShape(e, t) {
	  for (var n = [], r = [], a = 0, o = 0; o < e.length; ++o) {
	    if (null != t) {
	      if (t[a] === o && e[o] > 1) throw new Error("Can't squeeze axis " + o + " since its dim '" + e[o] + "' is not 1");(null == t[a] || t[a] > o) && 1 === e[o] && (n.push(e[o]), r.push(o)), t[a] <= o && a++;
	    }e[o] > 1 && (n.push(e[o]), r.push(o));
	  }return { newShape: n, keptDims: r };
	}function getTypedArrayFromDType(e, t) {
	  var n = null;if (null == e || "float32" === e) n = new Float32Array(t);else if ("int32" === e) n = new Int32Array(t);else {
	    if ("bool" !== e) throw new Error("Unknown data type " + e);n = new Uint8Array(t);
	  }return n;
	}function isTensorInList(e, t) {
	  for (var n = 0; n < t.length; n++) if (t[n].id === e.id) return !0;return !1;
	}function checkForNaN(e, t, n) {
	  if ("float32" === t) for (var r = 0; r < e.length; r++) if (isNaN(e[r])) throw Error("The result of the '" + n + "' has NaNs.");
	}function flattenNameArrayMap(e, t) {
	  var n = [];if (e instanceof Tensor) n.push(e);else for (var r = e, a = 0; a < t.length; a++) n.push(r[t[a]]);return n;
	}function unflattenToNameArrayMap(e, t) {
	  if (e.length !== t.length) throw new Error("Cannot unflatten Tensor[], keys and arrays are not of same length.");for (var n = {}, r = 0; r < e.length; r++) n[e[r]] = t[r];return n;
	}function hasEncodingLoss(e, t) {
	  return "float32" !== t && ("int32" !== t || "float32" === e) && ("bool" !== t || "bool" !== e);
	}function copyTypedArray(e, t) {
	  if (null == t || "float32" === t) return new Float32Array(e);if ("int32" === t) return new Int32Array(e);if ("bool" === t) {
	    for (var n = new Uint8Array(e.length), r = 0; r < n.length; ++r) 0 !== Math.round(e[r]) && (n[r] = 1);return n;
	  }throw new Error("Unknown data type " + t);
	}function isTypedArray(e) {
	  return e instanceof Float32Array || e instanceof Int32Array || e instanceof Uint8Array;
	}function bytesPerElement(e) {
	  if ("float32" === e || "int32" === e) return 4;if ("bool" === e) return 1;throw new Error("Unknown dtype " + e);
	}function isFunction(e) {
	  return !!(e && e.constructor && e.call && e.apply);
	}function getTensorsInContainer(e) {
	  var t = [];return walkTensorContainer(e, t, new Set()), t;
	}function walkTensorContainer(e, t, n) {
	  if (null != e) if (e instanceof Tensor) t.push(e);else if (isIterable(e)) {
	    var r = e;for (var a in r) {
	      var o = r[a];n.has(o) || (n.add(o), walkTensorContainer(o, t, n));
	    }
	  }
	}function nearestDivisor(e, t) {
	  for (var n = t; n < e; ++n) if (e % n == 0) return n;return e;
	}function isIterable(e) {
	  return Array.isArray(e) || "object" == typeof e;
	}var util = Object.freeze({ assertArgumentsAreTensors: assertArgumentsAreTensors, shuffle: shuffle, clamp: clamp, randUniform: randUniform, distSquared: distSquared, assert: assert, assertShapesMatch: assertShapesMatch, assertTypesMatch: assertTypesMatch, flatten: flatten, inferShape: inferShape, sizeFromShape: sizeFromShape, isScalarShape: isScalarShape, arraysEqual: arraysEqual, isInt: isInt, tanh: tanh, sizeToSquarishShape: sizeToSquarishShape, createShuffledIndices: createShuffledIndices, rightPad: rightPad, repeatedTry: repeatedTry, getQueryParams: getQueryParams, inferFromImplicitShape: inferFromImplicitShape, squeezeShape: squeezeShape, getTypedArrayFromDType: getTypedArrayFromDType, isTensorInList: isTensorInList, checkForNaN: checkForNaN, flattenNameArrayMap: flattenNameArrayMap, unflattenToNameArrayMap: unflattenToNameArrayMap, hasEncodingLoss: hasEncodingLoss, copyTypedArray: copyTypedArray, isTypedArray: isTypedArray, bytesPerElement: bytesPerElement, isFunction: isFunction, getTensorsInContainer: getTensorsInContainer, nearestDivisor: nearestDivisor }),
	    FORMAT_LIMIT_NUM_VALS = 20,
	    FORMAT_NUM_FIRST_LAST_VALS = 3,
	    FORMAT_NUM_SIG_DIGITS = 7;function tensorToString(e, t) {
	  var n = e.dataSync(),
	      r = computeMaxSizePerColumn(e),
	      a = subTensorToString(n, e.shape, e.strides, r),
	      o = ["Tensor"];return t && (o.push("  dtype: " + e.dtype), o.push("  rank: " + e.rank), o.push("  shape: [" + e.shape + "]"), o.push("  values:")), o.push(a.map(function (e) {
	    return "    " + e;
	  }).join("\n")), o.join("\n");
	}function computeMaxSizePerColumn(e) {
	  var t = e.dataSync(),
	      n = e.size,
	      r = e.strides[e.strides.length - 1],
	      a = new Array(r).fill(0);if (e.rank > 1) for (var o = 0; o < n / r; o++) for (var i = o * r, s = 0; s < r; s++) a[s] = Math.max(a[s], valToString(t[i + s], 0).length);return a;
	}function valToString(e, t) {
	  return rightPad(parseFloat(e.toFixed(FORMAT_NUM_SIG_DIGITS)).toString(), t);
	}function subTensorToString(e, t, n, r, a) {
	  void 0 === a && (a = !0);var o = t[0],
	      i = t.length;if (0 === i) return [e[0].toString()];if (1 === i) {
	    if (o > FORMAT_LIMIT_NUM_VALS) {
	      var s = Array.from(e.subarray(0, FORMAT_NUM_FIRST_LAST_VALS)),
	          u = Array.from(e.subarray(o - FORMAT_NUM_FIRST_LAST_VALS, o));return ["[" + s.map(function (e, t) {
	        return valToString(e, r[t]);
	      }).join(", ") + ", ..., " + u.map(function (e, t) {
	        return valToString(e, r[o - FORMAT_NUM_FIRST_LAST_VALS + t]);
	      }).join(", ") + "]"];
	    }return ["[" + Array.from(e).map(function (e, t) {
	      return valToString(e, r[t]);
	    }).join(", ") + "]"];
	  }var l = t.slice(1),
	      c = n.slice(1),
	      d = n[0],
	      p = [];if (o > FORMAT_LIMIT_NUM_VALS) {
	    for (var h = 0; h < FORMAT_NUM_FIRST_LAST_VALS; h++) {
	      var f = (g = h * d) + d;p.push.apply(p, subTensorToString(e.subarray(g, f), l, c, r, !1));
	    }p.push("...");for (h = o - FORMAT_NUM_FIRST_LAST_VALS; h < o; h++) {
	      f = (g = h * d) + d;p.push.apply(p, subTensorToString(e.subarray(g, f), l, c, r, h === o - 1));
	    }
	  } else for (h = 0; h < o; h++) {
	    var g;f = (g = h * d) + d;p.push.apply(p, subTensorToString(e.subarray(g, f), l, c, r, h === o - 1));
	  }var m = 2 === i ? "," : "";p[0] = "[" + p[0] + m;for (h = 1; h < p.length - 1; h++) p[h] = " " + p[h] + m;var v = ",\n";for (h = 2; h < i; h++) v += "\n";return p[p.length - 1] = " " + p[p.length - 1] + "]" + (a ? "" : v), p;
	}function axesAreInnerMostDims(e, t) {
	  for (var n = 0; n < e.length; ++n) if (e[e.length - n - 1] !== t - 1 - n) return !1;return !0;
	}function combineLocations(e, t, n) {
	  for (var r = e.length + t.length, a = [], o = 0, i = 0, s = 0; s < r; s++) -1 === n.indexOf(s) ? a.push(e[o++]) : a.push(t[i++]);return a;
	}function computeOutAndReduceShapes(e, t) {
	  for (var n = [], r = e.length, a = 0; a < r; a++) -1 === t.indexOf(a) && n.push(e[a]);return [n, t.map(function (t) {
	    return e[t];
	  })];
	}function expandShapeToKeepDim(e, t) {
	  return combineLocations(e, t.map(function (e) {
	    return 1;
	  }), t);
	}function parseAxisParam(e, t) {
	  var n = t.length;return assert((e = null == e ? t.map(function (e, t) {
	    return t;
	  }) : [].concat(e)).every(function (e) {
	    return e >= -n && e < n;
	  }), "All values in axis param must be in range [-" + n + ", " + n + ") but got axis " + e), assert(e.every(function (e) {
	    return isInt(e);
	  }), "All values in axis param must be integers but got axis " + e), e.map(function (e) {
	    return e < 0 ? n + e : e;
	  });
	}function assertAxesAreInnerMostDims(e, t, n) {
	  assert(axesAreInnerMostDims(t, n), e + " supports only inner-most axes for now. Got axes " + t + " and rank-" + n + " input.");
	}function getAxesPermutation(e, t) {
	  if (axesAreInnerMostDims(e, t)) return null;for (var n = [], r = 0; r < t; ++r) -1 === e.indexOf(r) && n.push(r);return e.forEach(function (e) {
	    return n.push(e);
	  }), n;
	}function getUndoAxesPermutation(e) {
	  return e.map(function (e, t) {
	    return [t, e];
	  }).sort(function (e, t) {
	    return e[1] - t[1];
	  }).map(function (e) {
	    return e[0];
	  });
	}function getInnerMostAxes(e, t) {
	  for (var n = [], r = t - e; r < t; ++r) n.push(r);return n;
	}function assertParams(e, t, n) {
	  var r = e.length,
	      a = t.length;assert(e.length === t.length, "Error in concat" + r + "D: rank of x1 (" + r + ") and x2 (" + a + ") must be the same."), assert(n >= 0 && n < r, "Error in concat" + r + "D: axis must be between 0 and " + (r - 1) + ".");for (var o = 0; o < r; o++) assert(o === n || e[o] === t[o], "Error in concat" + r + "D: Shape (" + e + ") does not match (" + t + ") along the non-concatenated axis " + o + ".");
	}function computeOutShape(e, t, n) {
	  assert(e.length === t.length, "x1 and x2 should have the same rank.");var r = e.slice();return r[n] += t[n], r;
	}function computeGradientSliceShapes(e, t) {
	  return { aBegin: [0, 0], aSize: e, bBegin: [0, e[1]], bSize: t };
	}function operation(e, t, n) {
	  var r = n.value;return n.value = function () {
	    for (var e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];return tidy(t, function () {
	      return r.apply(void 0, e);
	    });
	  }, n;
	}var ConcatOps = function () {
	  function e() {}return e.concat1d = function (t) {
	    return e.concat(t, 0);
	  }, e.concat2d = function (t, n) {
	    return e.concat(t, n);
	  }, e.concat3d = function (t, n) {
	    return e.concat(t, n);
	  }, e.concat4d = function (t, n) {
	    return e.concat(t, n);
	  }, e.concat = function (e, t) {
	    void 0 === t && (t = 0), assert(e.length >= 1, "Pass at least one tensor to concat"), assertArgumentsAreTensors({ tensors: e }, "concat");var n = e[0];if (1 === e.length) return n;for (var r = parseAxisParam(t, n.shape), a = 1; a < e.length; ++a) n = concat2Tensors(n, e[a], r[0]);return n;
	  }, __decorate([doc({ heading: "Tensors", subheading: "Slicing and Joining" }), operation], e, "concat", null), e;
	}();function concat2Tensors(e, t, n) {
	  assertParams(e.shape, t.shape, n);var r = computeOutShape(e.shape, t.shape, n),
	      a = e.as2D(-1, sizeFromShape(e.shape.slice(n))),
	      o = t.as2D(-1, sizeFromShape(t.shape.slice(n))),
	      i = computeGradientSliceShapes(a.shape, o.shape),
	      s = i.aBegin,
	      u = i.aSize,
	      l = i.bBegin,
	      c = i.bSize;return ENV.engine.runKernel(function (e) {
	    return e.concat(a, o);
	  }, { a: a, b: o }, function (e) {
	    return { a: function () {
	        return e.slice(s, u);
	      }, b: function () {
	        return e.slice(l, c);
	      } };
	  }).reshape(r);
	}function createCommonjsModule(e, t) {
	  return e(t = { exports: {} }, t.exports), t.exports;
	}var alea = createCommonjsModule(function (e) {
	  !function (e, t, n) {
	    function r(e, t) {
	      return t.c = e.c, t.s0 = e.s0, t.s1 = e.s1, t.s2 = e.s2, t;
	    }function a(e, t) {
	      var n = new function (e) {
	        var t,
	            n = this,
	            r = (t = 4022871197, function (e) {
	          e = e.toString();for (var n = 0; n < e.length; n++) {
	            var r = .02519603282416938 * (t += e.charCodeAt(n));r -= t = r >>> 0, t = (r *= t) >>> 0, t += 4294967296 * (r -= t);
	          }return 2.3283064365386963e-10 * (t >>> 0);
	        });n.next = function () {
	          var e = 2091639 * n.s0 + 2.3283064365386963e-10 * n.c;return n.s0 = n.s1, n.s1 = n.s2, n.s2 = e - (n.c = 0 | e);
	        }, n.c = 1, n.s0 = r(" "), n.s1 = r(" "), n.s2 = r(" "), n.s0 -= r(e), n.s0 < 0 && (n.s0 += 1), n.s1 -= r(e), n.s1 < 0 && (n.s1 += 1), n.s2 -= r(e), n.s2 < 0 && (n.s2 += 1), r = null;
	      }(e),
	          a = t && t.state,
	          o = n.next;return o.int32 = function () {
	        return 4294967296 * n.next() | 0;
	      }, o.double = function () {
	        return o() + 1.1102230246251565e-16 * (2097152 * o() | 0);
	      }, o.quick = o, a && ("object" == typeof a && r(a, n), o.state = function () {
	        return r(n, {});
	      }), o;
	    }t && t.exports ? t.exports = a : n && n.amd ? n(function () {
	      return a;
	    }) : this.alea = a;
	  }(0, e, !1);
	}),
	    xor128 = createCommonjsModule(function (e) {
	  !function (e, t, n) {
	    function r(e, t) {
	      return t.x = e.x, t.y = e.y, t.z = e.z, t.w = e.w, t;
	    }function a(e, t) {
	      var n = new function (e) {
	        var t = this,
	            n = "";t.x = 0, t.y = 0, t.z = 0, t.w = 0, t.next = function () {
	          var e = t.x ^ t.x << 11;return t.x = t.y, t.y = t.z, t.z = t.w, t.w ^= t.w >>> 19 ^ e ^ e >>> 8;
	        }, e === (0 | e) ? t.x = e : n += e;for (var r = 0; r < n.length + 64; r++) t.x ^= 0 | n.charCodeAt(r), t.next();
	      }(e),
	          a = t && t.state,
	          o = function () {
	        return (n.next() >>> 0) / 4294967296;
	      };return o.double = function () {
	        do {
	          var e = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);
	        } while (0 === e);return e;
	      }, o.int32 = n.next, o.quick = o, a && ("object" == typeof a && r(a, n), o.state = function () {
	        return r(n, {});
	      }), o;
	    }t && t.exports ? t.exports = a : n && n.amd ? n(function () {
	      return a;
	    }) : this.xor128 = a;
	  }(0, e, !1);
	}),
	    xorwow = createCommonjsModule(function (e) {
	  !function (e, t, n) {
	    function r(e, t) {
	      return t.x = e.x, t.y = e.y, t.z = e.z, t.w = e.w, t.v = e.v, t.d = e.d, t;
	    }function a(e, t) {
	      var n = new function (e) {
	        var t = this,
	            n = "";t.next = function () {
	          var e = t.x ^ t.x >>> 2;return t.x = t.y, t.y = t.z, t.z = t.w, t.w = t.v, (t.d = t.d + 362437 | 0) + (t.v = t.v ^ t.v << 4 ^ e ^ e << 1) | 0;
	        }, t.x = 0, t.y = 0, t.z = 0, t.w = 0, t.v = 0, e === (0 | e) ? t.x = e : n += e;for (var r = 0; r < n.length + 64; r++) t.x ^= 0 | n.charCodeAt(r), r == n.length && (t.d = t.x << 10 ^ t.x >>> 4), t.next();
	      }(e),
	          a = t && t.state,
	          o = function () {
	        return (n.next() >>> 0) / 4294967296;
	      };return o.double = function () {
	        do {
	          var e = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);
	        } while (0 === e);return e;
	      }, o.int32 = n.next, o.quick = o, a && ("object" == typeof a && r(a, n), o.state = function () {
	        return r(n, {});
	      }), o;
	    }t && t.exports ? t.exports = a : n && n.amd ? n(function () {
	      return a;
	    }) : this.xorwow = a;
	  }(0, e, !1);
	}),
	    xorshift7 = createCommonjsModule(function (e) {
	  !function (e, t, n) {
	    function r(e, t) {
	      return t.x = e.x.slice(), t.i = e.i, t;
	    }function a(e, t) {
	      null == e && (e = +new Date());var n = new function (e) {
	        var t = this;t.next = function () {
	          var e,
	              n,
	              r = t.x,
	              a = t.i;return e = r[a], n = (e ^= e >>> 7) ^ e << 24, n ^= (e = r[a + 1 & 7]) ^ e >>> 10, n ^= (e = r[a + 3 & 7]) ^ e >>> 3, n ^= (e = r[a + 4 & 7]) ^ e << 7, e = r[a + 7 & 7], n ^= (e ^= e << 13) ^ e << 9, r[a] = n, t.i = a + 1 & 7, n;
	        }, function (e, t) {
	          var n,
	              r = [];if (t === (0 | t)) r[0] = t;else for (t = "" + t, n = 0; n < t.length; ++n) r[7 & n] = r[7 & n] << 15 ^ t.charCodeAt(n) + r[n + 1 & 7] << 13;for (; r.length < 8;) r.push(0);for (n = 0; n < 8 && 0 === r[n]; ++n);for (8 == n ? r[7] = -1 : r[n], e.x = r, e.i = 0, n = 256; n > 0; --n) e.next();
	        }(t, e);
	      }(e),
	          a = t && t.state,
	          o = function () {
	        return (n.next() >>> 0) / 4294967296;
	      };return o.double = function () {
	        do {
	          var e = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);
	        } while (0 === e);return e;
	      }, o.int32 = n.next, o.quick = o, a && (a.x && r(a, n), o.state = function () {
	        return r(n, {});
	      }), o;
	    }t && t.exports ? t.exports = a : n && n.amd ? n(function () {
	      return a;
	    }) : this.xorshift7 = a;
	  }(0, e, !1);
	}),
	    xor4096 = createCommonjsModule(function (e) {
	  !function (e, t, n) {
	    function r(e, t) {
	      return t.i = e.i, t.w = e.w, t.X = e.X.slice(), t;
	    }function a(e, t) {
	      null == e && (e = +new Date());var n = new function (e) {
	        var t = this;t.next = function () {
	          var e,
	              n,
	              r = t.w,
	              a = t.X,
	              o = t.i;return t.w = r = r + 1640531527 | 0, n = a[o + 34 & 127], e = a[o = o + 1 & 127], n ^= n << 13, e ^= e << 17, n ^= n >>> 15, e ^= e >>> 12, n = a[o] = n ^ e, t.i = o, n + (r ^ r >>> 16) | 0;
	        }, function (e, t) {
	          var n,
	              r,
	              a,
	              o,
	              i,
	              s = [],
	              u = 128;for (t === (0 | t) ? (r = t, t = null) : (t += "\0", r = 0, u = Math.max(u, t.length)), a = 0, o = -32; o < u; ++o) t && (r ^= t.charCodeAt((o + 32) % t.length)), 0 === o && (i = r), r ^= r << 10, r ^= r >>> 15, r ^= r << 4, r ^= r >>> 13, o >= 0 && (i = i + 1640531527 | 0, a = 0 == (n = s[127 & o] ^= r + i) ? a + 1 : 0);for (a >= 128 && (s[127 & (t && t.length || 0)] = -1), a = 127, o = 512; o > 0; --o) r = s[a + 34 & 127], n = s[a = a + 1 & 127], r ^= r << 13, n ^= n << 17, r ^= r >>> 15, n ^= n >>> 12, s[a] = r ^ n;e.w = i, e.X = s, e.i = a;
	        }(t, e);
	      }(e),
	          a = t && t.state,
	          o = function () {
	        return (n.next() >>> 0) / 4294967296;
	      };return o.double = function () {
	        do {
	          var e = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);
	        } while (0 === e);return e;
	      }, o.int32 = n.next, o.quick = o, a && (a.X && r(a, n), o.state = function () {
	        return r(n, {});
	      }), o;
	    }t && t.exports ? t.exports = a : n && n.amd ? n(function () {
	      return a;
	    }) : this.xor4096 = a;
	  }(0, e, !1);
	}),
	    tychei = createCommonjsModule(function (e) {
	  !function (e, t, n) {
	    function r(e, t) {
	      return t.a = e.a, t.b = e.b, t.c = e.c, t.d = e.d, t;
	    }function a(e, t) {
	      var n = new function (e) {
	        var t = this,
	            n = "";t.next = function () {
	          var e = t.b,
	              n = t.c,
	              r = t.d,
	              a = t.a;return e = e << 25 ^ e >>> 7 ^ n, n = n - r | 0, r = r << 24 ^ r >>> 8 ^ a, a = a - e | 0, t.b = e = e << 20 ^ e >>> 12 ^ n, t.c = n = n - r | 0, t.d = r << 16 ^ n >>> 16 ^ a, t.a = a - e | 0;
	        }, t.a = 0, t.b = 0, t.c = -1640531527, t.d = 1367130551, e === Math.floor(e) ? (t.a = e / 4294967296 | 0, t.b = 0 | e) : n += e;for (var r = 0; r < n.length + 20; r++) t.b ^= 0 | n.charCodeAt(r), t.next();
	      }(e),
	          a = t && t.state,
	          o = function () {
	        return (n.next() >>> 0) / 4294967296;
	      };return o.double = function () {
	        do {
	          var e = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);
	        } while (0 === e);return e;
	      }, o.int32 = n.next, o.quick = o, a && ("object" == typeof a && r(a, n), o.state = function () {
	        return r(n, {});
	      }), o;
	    }t && t.exports ? t.exports = a : n && n.amd ? n(function () {
	      return a;
	    }) : this.tychei = a;
	  }(0, e, !1);
	}),
	    seedrandom = createCommonjsModule(function (e) {
	  !function (t, n) {
	    var r,
	        a = this,
	        o = 256,
	        i = 6,
	        s = "random",
	        u = n.pow(o, i),
	        l = n.pow(2, 52),
	        c = 2 * l,
	        d = o - 1;function p(e, p, m) {
	      var v = [],
	          y = f(function e(t, n) {
	        var r,
	            a = [],
	            o = typeof t;if (n && "object" == o) for (r in t) try {
	          a.push(e(t[r], n - 1));
	        } catch (e) {}return a.length ? a : "string" == o ? t : t + "\0";
	      }((p = 1 == p ? { entropy: !0 } : p || {}).entropy ? [e, g(t)] : null == e ? function () {
	        try {
	          var e;return r && (e = r.randomBytes) ? e = e(o) : (e = new Uint8Array(o), (a.crypto || a.msCrypto).getRandomValues(e)), g(e);
	        } catch (e) {
	          var n = a.navigator,
	              i = n && n.plugins;return [+new Date(), a, i, a.screen, g(t)];
	        }
	      }() : e, 3), v),
	          x = new function (e) {
	        var t,
	            n = e.length,
	            r = this,
	            a = 0,
	            i = r.i = r.j = 0,
	            s = r.S = [];n || (e = [n++]);for (; a < o;) s[a] = a++;for (a = 0; a < o; a++) s[a] = s[i = d & i + e[a % n] + (t = s[a])], s[i] = t;(r.g = function (e) {
	          for (var t, n = 0, a = r.i, i = r.j, s = r.S; e--;) t = s[a = d & a + 1], n = n * o + s[d & (s[a] = s[i = d & i + t]) + (s[i] = t)];return r.i = a, r.j = i, n;
	        })(o);
	      }(v),
	          b = function () {
	        for (var e = x.g(i), t = u, n = 0; e < l;) e = (e + n) * o, t *= o, n = x.g(1);for (; e >= c;) e /= 2, t /= 2, n >>>= 1;return (e + n) / t;
	      };return b.int32 = function () {
	        return 0 | x.g(4);
	      }, b.quick = function () {
	        return x.g(4) / 4294967296;
	      }, b.double = b, f(g(x.S), t), (p.pass || m || function (e, t, r, a) {
	        return a && (a.S && h(a, x), e.state = function () {
	          return h(x, {});
	        }), r ? (n[s] = e, t) : e;
	      })(b, y, "global" in p ? p.global : this == n, p.state);
	    }function h(e, t) {
	      return t.i = e.i, t.j = e.j, t.S = e.S.slice(), t;
	    }function f(e, t) {
	      for (var n, r = e + "", a = 0; a < r.length;) t[d & a] = d & (n ^= 19 * t[d & a]) + r.charCodeAt(a++);return g(t);
	    }function g(e) {
	      return String.fromCharCode.apply(0, e);
	    }if (n["seed" + s] = p, f(n.random(), t), e.exports) {
	      e.exports = p;try {
	        r = require("crypto");
	      } catch (e) {}
	    }
	  }([], Math);
	});seedrandom.alea = alea, seedrandom.xor128 = xor128, seedrandom.xorwow = xorwow, seedrandom.xorshift7 = xorshift7, seedrandom.xor4096 = xor4096, seedrandom.tychei = tychei;var DType,
	    UpcastInt32AndMap,
	    UpcastBoolAndMap,
	    UpcastFloat32AndMap,
	    seedrandom$1 = seedrandom,
	    seedrandom_1 = seedrandom$1.alea,
	    MPRandGauss = function () {
	  function e(e, t, n, r, a) {
	    this.mean = e, this.stdDev = t, this.dtype = n, this.nextVal = NaN, this.truncated = r, this.truncated && (this.upper = this.mean + 2 * this.stdDev, this.lower = this.mean - 2 * this.stdDev);var o = a || Math.random();this.random = seedrandom_1(o.toString());
	  }return e.prototype.nextValue = function () {
	    if (!isNaN(this.nextVal)) {
	      var e = this.nextVal;return this.nextVal = NaN, e;
	    }for (var t, n, r = !1; !r;) {
	      var a = void 0,
	          o = void 0,
	          i = void 0;do {
	        i = (a = 2 * this.random() - 1) * a + (o = 2 * this.random() - 1) * o;
	      } while (i >= 1 || 0 === i);var s = Math.sqrt(-2 * Math.log(i) / i);t = this.mean + this.stdDev * a * s, n = this.mean + this.stdDev * o * s, this.truncated && !this.isValidTruncated(t) || (r = !0);
	    }return this.truncated && !this.isValidTruncated(n) || (this.nextVal = this.convertValue(n)), this.convertValue(t);
	  }, e.prototype.convertValue = function (e) {
	    return null == this.dtype || "float32" === this.dtype ? e : Math.round(e);
	  }, e.prototype.isValidTruncated = function (e) {
	    return e <= this.upper && e >= this.lower;
	  }, e;
	}();!function (e) {
	  e.float32 = "float32", e.int32 = "int32", e.bool = "bool";
	}(DType || (DType = {})), function (e) {
	  e.R0 = "R0", e.R1 = "R1", e.R2 = "R2", e.R3 = "R3", e.R4 = "R4", e.R5 = "R5", e.R6 = "R6";
	}(exports.Rank || (exports.Rank = {})), function (e) {
	  e.float32 = "float32", e.int32 = "int32", e.bool = "int32";
	}(UpcastInt32AndMap || (UpcastInt32AndMap = {})), function (e) {
	  e.float32 = "float32", e.int32 = "int32", e.bool = "bool";
	}(UpcastBoolAndMap || (UpcastBoolAndMap = {})), function (e) {
	  e.float32 = "float32", e.int32 = "float32", e.bool = "float32";
	}(UpcastFloat32AndMap || (UpcastFloat32AndMap = {}));var upcastTypeMap = { float32: UpcastFloat32AndMap, int32: UpcastInt32AndMap, bool: UpcastBoolAndMap };function upcastType(e, t) {
	  return upcastTypeMap[e][t];
	}function sumOutType(e) {
	  return upcastType(e, "int32");
	}function getBroadcastDims(e, t) {
	  for (var n = e.length, r = [], a = 0; a < n; a++) {
	    var o = n - 1 - a,
	        i = e[o] || 1;(t[t.length - 1 - a] || 1) > 1 && 1 === i && r.unshift(o);
	  }return r;
	}function getReductionAxes(e, t) {
	  for (var n = [], r = 0; r < t.length; r++) {
	    var a = e[e.length - r - 1],
	        o = t.length - r - 1,
	        i = t[o];(null == a || 1 === a && i > 1) && n.unshift(o);
	  }return n;
	}function broadcastDimsAreOuter(e) {
	  for (var t = 0; t < e.length; t++) if (e[t] !== t) return !1;return !0;
	}function assertAndGetBroadcastShape(e, t) {
	  for (var n = [], r = "Operands could not be broadcast together with shapes " + e + " and " + t + ".", a = Math.max(e.length, t.length), o = 0; o < a; o++) {
	    var i = e[e.length - o - 1] || 1,
	        s = t[t.length - o - 1] || 1;if (i > 1 && s > 1 && i !== s) throw Error(r);n.unshift(Math.max(i, s));
	  }return n;
	}var BinaryOps = function () {
	  function e() {}return e.add = function (e, t) {
	    assertArgumentsAreTensors({ a: e, b: t }, "add"), assertTypesMatch(e, t);var n = assertAndGetBroadcastShape(e.shape, t.shape);return ENV.engine.runKernel(function (n) {
	      return n.add(e, t);
	    }, { a: e, b: t }, function (r) {
	      return { a: function () {
	          var t = r,
	              a = getReductionAxes(e.shape, n);return a.length > 0 && (t = t.sum(a)), t.reshape(e.shape);
	        }, b: function () {
	          var e = r,
	              a = getReductionAxes(t.shape, n);return a.length > 0 && (e = e.sum(a)), e.reshape(t.shape);
	        } };
	    });
	  }, e.addStrict = function (e, t) {
	    return assertShapesMatch(e.shape, t.shape, "Error in addStrict: "), e.add(t);
	  }, e.sub = function (e, t) {
	    assertArgumentsAreTensors({ a: e, b: t }, "sub"), assertTypesMatch(e, t);var n = assertAndGetBroadcastShape(e.shape, t.shape);return ENV.engine.runKernel(function (n) {
	      return n.subtract(e, t);
	    }, { a: e, b: t }, function (r) {
	      return { a: function () {
	          var t = r,
	              a = getReductionAxes(e.shape, n);return a.length > 0 && (t = t.sum(a)), t.reshape(e.shape);
	        }, b: function () {
	          var e = r,
	              a = getReductionAxes(t.shape, n);return a.length > 0 && (e = e.sum(a)), e.neg().reshape(t.shape);
	        } };
	    });
	  }, e.subStrict = function (e, t) {
	    return assertShapesMatch(e.shape, t.shape, "Error in subStrict: "), e.sub(t);
	  }, e.pow = function (e, t) {
	    assertArgumentsAreTensors({ base: e, exp: t }, "pow");var n = assertAndGetBroadcastShape(e.shape, t.shape);e = e.cast(upcastType(e.dtype, t.dtype)), t = t.cast(upcastType(e.dtype, t.dtype));return ENV.engine.runKernel(function (n, r) {
	      return r(n.pow(e, t));
	    }, { base: e, exp: t }, function (r, a) {
	      var o = a[0];return { base: function () {
	          var a = r.mul(t.toFloat().mul(o.div(e))),
	              i = getReductionAxes(e.shape, n);return i.length > 0 && (a = a.sum(i)), a.reshape(e.shape);
	        }, exp: function () {
	          var a = r.mul(o.mul(e.log()).toFloat()),
	              i = getReductionAxes(t.shape, n);return i.length > 0 && (a = a.sum(i)), a.reshape(t.shape);
	        } };
	    });
	  }, e.powStrict = function (e, t) {
	    return assertShapesMatch(e.shape, t.shape, "Error in powStrict: "), e.pow(t);
	  }, e.mul = function (e, t) {
	    assertArgumentsAreTensors({ a: e, b: t }, "mul"), assertTypesMatch(e, t);var n = assertAndGetBroadcastShape(e.shape, t.shape);return ENV.engine.runKernel(function (n) {
	      return n.multiply(e, t);
	    }, { a: e, b: t }, function (r) {
	      return { a: function () {
	          var a = r.mul(t.toFloat()),
	              o = getReductionAxes(e.shape, n);return o.length > 0 ? a.sum(o).reshape(e.shape) : a;
	        }, b: function () {
	          var a = r.mul(e.toFloat()),
	              o = getReductionAxes(t.shape, n);return o.length > 0 ? a.sum(o).reshape(t.shape) : a;
	        } };
	    });
	  }, e.mulStrict = function (e, t) {
	    return assertShapesMatch(e.shape, t.shape, "Error in multiplyStrict: "), e.mul(t);
	  }, e.div = function (t, n) {
	    var r;if (assertArgumentsAreTensors({ a: t, b: n }, "div"), assertTypesMatch(t, n), "int32" === t.dtype && "int32" === n.dtype) return e.floorDiv(t, n);r = function (e) {
	      return e.realDivide(t, n);
	    };var a = assertAndGetBroadcastShape(t.shape, n.shape);return ENV.engine.runKernel(r, { a: t, b: n }, function (e) {
	      return { a: function () {
	          var r = e.div(n.toFloat()),
	              o = getReductionAxes(t.shape, a);return o.length > 0 ? r.sum(o).reshape(t.shape) : r;
	        }, b: function () {
	          var r = e.mul(t.toFloat()),
	              o = getReductionAxes(n.shape, a);o.length > 0 && (r = r.sum(o).reshape(n.shape));var i = n.square();return r.div(i.toFloat()).neg();
	        } };
	    });
	  }, e.floorDiv = function (e, t) {
	    assertArgumentsAreTensors({ a: e, b: t }, "floorDiv"), assertTypesMatch(e, t);var n = assertAndGetBroadcastShape(e.shape, t.shape);return ENV.engine.runKernel(function (n) {
	      return n.floorDiv(e, t);
	    }, { a: e, b: t }, function (r) {
	      return { a: function () {
	          var a = r.div(t.toFloat()),
	              o = getReductionAxes(e.shape, n);return o.length > 0 ? a.sum(o).reshape(e.shape) : a;
	        }, b: function () {
	          var a = r.mul(e.toFloat()),
	              o = getReductionAxes(t.shape, n);o.length > 0 && (a = a.sum(o).reshape(t.shape));var i = t.square();return a.div(i.toFloat()).neg();
	        } };
	    });
	  }, e.divStrict = function (e, t) {
	    return assertShapesMatch(e.shape, t.shape, "Error in divideStrict: "), e.div(t);
	  }, e.mod = function (e, t) {
	    assertArgumentsAreTensors({ a: e, b: t }, "mod"), assertTypesMatch(e, t);var n = assertAndGetBroadcastShape(e.shape, t.shape);return ENV.engine.runKernel(function (n) {
	      return n.mod(e, t);
	    }, { a: e, b: t }, function (r) {
	      return { a: function () {
	          var t = getReductionAxes(e.shape, n);return t.length > 0 ? r.sum(t).reshape(e.shape) : r;
	        }, b: function () {
	          var a = r.mul(e.div(t).floor().neg()),
	              o = getReductionAxes(t.shape, n);return o.length > 0 ? a.sum(o).reshape(t.shape) : a;
	        } };
	    });
	  }, e.modStrict = function (e, t) {
	    return assertShapesMatch(e.shape, t.shape, "Error in modStrict: "), e.mod(t);
	  }, e.minimum = function (e, t) {
	    assertArgumentsAreTensors({ a: e, b: t }, "minimum"), assertTypesMatch(e, t), "bool" === e.dtype && (e = e.toInt()), "bool" === t.dtype && (t = t.toInt()), assertAndGetBroadcastShape(e.shape, t.shape);return ENV.engine.runKernel(function (n) {
	      return n.minimum(e, t);
	    }, { a: e, b: t }, function (n) {
	      return { a: function () {
	          return n.mul(e.lessEqual(t).toFloat());
	        }, b: function () {
	          return n.mul(e.greater(t).toFloat());
	        } };
	    });
	  }, e.minimumStrict = function (e, t) {
	    return assertShapesMatch(e.shape, t.shape, "Error in minimumStrict: "), e.minimum(t);
	  }, e.maximum = function (e, t) {
	    assertArgumentsAreTensors({ a: e, b: t }, "maximum"), assertTypesMatch(e, t), "bool" === e.dtype && (e = e.toInt()), "bool" === t.dtype && (t = t.toInt()), assertAndGetBroadcastShape(e.shape, t.shape);return ENV.engine.runKernel(function (n) {
	      return n.maximum(e, t);
	    }, { a: e, b: t }, function (n) {
	      return { a: function () {
	          return n.mul(e.greaterEqual(t).toFloat());
	        }, b: function () {
	          return n.mul(e.less(t).toFloat());
	        } };
	    });
	  }, e.maximumStrict = function (e, t) {
	    return assertShapesMatch(e.shape, t.shape, "Error in minimumStrict: "), e.maximum(t);
	  }, e.squaredDifference = function (e, t) {
	    assertArgumentsAreTensors({ a: e, b: t }, "squaredDifference"), assertTypesMatch(e, t), assertAndGetBroadcastShape(e.shape, t.shape);return ENV.engine.runKernel(function (n) {
	      return n.squaredDifference(e, t);
	    }, { a: e, b: t }, function (n) {
	      var r = scalar(2);return { a: function () {
	          return n.mul(e.sub(t).mul(r));
	        }, b: function () {
	          return n.mul(t.sub(e).mul(r));
	        } };
	    });
	  }, e.squaredDifferenceStrict = function (e, t) {
	    return assertShapesMatch(e.shape, t.shape, "Error in squaredDifferenceStrict: "), e.squaredDifference(t);
	  }, e.atan2 = function (t, n) {
	    assertArgumentsAreTensors({ a: t, b: n }, "atan2"), assertTypesMatch(t, n);var r = assertAndGetBroadcastShape(t.shape, n.shape);return ENV.engine.runKernel(function (e) {
	      return e.atan2(t, n);
	    }, { a: t, b: n }, function (a) {
	      return { a: function () {
	          var o = e.add(square(t), square(n)),
	              i = a.mul(n.div(o)),
	              s = getReductionAxes(t.shape, r);return s.length > 0 && (i = i.sum(s)), i.reshape(t.shape);
	        }, b: function () {
	          var o = e.add(square(t), square(n)),
	              i = neg(a.mul(t.div(o))),
	              s = getReductionAxes(n.shape, r);return s.length > 0 && (i = i.sum(s)), i.reshape(n.shape);
	        } };
	    });
	  }, __decorate([doc({ heading: "Operations", subheading: "Arithmetic" }), operation], e, "add", null), __decorate([operation], e, "addStrict", null), __decorate([doc({ heading: "Operations", subheading: "Arithmetic" }), operation], e, "sub", null), __decorate([operation], e, "subStrict", null), __decorate([doc({ heading: "Operations", subheading: "Arithmetic" }), operation], e, "pow", null), __decorate([operation], e, "powStrict", null), __decorate([doc({ heading: "Operations", subheading: "Arithmetic" }), operation], e, "mul", null), __decorate([operation], e, "mulStrict", null), __decorate([doc({ heading: "Operations", subheading: "Arithmetic" }), operation], e, "div", null), __decorate([doc({ heading: "Operations", subheading: "Arithmetic" }), operation], e, "floorDiv", null), __decorate([operation], e, "divStrict", null), __decorate([doc({ heading: "Operations", subheading: "Arithmetic" }), operation], e, "mod", null), __decorate([operation], e, "modStrict", null), __decorate([doc({ heading: "Operations", subheading: "Arithmetic" }), operation], e, "minimum", null), __decorate([operation], e, "minimumStrict", null), __decorate([doc({ heading: "Operations", subheading: "Arithmetic" }), operation], e, "maximum", null), __decorate([operation], e, "maximumStrict", null), __decorate([doc({ heading: "Operations", subheading: "Arithmetic" }), operation], e, "squaredDifference", null), __decorate([operation], e, "squaredDifferenceStrict", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "atan2", null), e;
	}(),
	    CompareOps = function () {
	  function e() {}return e.notEqual = function (e, t) {
	    return assertArgumentsAreTensors({ a: e, b: t }, "notEqual"), assertTypesMatch(e, t), assertAndGetBroadcastShape(e.shape, t.shape), ENV.engine.runKernel(function (n) {
	      return n.notEqual(e, t);
	    }, { a: e, b: t });
	  }, e.notEqualStrict = function (e, t) {
	    return assertShapesMatch(e.shape, t.shape, "Error in notEqualStrict: "), e.notEqual(t);
	  }, e.less = function (e, t) {
	    return assertArgumentsAreTensors({ a: e, b: t }, "less"), assertTypesMatch(e, t), assertAndGetBroadcastShape(e.shape, t.shape), ENV.engine.runKernel(function (n) {
	      return n.less(e, t);
	    }, { a: e, b: t });
	  }, e.lessStrict = function (e, t) {
	    return assertShapesMatch(e.shape, t.shape, "Error in lessStrict: "), e.less(t);
	  }, e.equal = function (e, t) {
	    return assertArgumentsAreTensors({ a: e, b: t }, "equal"), assertTypesMatch(e, t), assertAndGetBroadcastShape(e.shape, t.shape), ENV.engine.runKernel(function (n) {
	      return n.equal(e, t);
	    }, { a: e, b: t });
	  }, e.equalStrict = function (e, t) {
	    return assertShapesMatch(e.shape, t.shape, "Error in equalStrict: "), e.equal(t);
	  }, e.lessEqual = function (e, t) {
	    return assertArgumentsAreTensors({ a: e, b: t }, "lessEqual"), assertTypesMatch(e, t), assertAndGetBroadcastShape(e.shape, t.shape), ENV.engine.runKernel(function (n) {
	      return n.lessEqual(e, t);
	    }, { a: e, b: t });
	  }, e.lessEqualStrict = function (e, t) {
	    return assertShapesMatch(e.shape, t.shape, "Error in lessEqualStrict: "), e.lessEqual(t);
	  }, e.greater = function (e, t) {
	    return assertArgumentsAreTensors({ a: e, b: t }, "greater"), assertTypesMatch(e, t), assertAndGetBroadcastShape(e.shape, t.shape), ENV.engine.runKernel(function (n) {
	      return n.greater(e, t);
	    }, { a: e, b: t });
	  }, e.greaterStrict = function (e, t) {
	    return assertShapesMatch(e.shape, t.shape, "Error in greaterStrict: "), e.greater(t);
	  }, e.greaterEqual = function (e, t) {
	    return assertArgumentsAreTensors({ a: e, b: t }, "greaterEqual"), assertTypesMatch(e, t), assertAndGetBroadcastShape(e.shape, t.shape), ENV.engine.runKernel(function (n) {
	      return n.greaterEqual(e, t);
	    }, { a: e, b: t });
	  }, e.greaterEqualStrict = function (e, t) {
	    return assertShapesMatch(e.shape, t.shape, "Error in greaterEqualStrict: "), e.greaterEqual(t);
	  }, __decorate([doc({ heading: "Operations", subheading: "Logical" }), operation], e, "notEqual", null), __decorate([operation], e, "notEqualStrict", null), __decorate([doc({ heading: "Operations", subheading: "Logical" }), operation], e, "less", null), __decorate([operation], e, "lessStrict", null), __decorate([doc({ heading: "Operations", subheading: "Logical" }), operation], e, "equal", null), __decorate([operation], e, "equalStrict", null), __decorate([doc({ heading: "Operations", subheading: "Logical" }), operation], e, "lessEqual", null), __decorate([operation], e, "lessEqualStrict", null), __decorate([doc({ heading: "Operations", subheading: "Logical" }), operation], e, "greater", null), __decorate([operation], e, "greaterStrict", null), __decorate([doc({ heading: "Operations", subheading: "Logical" }), operation], e, "greaterEqual", null), __decorate([operation], e, "greaterEqualStrict", null), e;
	}(),
	    LogicalOps = function () {
	  function e() {}return e.logicalNot = function (e) {
	    return assertArgumentsAreTensors({ x: e }, "logicalNot"), assert("bool" === e.dtype, "Error Array must be of type bool."), ENV.engine.runKernel(function (t) {
	      return t.logicalNot(e);
	    }, { x: e });
	  }, e.logicalAnd = function (e, t) {
	    return assertArgumentsAreTensors({ a: e, b: t }, "logicalAnd"), assert("bool" === e.dtype && "bool" === t.dtype, "Error Array must be of type bool."), assertAndGetBroadcastShape(e.shape, t.shape), ENV.engine.runKernel(function (n) {
	      return n.logicalAnd(e, t);
	    }, { a: e, b: t });
	  }, e.logicalOr = function (e, t) {
	    return assertArgumentsAreTensors({ a: e, b: t }, "logicalOr"), assert("bool" === e.dtype && "bool" === t.dtype, "Error Array must be of type bool."), assertAndGetBroadcastShape(e.shape, t.shape), ENV.engine.runKernel(function (n) {
	      return n.logicalOr(e, t);
	    }, { a: e, b: t });
	  }, e.logicalXor = function (t, n) {
	    return assertArgumentsAreTensors({ a: t, b: n }, "logicalXor"), assert("bool" === t.dtype && "bool" === n.dtype, "Error Array must be of type bool."), assertAndGetBroadcastShape(t.shape, n.shape), e.logicalOr(t, n).logicalAnd(e.logicalAnd(t, n).logicalNot());
	  }, e.where = function (e, t, n) {
	    assertArgumentsAreTensors({ condition: e, a: t, b: n }, "where"), assert("bool" === e.dtype, "Error Condition must be of type bool."), assertShapesMatch(t.shape, n.shape, "Error in where: "), 1 === e.rank ? assert(e.shape[0] === t.shape[0], "The first dimension of `a` must match the size of `condition`.") : assertShapesMatch(e.shape, n.shape, "Error in where: ");var r = upcastType(t.dtype, n.dtype);return ENV.engine.runKernel(function (a) {
	      return a.where(e, t, n, r);
	    }, { condition: e, a: t, b: n }, function (r) {
	      return { condition: function () {
	          return zerosLike(e);
	        }, a: function () {
	          return r.mul(e.cast(t.dtype));
	        }, b: function () {
	          return r.mul(e.logicalNot().cast(n.dtype));
	        } };
	    });
	  }, __decorate([doc({ heading: "Operations", subheading: "Logical" }), operation], e, "logicalNot", null), __decorate([doc({ heading: "Operations", subheading: "Logical" }), operation], e, "logicalAnd", null), __decorate([doc({ heading: "Operations", subheading: "Logical" }), operation], e, "logicalOr", null), __decorate([doc({ heading: "Operations", subheading: "Logical" }), operation], e, "logicalXor", null), __decorate([doc({ heading: "Operations", subheading: "Logical" }), operation], e, "where", null), e;
	}(),
	    SegmentOps = function () {
	  function e() {}return e.unsortedSegmentSum = function (e, t, n) {
	    assertArgumentsAreTensors({ x: e, segmentIds: t }, "unsortedSegmentSum"), assert("int32" === t.dtype, "segmentIds must be of dtype `int32`"), assert(isInt(n), "numSegments must be of dtype int");return ENV.engine.runKernel(function (r) {
	      return r.unsortedSegmentSum(e, t, n);
	    }, { x: e }, function (e) {
	      return { x: function () {
	          return gatherDropNegatives(e, t);
	        } };
	    });
	  }, __decorate([doc({ heading: "Operations", subheading: "Segment" }), operation], e, "unsortedSegmentSum", null), e;
	}();function gatherDropNegatives(e, t) {
	  for (var n = BinaryOps.maximum(t, ArrayOps.zerosLike(t)), r = ArrayOps.gather(e, n), a = CompareOps.greaterEqual(t, ArrayOps.scalar(0, "int32")), o = r.rank - a.rank, i = 0; i < o; ++i) a = ArrayOps.expandDims(a, i + 1);a = LogicalOps.logicalAnd(a, ArrayOps.ones(r.shape, "bool"));var s = ArrayOps.zerosLike(r);return LogicalOps.where(a, r, s);
	}var ArrayOps = function () {
	  function e() {}return e.tensor = function (e, t, n) {
	    void 0 === n && (n = "float32");var r = inferShape(e);return null != t && 1 !== r.length && assertShapesMatch(t, r, "Error creating a new Tensor. Inferred shape (" + r + ") does not match the provided shape (" + t + "). "), isTypedArray(e) || Array.isArray(e) || (e = [e]), t = t || r, Tensor.make(t, { values: toTypedArray(e, n) }, n);
	  }, e.scalar = function (t, n) {
	    if (void 0 === n && (n = "float32"), isTypedArray(t) || Array.isArray(t)) throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean)");return e.tensor(t, [], n);
	  }, e.tensor1d = function (t, n) {
	    void 0 === n && (n = "float32");var r = inferShape(t);if (1 !== r.length) throw new Error("tensor1d() requires values to be a flat/TypedArray");return e.tensor(t, r, n);
	  }, e.tensor2d = function (t, n, r) {
	    if (void 0 === r && (r = "float32"), null != n && 2 !== n.length) throw new Error("tensor2d() requires shape to have two numbers");var a = inferShape(t);if (2 !== a.length && 1 !== a.length) throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if (1 === a.length && null == n) throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return n = n || a, e.tensor(t, n, r);
	  }, e.tensor3d = function (t, n, r) {
	    if (void 0 === r && (r = "float32"), null != n && 3 !== n.length) throw new Error("tensor3d() requires shape to have three numbers");var a = inferShape(t);if (3 !== a.length && 1 !== a.length) throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if (1 === a.length && null == n) throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return n = n || a, e.tensor(t, n, r);
	  }, e.tensor4d = function (t, n, r) {
	    if (void 0 === r && (r = "float32"), null != n && 4 !== n.length) throw new Error("tensor4d() requires shape to have four numbers");var a = inferShape(t);if (4 !== a.length && 1 !== a.length) throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if (1 === a.length && null == n) throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return n = n || a, e.tensor(t, n, r);
	  }, e.tensor5d = function (t, n, r) {
	    if (void 0 === r && (r = "float32"), null != n && 5 !== n.length) throw new Error("tensor5d() requires shape to have five numbers");var a = inferShape(t);if (5 !== a.length && 1 !== a.length) throw new Error("tensor5d() requires values to be            number[][][][][] or flat/TypedArray");if (1 === a.length && null == n) throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return n = n || a, e.tensor(t, n, r);
	  }, e.tensor6d = function (t, n, r) {
	    if (void 0 === r && (r = "float32"), null != n && 6 !== n.length) throw new Error("tensor6d() requires shape to have six numbers");var a = inferShape(t);if (6 !== a.length && 1 !== a.length) throw new Error("tensor6d() requires values to be number[][][][] or flat/TypedArray");if (1 === a.length && null == n) throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return n = n || a, e.tensor(t, n, r);
	  }, e.ones = function (e, t) {
	    void 0 === t && (t = "float32");var n = makeOnesTypedArray(sizeFromShape(e), t);return Tensor.make(e, { values: n }, t);
	  }, e.zeros = function (e, t) {
	    void 0 === t && (t = "float32");var n = makeZerosTypedArray(sizeFromShape(e), t);return Tensor.make(e, { values: n }, t);
	  }, e.fill = function (e, t, n) {
	    void 0 === n && (n = "float32");var r = getTypedArrayFromDType(n, sizeFromShape(e));return r.fill(t), Tensor.make(e, { values: r }, n);
	  }, e.onesLike = function (t) {
	    return assertArgumentsAreTensors({ x: t }, "onesLike"), e.ones(t.shape, t.dtype);
	  }, e.zerosLike = function (t) {
	    return assertArgumentsAreTensors({ x: t }, "zerosLike"), e.zeros(t.shape, t.dtype);
	  }, e.clone = function (e) {
	    assertArgumentsAreTensors({ x: e }, "clone");return ENV.engine.runKernel(function (t) {
	      return Tensor.make(e.shape, { dataId: e.dataId }, e.dtype);
	    }, { x: e }, function (e) {
	      return { x: function () {
	          return e.toFloat();
	        } };
	    });
	  }, e.eye = function (t, n, r, a) {
	    void 0 === a && (a = "float32"), null == n && (n = t);for (var o = e.buffer([t, n], a), i = t <= n ? t : n, s = 0; s < i; ++s) o.set(1, s, s);var u = o.toTensor().as2D(t, n);if (null == r) return u;if (1 === r.length) return e.tile(e.expandDims(u, 0), [r[0], 1, 1]);if (2 === r.length) return e.tile(e.expandDims(e.expandDims(u, 0), 0), [r[0], r[1], 1, 1]);throw new Error("eye() currently supports only 1D and 2D batchShapes, but received " + r.length + "D.");
	  }, e.randomNormal = function (t, n, r, a, o) {
	    if (void 0 === n && (n = 0), void 0 === r && (r = 1), null != a && "bool" === a) throw new Error("Unsupported data type " + a);for (var i = new MPRandGauss(n, r, a, !1, o), s = e.buffer(t, a), u = 0; u < s.values.length; u++) s.values[u] = i.nextValue();return s.toTensor();
	  }, e.truncatedNormal = function (t, n, r, a, o) {
	    if (void 0 === n && (n = 0), void 0 === r && (r = 1), null != a && "bool" === a) throw new Error("Unsupported data type " + a);for (var i = new MPRandGauss(n, r, a, !0, o), s = e.buffer(t, a), u = 0; u < s.values.length; u++) s.values[u] = i.nextValue();return s.toTensor();
	  }, e.randomUniform = function (t, n, r, a) {
	    void 0 === n && (n = 0), void 0 === r && (r = 1), void 0 === a && (a = "float32");for (var o = e.buffer(t, a), i = 0; i < o.values.length; i++) o.values[i] = randUniform(n, r);return o.toTensor();
	  }, e.rand = function (e, t, n) {
	    var r = sizeFromShape(e),
	        a = null;if (null == n || "float32" === n) a = new Float32Array(r);else if ("int32" === n) a = new Int32Array(r);else {
	      if ("bool" !== n) throw new Error("Unknown data type " + n);a = new Uint8Array(r);
	    }for (var o = 0; o < r; o++) a[o] = t();return Tensor.make(e, { values: a }, n);
	  }, e.multinomial = function (e, t, n, r) {
	    void 0 === r && (r = !1), assertArgumentsAreTensors({ logits: e }, "multinomial");var a = e.size,
	        o = e.rank;if (a < 2) throw new Error("Error in multinomial: you need at least 2 outcomes, but got " + a + ".");if (o > 2) throw new Error("Rank of probabilities must be 1 or 2, but is " + o);n = n || Math.random();var i = 1 === o ? e.as2D(1, -1) : e,
	        s = ENV.engine.runKernel(function (e) {
	      return e.multinomial(i, r, t, n);
	    }, { logits2D: i });return 1 === o ? s.as1D() : s;
	  }, e.oneHot = function (e, t, n, r) {
	    if (void 0 === n && (n = 1), void 0 === r && (r = 0), assert("int32" === e.dtype, "Indices must be of dtype `int32`"), t < 2) throw new Error("Error in oneHot: depth must be >=2, but it is " + t);return ENV.engine.runKernel(function (a) {
	      return a.oneHot(e, t, n, r);
	    }, { indices: e });
	  }, e.fromPixels = function (e, t) {
	    if (void 0 === t && (t = 3), t > 4) throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");return ENV.engine.fromPixels(e, t);
	  }, e.toPixels = function (e, t) {
	    return __awaiter(this, void 0, void 0, function () {
	      var n, r, a, o, i, s, u, l, c, d, p, h, f, g, m, v, y, x, b;return __generator(this, function (E) {
	        switch (E.label) {case 0:
	            if (assertArgumentsAreTensors({ img: e }, "toPixels"), 2 !== e.rank && 3 !== e.rank) throw new Error("toPixels only supports rank 2 or 3 tensors, got rank " + e.rank + ".");if (n = e.shape.slice(0, 2), r = n[0], a = n[1], (o = 2 === e.rank ? 1 : e.shape[2]) > 4 || 2 === o) throw new Error("toPixels only supports depth of size 1, 3 or 4 but got " + o);return i = e.min(), s = e.max(), [4, i.data()];case 1:
	            return u = E.sent()[0], [4, s.data()];case 2:
	            if (l = E.sent()[0], i.dispose(), s.dispose(), "float32" === e.dtype) {
	              if (u < 0 || l > 1) throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [" + u + " - " + l + "].");
	            } else {
	              if ("int32" !== e.dtype) throw new Error("Unsupported type for toPixels: " + e.dtype + ". Please use float32 or int32 tensors.");if (u < 0 || l > 255) throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [" + u + " - " + l + "].");
	            }return [4, e.data()];case 3:
	            for (c = E.sent(), d = "float32" === e.dtype ? 255 : 1, p = new Uint8ClampedArray(a * r * 4), h = 0; h < r * a; ++h) f = void 0, g = void 0, m = void 0, v = void 0, 1 === o ? (f = c[h] * d, g = c[h] * d, m = c[h] * d, v = 255) : 3 === o ? (f = c[3 * h] * d, g = c[3 * h + 1] * d, m = c[3 * h + 2] * d, v = 255) : 4 === o && (f = c[4 * h] * d, g = c[4 * h + 1] * d, m = c[4 * h + 2] * d, v = c[4 * h + 3] * d), p[(y = 4 * h) + 0] = Math.round(f), p[y + 1] = Math.round(g), p[y + 2] = Math.round(m), p[y + 3] = Math.round(v);return null != t && (t.width = a, t.height = r, x = t.getContext("2d"), b = new ImageData(p, a, r), x.putImageData(b, 0, 0)), [2, p];}
	      });
	    });
	  }, e.reshape = function (e, t) {
	    assertArgumentsAreTensors({ x: e }, "reshape"), t = inferFromImplicitShape(t, e.size), assert(e.size === sizeFromShape(t), "new shape and old shape must have the same number of elements.");return ENV.engine.runKernel(function (n) {
	      return n.reshape(e, t);
	    }, { x: e }, function (t) {
	      return { x: function () {
	          return t.reshape(e.shape);
	        } };
	    });
	  }, e.squeeze = function (t, n) {
	    return assertArgumentsAreTensors({ x: t }, "squeeze"), e.reshape(t, squeezeShape(t.shape, n).newShape);
	  }, e.cast = function (e, t) {
	    assertArgumentsAreTensors({ x: e }, "cast");return ENV.engine.runKernel(function (n) {
	      return n.cast(e, t);
	    }, { x: e }, function (e) {
	      return { x: function () {
	          return e.clone();
	        } };
	    });
	  }, e.tile = function (t, n) {
	    assertArgumentsAreTensors({ x: t }, "tile"), assert(t.rank === n.length, "Error in transpose: rank of input " + t.rank + " must match length of reps " + n + ".");return ENV.engine.runKernel(function (e) {
	      return e.tile(t, n);
	    }, { x: t }, function (r) {
	      return { x: function () {
	          var a = e.zerosLike(t);if (1 === t.rank) for (var o = 0; o < n[0]; ++o) a = a.add(r.slice([o * t.shape[0]], [t.shape[0]]));else if (2 === t.rank) for (o = 0; o < n[0]; ++o) for (var i = 0; i < n[1]; ++i) a = a.add(r.slice([o * t.shape[0], i * t.shape[1]], [t.shape[0], t.shape[1]]));else if (3 === t.rank) for (o = 0; o < n[0]; ++o) for (i = 0; i < n[1]; ++i) for (var s = 0; s < n[2]; ++s) a = a.add(r.slice([o * t.shape[0], i * t.shape[1], s * t.shape[2]], [t.shape[0], t.shape[1], t.shape[2]]));else {
	            if (4 !== t.rank) throw new Error("Gradient for tile operation is not implemented for rank-" + t.rank + " tensors yet.");for (o = 0; o < n[0]; ++o) for (i = 0; i < n[1]; ++i) for (s = 0; s < n[2]; ++s) for (var u = 0; u < n[3]; ++u) a = a.add(r.slice([o * t.shape[0], i * t.shape[1], s * t.shape[2], u * t.shape[3]], [t.shape[0], t.shape[1], t.shape[2], t.shape[3]]));
	          }return a;
	        } };
	    });
	  }, e.gather = function (e, t, n) {
	    void 0 === n && (n = 0), assertArgumentsAreTensors({ x: e, indices: t }, "gather"), assert("int32" === t.dtype, "Indices must be of dtype `int32`"), n = parseAxisParam(n, e.shape)[0];return ENV.engine.runKernel(function (r) {
	      return r.gather(e, t, n);
	    }, { x: e }, function (r) {
	      return { x: function () {
	          if (0 === n) return SegmentOps.unsortedSegmentSum(r, t, e.shape[n]);var a = e.shape,
	              o = t.size,
	              i = a.slice(0, n),
	              s = i.length,
	              u = a.slice(n, a.length).slice(1),
	              l = u.length,
	              c = arrayRange(0, s),
	              d = arrayRange(s + 1, s + 1 + l),
	              p = arrayConcat([i, [o], u]),
	              h = r.reshape(p),
	              f = t.reshape([o]),
	              g = arrayConcat([[s], c, d]),
	              m = h.transpose(g),
	              v = SegmentOps.unsortedSegmentSum(m, f, e.shape[n]),
	              y = getUndoAxesPermutation(g);return v = v.transpose(y);
	        } };
	    });
	  }, e.pad1d = function (t, n, r) {
	    return void 0 === r && (r = 0), assert(2 === n.length, "Invalid number of paddings. Must be length of 2."), e.pad(t, [n], r);
	  }, e.pad2d = function (t, n, r) {
	    return void 0 === r && (r = 0), assert(2 === n.length && 2 === n[0].length && 2 === n[1].length, "Invalid number of paddings. Must be length of 2 each."), e.pad(t, n, r);
	  }, e.pad3d = function (t, n, r) {
	    return void 0 === r && (r = 0), assert(3 === n.length && 2 === n[0].length && 2 === n[1].length && 2 === n[2].length, "Invalid number of paddings. Must be length of 2 each."), e.pad(t, n, r);
	  }, e.pad4d = function (t, n, r) {
	    return void 0 === r && (r = 0), assert(4 === n.length && 2 === n[0].length && 2 === n[1].length && 2 === n[2].length && 2 === n[3].length, "Invalid number of paddings. Must be length of 2 each."), e.pad(t, n, r);
	  }, e.pad = function (e, t, n) {
	    if (void 0 === n && (n = 0), assertArgumentsAreTensors({ x: e }, "pad"), 0 === e.rank) throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");var r = t.map(function (e) {
	      return e[0];
	    });return ENV.engine.runKernel(function (r) {
	      return r.pad(e, t, n);
	    }, { x: e }, function (t) {
	      return { x: function () {
	          return t.slice(r, e.shape);
	        } };
	    });
	  }, e.stack = function (e, t) {
	    if (void 0 === t && (t = 0), assertArgumentsAreTensors({ tensors: e }, "stack"), assert(e.length >= 1, "Pass at least one tensor to tf.stack"), 1 === e.length) return e[0].expandDims(t);var n = e[0].rank,
	        r = e[0].shape,
	        a = e[0].dtype;assert(t <= n, "Axis must be <= rank of the tensor"), e.forEach(function (e) {
	      assertShapesMatch(r, e.shape, "All tensors passed to stack must have matching shapes");
	    }), e.forEach(function (e) {
	      assert(a === e.dtype, "All tensors passed to stack must have matching dtypes");
	    });var o = e.map(function (e) {
	      return e.expandDims(t);
	    });return ConcatOps.concat(o, t);
	  }, e.unstack = function (e, t) {
	    void 0 === t && (t = 0);for (var n, r = e.shape[t], a = Array(e.rank - 1).fill(0), o = 0, i = 0; i < e.rank; i++) i !== t && (a[o] = e.shape[i], o++);n = Array(r).fill(1);var s = Array(e.rank).fill(0),
	        u = e.shape.slice();return n.map(function (n) {
	      u[t] = n;var r = e.slice(s, u);return s[t] += n, r.reshape(a);
	    });
	  }, e.split = function (e, t, n) {
	    var r;void 0 === n && (n = 0), assertArgumentsAreTensors({ x: e }, "split"), n = parseAxisParam(n, e.shape)[0], "number" == typeof t ? (assert(e.shape[n] % t == 0, "Number of splits must evenly divide the axis."), r = Array(t).fill(e.shape[n] / t)) : (assert(e.shape[n] === t.reduce(function (e, t) {
	      return e + t;
	    }), "The sum of sizes must match the size of the axis dimension."), r = t);var a = Array(e.rank).fill(0),
	        o = e.shape.slice();return r.map(function (t) {
	      o[n] = t;var r = e.slice(a, o);return a[n] += t, r;
	    });
	  }, e.cumsum = function (e, t, n, r) {
	    void 0 === t && (t = 0), void 0 === n && (n = !1), void 0 === r && (r = !1), assertArgumentsAreTensors({ x: e }, "cumsum");var a = getAxesPermutation([t |= 0], e.rank),
	        o = e;null != a && (o = e.transpose(a));var i = getInnerMostAxes(1, e.rank)[0],
	        s = ENV.engine.runKernel(function (e) {
	      return e.cumsum(o, i, n, r);
	    }, { permutedX: o }, function (e) {
	      return { permutedX: function () {
	          return e.cumsum(t, n, !r);
	        } };
	    });return null != a && (s = s.transpose(a)), s;
	  }, e.expandDims = function (t, n) {
	    void 0 === n && (n = 0), assertArgumentsAreTensors({ x: t }, "expandDims"), assert(n <= t.rank, "Axis must be <= rank of the tensor");var r = t.shape.slice();return r.splice(n, 0, 1), e.reshape(t, r);
	  }, e.linspace = function (t, n, r) {
	    if (0 === r) throw new Error("Cannot request zero samples");var a = (n - t) / (r - 1),
	        o = makeZerosTypedArray(r, "float32");o[0] = t;for (var i = 1; i < o.length; i++) o[i] = o[i - 1] + a;return e.tensor1d(o, "float32");
	  }, e.range = function (t, n, r, a) {
	    if (void 0 === r && (r = 1), void 0 === a && (a = "float32"), 0 === r) throw new Error("Cannot have a step of zero");if (t === n || t < n && r < 0 || n < t && r > 1) return e.zeros([0], a);var o = makeZerosTypedArray(Math.abs(Math.ceil((n - t) / r)), a);n < t && 1 === r && (r = -1), o[0] = t;for (var i = 1; i < o.length; i++) o[i] = o[i - 1] + r;return e.tensor1d(o, a);
	  }, e.buffer = function (e, t, n) {
	    return void 0 === t && (t = "float32"), new TensorBuffer(e, t, n);
	  }, e.print = function (e, t) {
	    void 0 === t && (t = !1), console.log(tensorToString(e, t));
	  }, __decorate([doc({ heading: "Tensors", subheading: "Creation" })], e, "tensor", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" })], e, "scalar", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" })], e, "tensor1d", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" })], e, "tensor2d", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" })], e, "tensor3d", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" })], e, "tensor4d", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" })], e, "tensor5d", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" })], e, "tensor6d", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" }), operation], e, "ones", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" }), operation], e, "zeros", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" }), operation], e, "fill", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" }), operation], e, "onesLike", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" }), operation], e, "zerosLike", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" }), operation], e, "clone", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" }), operation], e, "eye", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" }), operation], e, "randomNormal", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" }), operation], e, "truncatedNormal", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" }), operation], e, "randomUniform", null), __decorate([operation], e, "rand", null), __decorate([operation], e, "multinomial", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" }), operation], e, "oneHot", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" }), operation], e, "fromPixels", null), __decorate([doc({ heading: "Visualization" })], e, "toPixels", null), __decorate([doc({ heading: "Tensors", subheading: "Transformations" }), operation], e, "reshape", null), __decorate([doc({ heading: "Tensors", subheading: "Transformations" })], e, "squeeze", null), __decorate([doc({ heading: "Tensors", subheading: "Transformations" }), operation], e, "cast", null), __decorate([doc({ heading: "Tensors", subheading: "Slicing and Joining" }), operation], e, "tile", null), __decorate([doc({ heading: "Tensors", subheading: "Slicing and Joining" }), operation], e, "gather", null), __decorate([doc({ heading: "Tensors", subheading: "Transformations" }), operation], e, "pad", null), __decorate([doc({ heading: "Tensors", subheading: "Slicing and Joining" }), operation], e, "stack", null), __decorate([doc({ heading: "Tensors", subheading: "Slicing and Joining" }), operation], e, "unstack", null), __decorate([doc({ heading: "Tensors", subheading: "Slicing and Joining" }), operation], e, "split", null), __decorate([doc({ heading: "Operations", subheading: "Scan" })], e, "cumsum", null), __decorate([doc({ heading: "Tensors", subheading: "Transformations" }), operation], e, "expandDims", null), __decorate([operation, doc({ heading: "Tensors", subheading: "Creation" })], e, "linspace", null), __decorate([operation, doc({ heading: "Tensors", subheading: "Creation" })], e, "range", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" })], e, "buffer", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" })], e, "print", null), e;
	}();function makeZerosTypedArray(e, t) {
	  if (null == t || "float32" === t) return new Float32Array(e);if ("int32" === t) return new Int32Array(e);if ("bool" === t) return new Uint8Array(e);throw new Error("Unknown data type $ {dtype}");
	}function makeOnesTypedArray(e, t) {
	  for (var n = makeZerosTypedArray(e, t), r = 0; r < n.length; r++) n[r] = 1;return n;
	}function toTypedArray(e, t) {
	  return noConversionNeeded(e, t) ? e : (Array.isArray(e) && (e = flatten(e)), copyTypedArray(e, t));
	}function noConversionNeeded(e, t) {
	  return e instanceof Float32Array && "float32" === t || e instanceof Int32Array && "int32" === t || e instanceof Uint8Array && "bool" === t;
	}function arrayRange(e, t) {
	  for (var n = [], r = e; r < t; ++r) n.push(r);return n;
	}function arrayConcat(e) {
	  for (var t = [], n = 0; n < e.length; ++n) for (var r = 0; r < e[n].length; ++r) t.push(e[n][r]);return t;
	}var BatchNormOps = function () {
	  function e() {}return e.batchNormalization2d = function (t, n, r, a, o, i) {
	    return void 0 === a && (a = .001), assert(2 === t.rank, "Error in batchNormalization3D: x must be rank 3 but got rank " + t.rank + "."), assert(2 === n.rank || 1 === n.rank, "Error in batchNormalization2D: mean must be rank 2 or rank 1 but got rank " + n.rank + "."), assert(2 === r.rank || 1 === r.rank, "Error in batchNormalization2D: variance must be rank 2 or rank 1 but got rank " + r.rank + "."), null != o && assert(2 === o.rank || 1 === o.rank, "Error in batchNormalization2D: scale must be rank 2 or rank 1 but got rank " + o.rank + "."), null != i && assert(2 === i.rank || 1 === i.rank, "Error in batchNormalization2D: offset must be rank 2 or rank 1 but got rank " + i.rank + "."), e.batchNormalization(t, n, r, a, o, i);
	  }, e.batchNormalization3d = function (t, n, r, a, o, i) {
	    return void 0 === a && (a = .001), assert(3 === t.rank, "Error in batchNormalization3D: x must be rank 3 but got rank " + t.rank + "."), assert(3 === n.rank || 1 === n.rank, "Error in batchNormalization3D: mean must be rank 3 or rank 1 but got rank " + n.rank + "."), assert(3 === r.rank || 1 === r.rank, "Error in batchNormalization3D: variance must be rank 3 or rank 1 but got rank " + r.rank + "."), null != o && assert(3 === o.rank || 1 === o.rank, "Error in batchNormalization3D: scale must be rank 3 or rank 1 but got rank " + o.rank + "."), null != i && assert(3 === i.rank || 1 === i.rank, "Error in batchNormalization3D: offset must be rank 3 or rank 1 but got rank " + i.rank + "."), e.batchNormalization(t, n, r, a, o, i);
	  }, e.batchNormalization4d = function (t, n, r, a, o, i) {
	    return void 0 === a && (a = .001), assert(4 === t.rank, "Error in batchNormalization4D: x must be rank 4 but got rank " + t.rank + "."), assert(4 === n.rank || 1 === n.rank, "Error in batchNormalization4D: mean must be rank 4 or rank 1 but got rank " + n.rank + "."), assert(4 === r.rank || 1 === r.rank, "Error in batchNormalization4D: variance must be rank 4 or rank 1 but got rank " + r.rank + "."), null != o && assert(4 === o.rank || 1 === o.rank, "Error in batchNormalization4D: scale must be rank 4 or rank 1 but got rank " + o.rank + "."), null != i && assert(4 === i.rank || 1 === i.rank, "Error in batchNormalization4D: offset must be rank 4 or rank 1 but got rank " + i.rank + "."), e.batchNormalization(t, n, r, a, o, i);
	  }, e.batchNormalization = function (e, t, n, r, a, o) {
	    var i;void 0 === r && (r = .001), assertArgumentsAreTensors({ x: e, mean: t, variance: n }, "batchNormalization"), null != a && assertArgumentsAreTensors({ scale: a }, "batchNormalization"), null != o && assertArgumentsAreTensors({ offset: o }, "batchNormalization"), assert(t.rank === n.rank, "Batch normalization gradient requires mean and variance to have equal ranks."), assert(null == o || t.rank === o.rank, "Batch normalization gradient requires mean and offset to have equal ranks."), assert(null == a || t.rank === a.rank, "Batch normalization gradient requires mean and scale to have equal ranks."), i = 0 === e.rank || 1 === e.rank ? e.as4D(1, 1, 1, e.size) : 2 === e.rank ? e.as4D(1, 1, e.shape[0], e.shape[1]) : 3 === e.rank ? e.as4D(1, e.shape[0], e.shape[1], e.shape[2]) : e;return ENV.engine.runKernel(function (e) {
	      return e.batchNormalization(i, batchnormReshape4D(t), batchnormReshape4D(n), r, batchnormReshape4D(a), batchnormReshape4D(o));
	    }, { x: e, mean: t, variance: n, scale: a, offset: o }, function (o) {
	      var s = null == a ? ArrayOps.scalar(1) : a,
	          u = getReductionAxes(t.shape, i.shape),
	          l = [];if (1 === t.rank) {
	        for (var c = 0; c < i.shape.length - 1; ++c) l.push(i.shape[c]);l.push(1);
	      }var d = e.sub(t),
	          p = o.mul(s),
	          h = rsqrt(n.add(ArrayOps.scalar(r))),
	          f = h.mul(h).mul(h).mul(ArrayOps.scalar(-.5));return { x: function () {
	          return 1 === t.rank ? o.mul(ArrayOps.tile(h.as4D(1, 1, 1, t.shape[0]), l)).mul(s).reshape(e.shape) : o.mul(h).mul(s).reshape(e.shape);
	        }, mean: function () {
	          var e = h.mul(ArrayOps.scalar(-1)).mul(p);return 1 === t.rank && (e = e.sum(u)), e.reshape(t.shape);
	        }, variance: function () {
	          var e = f.mul(d).mul(p);return 1 === t.rank && (e = e.sum(u)), e.reshape(t.shape);
	        }, scale: function () {
	          var e = d.mul(h),
	              n = o.mul(e);return 1 === t.rank && (n = n.sum(u)), n.reshape(t.shape);
	        }, offset: function () {
	          var e = o;return 1 === t.rank && (e = e.sum(u)), e.reshape(t.shape);
	        } };
	    }).reshape(e.shape);
	  }, __decorate([operation], e, "batchNormalization2d", null), __decorate([operation], e, "batchNormalization3d", null), __decorate([operation], e, "batchNormalization4d", null), __decorate([doc({ heading: "Operations", subheading: "Normalization" })], e, "batchNormalization", null), e;
	}();function batchnormReshape4D(e) {
	  return null == e ? null : 0 === e.rank ? e.as1D() : 1 === e.rank ? e : 2 === e.rank ? e.as4D(1, 1, e.shape[0], e.shape[1]) : 3 === e.rank ? e.as4D(1, e.shape[0], e.shape[1], e.shape[2]) : e;
	}function computePool2DInfo(e, t, n, r, a, o) {
	  void 0 === o && (o = "channelsLast");var i,
	      s = parseTupleParam(t),
	      u = s[0],
	      l = s[1];if ("channelsLast" === o) i = [u, l, e[3], e[3]];else {
	    if ("channelsFirst" !== o) throw new Error("Unknown dataFormat " + o);i = [u, l, e[1], e[1]];
	  }return computeConv2DInfo(e, i, n, 1, r, a, !1, o);
	}function computeConv2DInfo(e, t, n, r, a, o, i, s) {
	  void 0 === i && (i = !1), void 0 === s && (s = "channelsLast");var u = [-1, -1, -1, -1],
	      l = u[0],
	      c = u[1],
	      d = u[2],
	      p = u[3];if ("channelsLast" === s) l = e[0], c = e[1], d = e[2], p = e[3];else {
	    if ("channelsFirst" !== s) throw new Error("Unknown dataFormat " + s);l = e[0], p = e[1], c = e[2], d = e[3];
	  }var h,
	      f = t[0],
	      g = t[1],
	      m = t[3],
	      v = parseTupleParam(n),
	      y = v[0],
	      x = v[1],
	      b = parseTupleParam(r),
	      E = b[0],
	      S = b[1],
	      A = getPadAndOutInfo(a, c, d, y, x, getEffectiveFilterSize(f, E), getEffectiveFilterSize(g, S), o),
	      T = A.padInfo,
	      w = A.outHeight,
	      _ = A.outWidth,
	      R = i ? m * p : m;return "channelsFirst" === s ? h = [l, R, w, _] : "channelsLast" === s && (h = [l, w, _, R]), { batchSize: l, dataFormat: s, inHeight: c, inWidth: d, inChannels: p, outHeight: w, outWidth: _, outChannels: R, padInfo: T, strideHeight: y, strideWidth: x, filterHeight: f, filterWidth: g, dilationHeight: E, dilationWidth: S, inShape: e, outShape: h, filterShape: t };
	}function computeOutputShape3D(e, t, n, r, a, o) {
	  null == a && (a = computeDefaultPad(e, t, r));var i = e[0],
	      s = e[1],
	      u = conditionalRound((i - t + 2 * a) / r + 1, o);assert(isInt(u), "The output # of rows (" + u + ") must be an integer. Change the stride and/or zero pad parameters");var l = conditionalRound((s - t + 2 * a) / r + 1, o);return assert(isInt(l), "The output # of columns (" + l + ") must be an integer. Change the stride and/or zero pad parameters"), [u, l, n];
	}function computeDefaultPad(e, t, n, r) {
	  void 0 === r && (r = 1);var a = getEffectiveFilterSize(t, r);return Math.floor((e[0] * (n - 1) - n + a) / 2);
	}function parseTupleParam(e) {
	  return "number" == typeof e ? [e, e] : e;
	}function getEffectiveFilterSize(e, t) {
	  return t <= 1 ? e : e + (e - 1) * (t - 1);
	}function getPadAndOutInfo(e, t, n, r, a, o, i, s) {
	  var u, l, c;if ("number" == typeof e) {
	    u = { top: e, bottom: e, left: e, right: e, type: 0 === e ? "VALID" : "NUMBER" };var d = computeOutputShape3D([t, n, 1], o, 1, r, e, s);l = d[0], c = d[1];
	  } else if ("same" === e) {
	    var p = ((l = Math.ceil(t / r)) - 1) * r + o - t,
	        h = ((c = Math.ceil(n / a)) - 1) * a + i - n,
	        f = Math.floor(p / 2),
	        g = p - f,
	        m = Math.floor(h / 2);u = { top: f, bottom: g, left: m, right: h - m, type: "SAME" };
	  } else {
	    if ("valid" !== e) throw Error("Unknown padding parameter: " + e);u = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }, l = Math.ceil((t - o + 1) / r), c = Math.ceil((n - i + 1) / a);
	  }return { padInfo: u, outHeight: l, outWidth: c };
	}function conditionalRound(e, t) {
	  if (!t) return e;switch (t) {case "round":
	      return Math.round(e);case "ceil":
	      return Math.ceil(e);case "floor":
	      return Math.floor(e);default:
	      throw new Error("Unknown roundingMode " + t);}
	}var ConvOps = function () {
	  function e() {}return e.conv1d = function (t, n, r, a, o, i, s) {
	    void 0 === o && (o = "NWC"), void 0 === i && (i = 1), assertArgumentsAreTensors({ x: t, filter: n }, "conv1d");var u = t,
	        l = !1;2 === t.rank && (l = !0, u = t.as3D(1, t.shape[0], t.shape[1])), assert(3 === u.rank, "Error in conv1d: input must be rank 3, but got rank " + u.rank + "."), assert(3 === n.rank, "Error in conv1d: filter must be rank 3, but got rank " + n.rank + "."), null != s && assert(isInt(a), "Error in conv1d: pad must be an integer when using, dimRoundingMode " + s + " but got pad " + a + "."), assert(u.shape[2] === n.shape[1], "Error in conv1d: depth of input (" + u.shape[2] + ") must match input depth for filter " + n.shape[1] + "."), assert(eitherStridesOrDilationsAreOne(r, i), "Error in conv1D: Either stride or dilation must be 1. Got stride " + r + " and dilation '" + i + "'"), assert("NWC" === o, "Error in conv1d: got dataFormat of " + o + " but only NWC is currently supported.");var c = n.as4D(1, n.shape[0], n.shape[1], n.shape[2]),
	        d = u.as4D(u.shape[0], 1, u.shape[1], u.shape[2]),
	        p = [1, r],
	        h = [1, i],
	        f = e.conv2d(d, c, p, a, "NHWC", h, s);return l ? f.as2D(f.shape[2], f.shape[3]) : f.as3D(f.shape[0], f.shape[2], f.shape[3]);
	  }, e.conv2d = function (t, n, r, a, o, i, s) {
	    void 0 === o && (o = "NHWC"), void 0 === i && (i = [1, 1]), assertArgumentsAreTensors({ x: t, filter: n }, "conv2d");var u = t,
	        l = !1;3 === t.rank && (l = !0, u = t.as4D(1, t.shape[0], t.shape[1], t.shape[2])), assert(4 === u.rank, "Error in conv2d: input must be rank 4, but got rank " + u.rank + "."), assert(4 === n.rank, "Error in conv2d: filter must be rank 4, but got rank " + n.rank + "."), null != s && assert(isInt(a), "Error in conv2d: pad must be an integer when using, dimRoundingMode " + s + " but got pad " + a + "."), assert(u.shape[3] === n.shape[2], "Error in conv2d: depth of input (" + u.shape[3] + ") must match input depth for filter " + n.shape[2] + "."), assert(eitherStridesOrDilationsAreOne(r, i), "Error in conv2D: Either strides or dilations must be 1. Got strides " + r + " and dilations '" + i + "'"), assert("NHWC" === o, "Error in conv2d: got dataFormat of " + o + " but only NHWC is currently supported.");var c = computeConv2DInfo(u.shape, n.shape, r, i, a, s),
	        d = ENV.engine.runKernel(function (e) {
	      return e.conv2d(u, n, c);
	    }, { x: u, filter: n }, function (t) {
	      return assert(tupleValuesAreOne(i), "Error in gradient of conv2D: dilation rates greater than 1 are notyet supported in gradients. Got dilations '" + i + "'"), { x: function () {
	          return e.conv2dDerInput(u.shape, t, n, r, a);
	        }, filter: function () {
	          return e.conv2dDerFilter(u, t, n.shape, r, a);
	        } };
	    });return l ? d.as3D(d.shape[1], d.shape[2], d.shape[3]) : d;
	  }, e.conv2dDerInput = function (e, t, n, r, a, o) {
	    assertArgumentsAreTensors({ dy: t, filter: n }, "conv2dDerInput"), assert(e.length === t.rank, "Length of inShape (" + e.length + ") and rank of dy (" + t.rank + ") must match");var i = e,
	        s = t,
	        u = !1;3 === t.rank && (u = !0, s = t.as4D(1, t.shape[0], t.shape[1], t.shape[2]), i = [1, e[0], e[1], e[2]]);var l = i[3],
	        c = s.shape[3];assert(4 === i.length, "Error in conv2dDerInput: inShape must be length 4, but got length " + i.length + "."), assert(4 === s.rank, "Error in conv2dDerInput: dy must be rank 4, but got rank " + s.rank), assert(4 === n.rank, "Error in conv2dDerInput: filter must be rank 4, but got rank " + n.rank), assert(l === n.shape[2], "Error in conv2dDerInput: depth of input (" + l + ") must match input depth for filter " + n.shape[2] + "."), assert(c === n.shape[3], "Error in conv2dDerInput: depth of output (" + c + ") must match output depth for filter " + n.shape[3] + "."), null != o && assert(isInt(a), "Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode " + o + " but got pad " + a + ".");var d = computeConv2DInfo(i, n.shape, r, 1, a, o),
	        p = ENV.engine.runKernel(function (e) {
	      return e.conv2dDerInput(s, n, d);
	    }, { dy4D: s });return u ? p.as3D(p.shape[1], p.shape[2], p.shape[3]) : p;
	  }, e.conv2dDerFilter = function (e, t, n, r, a, o) {
	    assertArgumentsAreTensors({ x: e, dy: t }, "conv2dDerFilter");var i = e;3 === e.rank && (i = e.as4D(1, e.shape[0], e.shape[1], e.shape[2]));var s = t;3 === s.rank && (s = t.as4D(1, t.shape[0], t.shape[1], t.shape[2])), assert(4 === i.rank, "Error in conv2dDerFilter: input must be rank 4, but got shape " + i.shape + "."), assert(4 === s.rank, "Error in conv2dDerFilter: dy must be rank 4, but got shape " + s.shape + "."), assert(4 === n.length, "Error in conv2dDerFilter: filterShape must be length 4, but got " + n + "."), assert(i.shape[3] === n[2], "Error in conv2dDerFilter: depth of input " + i.shape[3] + ") must match input depth in filter (" + n[2] + "."), assert(s.shape[3] === n[3], "Error in conv2dDerFilter: depth of dy (" + s.shape[3] + ") must match output depth for filter (" + n[3] + ")."), null != o && assert(isInt(a), "Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode " + o + " but got pad " + a + ".");var u = computeConv2DInfo(i.shape, n, r, 1, a, o);return ENV.engine.runKernel(function (e) {
	      return e.conv2dDerFilter(i, s, u);
	    }, { x4D: i, dy4D: s });
	  }, e.conv2dTranspose = function (t, n, r, a, o, i) {
	    return assertArgumentsAreTensors({ x: t, filter: n }, "conv2dTranspose"), e.conv2dDerInput(r, t, n, a, o, i);
	  }, e.depthwiseConv2d = function (e, t, n, r, a, o, i) {
	    void 0 === a && (a = "NHWC"), void 0 === o && (o = [1, 1]), assertArgumentsAreTensors({ x: e, filter: t }, "depthwiseConv2d");var s = e,
	        u = !1;3 === e.rank && (u = !0, s = e.as4D(1, e.shape[0], e.shape[1], e.shape[2])), assert(4 === s.rank, "Error in depthwiseConv2d: input must be rank 4, but got rank " + s.rank + "."), assert(4 === t.rank, "Error in depthwiseConv2d: filter must be rank 4, but got rank " + t.rank + "."), assert(s.shape[3] === t.shape[2], "Error in depthwiseConv2d: number of input channels (" + s.shape[3] + ") must match the inChannels dimension in filter " + t.shape[2] + "."), null == o && (o = [1, 1]), assert(eitherStridesOrDilationsAreOne(n, o), "Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides " + n + " and dilations '" + o + "'"), null != i && assert(isInt(r), "Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode " + i + " but got pad " + r + ".");var l = computeConv2DInfo(s.shape, t.shape, n, o, r, i, !0),
	        c = ENV.engine.runKernel(function (e) {
	      return e.depthwiseConv2D(s, t, l);
	    }, { x: s, filter: t }, function (e) {
	      return assert(tupleValuesAreOne(o), "Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '" + o + "'"), { x: function () {
	          return depthwiseConv2dDerInput(s.shape, e, t, l);
	        }, filter: function () {
	          return depthwiseConv2dDerFilter(s, e, t.shape, l);
	        } };
	    });return u ? c.as3D(c.shape[1], c.shape[2], c.shape[3]) : c;
	  }, e.separableConv2d = function (t, n, r, a, o, i, s) {
	    void 0 === i && (i = [1, 1]), void 0 === s && (s = "NHWC"), assertArgumentsAreTensors({ x: t, depthwiseFilter: n, pointwiseFilter: r }, "separableConv2d");var u = t,
	        l = !1;if (3 === t.rank && (l = !0, u = t.as4D(1, t.shape[0], t.shape[1], t.shape[2])), "NCHW" === s) throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");assert(4 === u.rank, "Error in separableConv2d: input must be rank 4, but got rank " + u.rank + "."), assert(4 === n.rank, "Error in separableConv2d: depthwise filter must be rank 4, but got rank " + n.rank + "."), assert(4 === r.rank, "Error in separableConv2d: pointwise filter must be rank 4, but got rank " + n.rank + "."), assert(1 === r.shape[0], "Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got " + r.shape[0] + "."), assert(1 === r.shape[1], "Error in separableConv2d: the second dimension of pointwise filter  must be 1, but got " + r.shape[1] + ".");var c = n.shape[2],
	        d = n.shape[3];assert(r.shape[2] === c * d, "Error in separableConv2d: the third dimension of pointwise filter must be " + c * d + ", but got " + r.shape[2] + ".");var p = e.depthwiseConv2d(u, n, a, o, s, i),
	        h = e.conv2d(p, r, 1, "valid", s);return l ? h.as3D(h.shape[1], h.shape[2], h.shape[3]) : h;
	  }, __decorate([doc({ heading: "Operations", subheading: "Convolution" }), operation], e, "conv1d", null), __decorate([doc({ heading: "Operations", subheading: "Convolution" }), operation], e, "conv2d", null), __decorate([operation], e, "conv2dDerInput", null), __decorate([operation], e, "conv2dDerFilter", null), __decorate([doc({ heading: "Operations", subheading: "Convolution" }), operation], e, "conv2dTranspose", null), __decorate([doc({ heading: "Operations", subheading: "Convolution" }), operation], e, "depthwiseConv2d", null), __decorate([doc({ heading: "Operations", subheading: "Convolution" }), operation], e, "separableConv2d", null), e;
	}();function parseTupleParam$1(e) {
	  return "number" == typeof e ? [e, e] : e;
	}function tupleValuesAreOne(e) {
	  var t = parseTupleParam$1(e),
	      n = t[0],
	      r = t[1];return 1 === n && 1 === r;
	}function eitherStridesOrDilationsAreOne(e, t) {
	  return tupleValuesAreOne(e) || tupleValuesAreOne(t);
	}function depthwiseConv2dDerInput(e, t, n, r) {
	  var a = t,
	      o = !1;3 === t.rank && (o = !0, a = t.as4D(1, t.shape[0], t.shape[1], t.shape[2]));var i = ENV.engine.runKernel(function (e) {
	    return e.depthwiseConv2DDerInput(a, n, r);
	  }, { dy4D: a });return o ? i.as3D(i.shape[1], i.shape[2], i.shape[3]) : i;
	}function depthwiseConv2dDerFilter(e, t, n, r) {
	  var a = e;3 === e.rank && (a = e.as4D(1, e.shape[0], e.shape[1], e.shape[2]));var o = t;return 3 === o.rank && (o = t.as4D(1, t.shape[0], t.shape[1], t.shape[2])), ENV.engine.runKernel(function (e) {
	    return e.depthwiseConv2DDerFilter(a, o, r);
	  }, { x4D: a, dy4D: o });
	}var ImageOps = function () {
	  function e() {}return e.resizeBilinear = function (e, t, n) {
	    void 0 === n && (n = !1), assertArgumentsAreTensors({ images: e }, "resizeBilinear"), assert(3 === e.rank || 4 === e.rank, "Error in resizeBilinear: x must be rank 3 or 4, but got rank " + e.rank + "."), assert(2 === t.length, "Error in resizeBilinear: new shape must 2D, but got shape " + t + ".");var r = e,
	        a = !1;3 === e.rank && (a = !0, r = e.as4D(1, e.shape[0], e.shape[1], e.shape[2]));var o = t[0],
	        i = t[1],
	        s = ENV.engine.runKernel(function (e, t) {
	      return e.resizeBilinear(r, o, i, n);
	    }, { batchImages: r }, function (e, t) {
	      return { batchImages: function () {
	          return ENV.engine.runKernel(function (t) {
	            return t.resizeBilinearBackprop(e, r, n);
	          }, {});
	        } };
	    });return a ? s.as3D(s.shape[1], s.shape[2], s.shape[3]) : s;
	  }, e.resizeNearestNeighbor = function (e, t, n) {
	    void 0 === n && (n = !1), assertArgumentsAreTensors({ images: e }, "resizeNearestNeighbor"), assert(3 === e.rank || 4 === e.rank, "Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank " + e.rank + "."), assert(2 === t.length, "Error in resizeNearestNeighbor: new shape must 2D, but got shape " + t + "."), assert("float32" === e.dtype || "int32" === e.dtype, "`images` must have `int32` or `float32` as dtype");var r = e,
	        a = !1;3 === e.rank && (a = !0, r = e.as4D(1, e.shape[0], e.shape[1], e.shape[2]));var o = t[0],
	        i = t[1],
	        s = ENV.engine.runKernel(function (e) {
	      return e.resizeNearestNeighbor(r, o, i, n);
	    }, { batchImages: r });return a ? s.as3D(s.shape[1], s.shape[2], s.shape[3]) : s;
	  }, __decorate([doc({ heading: "Operations", subheading: "Images", namespace: "image" }), operation], e, "resizeBilinear", null), __decorate([doc({ heading: "Operations", subheading: "Images", namespace: "image" }), operation], e, "resizeNearestNeighbor", null), e;
	}(),
	    Tracking = function () {
	  function e() {}return e.tidy = function (e, t, n) {
	    void 0 === n && (n = !1);var r = null;if (null == t) {
	      if ("function" != typeof e) throw new Error("Please provide a function to tidy()");t = e;
	    } else {
	      if ("string" != typeof e && !(e instanceof String)) throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if ("function" != typeof t) throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r = e;
	    }ENV.engine.startScope(r, n);var a = t();return a instanceof Promise && console.error("Cannot return a Promise inside of tidy."), ENV.engine.endScope(a, n), a;
	  }, e.dispose = function (e) {
	    getTensorsInContainer(e).forEach(function (e) {
	      return e.dispose();
	    });
	  }, e.keep = function (e) {
	    return ENV.engine.keep(e);
	  }, e.time = function (e) {
	    return ENV.engine.time(e);
	  }, __decorate([doc({ heading: "Performance", subheading: "Memory" })], e, "tidy", null), __decorate([doc({ heading: "Performance", subheading: "Memory" })], e, "dispose", null), __decorate([doc({ heading: "Performance", subheading: "Memory" })], e, "keep", null), __decorate([doc({ heading: "Performance", subheading: "Timing" })], e, "time", null), e;
	}(),
	    LinalgOps = function () {
	  function e() {}return e.gramSchmidt = function (e) {
	    var t;if (Array.isArray(e)) {
	      t = !1, assert(null != e && e.length > 0, "Gram-Schmidt process: input must not be null, undefined, or empty");for (var n = e[0].shape[0], r = 1; r < e.length; ++r) assert(e[r].shape[0] === n, "Gram-Schmidt: Non-unique lengths found in the input vectors: (" + e[r].shape[0] + " vs. " + n + ")");
	    } else t = !0, e = split(e, e.shape[0], 0).map(function (e) {
	      return squeeze(e, [0]);
	    });assert(e.length <= e[0].shape[0], "Gram-Schmidt: Number of vectors (" + e.length + ") exceeds number of dimensions (" + e[0].shape[0] + ").");var a = [],
	        o = e,
	        i = function (e) {
	      a.push(Tracking.tidy(function () {
	        var t = o[e];if (e > 0) for (var n = 0; n < e; ++n) {
	          var r = sum(a[n].mulStrict(t)).mul(a[n]);t = t.sub(r);
	        }return t.div(norm(t, "euclidean"));
	      }));
	    };for (r = 0; r < e.length; ++r) i(r);return t ? stack(a, 0) : a;
	  }, __decorate([doc({ heading: "Operations", subheading: "Linear Algebra" }), operation], e, "gramSchmidt", null), e;
	}();!function (e) {
	  e[e.NONE = 0] = "NONE", e[e.MEAN = 1] = "MEAN", e[e.SUM = 2] = "SUM", e[e.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS";
	}(exports.Reduction || (exports.Reduction = {}));var LossOps = function () {
	  function e() {}return e.computeWeightedLoss = function (e, t, n) {
	    void 0 === n && (n = exports.Reduction.SUM_BY_NONZERO_WEIGHTS), assertArgumentsAreTensors({ losses: e }, "computeWeightedLoss"), null != t && assertArgumentsAreTensors({ weights: t }, "computeWeightedLoss");var r = null == t ? e : e.mul(t);if (n === exports.Reduction.NONE) return r;if (n === exports.Reduction.SUM) return r.sum();if (n === exports.Reduction.MEAN) return null == t ? r.mean() : r.sum().div(t.sum());if (n === exports.Reduction.SUM_BY_NONZERO_WEIGHTS) {
	      if (null == t) return r.sum().div(scalar(e.size));var a = t.notEqual(scalar(0)).sum().toFloat();return r.sum().div(a);
	    }throw Error("Unknown reduction: " + n);
	  }, e.absoluteDifference = function (t, n, r, a) {
	    void 0 === a && (a = exports.Reduction.SUM_BY_NONZERO_WEIGHTS), assertArgumentsAreTensors({ labels: t, predictions: n }, "absoluteDifference"), null != r && assertArgumentsAreTensors({ weights: r }, "absoluteDifference"), assertShapesMatch(t.shape, n.shape, "Error in absoluteDifference: ");var o = t.sub(n).abs();return e.computeWeightedLoss(o, r, a);
	  }, e.meanSquaredError = function (t, n, r, a) {
	    void 0 === a && (a = exports.Reduction.SUM_BY_NONZERO_WEIGHTS), assertArgumentsAreTensors({ labels: t, predictions: n }, "meanSquaredError"), null != r && assertArgumentsAreTensors({ weights: r }, "meanSquaredError"), assertShapesMatch(t.shape, n.shape, "Error in meanSquaredError: ");var o = t.squaredDifference(n);return e.computeWeightedLoss(o, r, a);
	  }, e.cosineDistance = function (t, n, r, a, o) {
	    void 0 === o && (o = exports.Reduction.SUM_BY_NONZERO_WEIGHTS), assertArgumentsAreTensors({ labels: t, predictions: n }, "cosineDistance"), null != a && assertArgumentsAreTensors({ weights: a }, "cosineDistance"), assertShapesMatch(t.shape, n.shape, "Error in cosineDistance: ");var i = scalar(1).sub(t.mul(n).sum(r, !0));return e.computeWeightedLoss(i, a, o);
	  }, e.hingeLoss = function (t, n, r, a) {
	    void 0 === a && (a = exports.Reduction.SUM_BY_NONZERO_WEIGHTS), assertArgumentsAreTensors({ labels: t, predictions: n }, "hingeLoss"), null != r && assertArgumentsAreTensors({ weights: r }, "hingeLoss"), assertShapesMatch(t.shape, n.shape, "Error in hingeLoss: ");var o = scalar(1);t = scalar(2).mul(t).sub(o);var i = o.sub(t.mul(n)).relu();return e.computeWeightedLoss(i, r, a);
	  }, e.logLoss = function (t, n, r, a, o) {
	    void 0 === a && (a = 1e-7), void 0 === o && (o = exports.Reduction.SUM_BY_NONZERO_WEIGHTS), assertArgumentsAreTensors({ labels: t, predictions: n }, "logLoss"), null != r && assertArgumentsAreTensors({ weights: r }, "logLoss"), assertShapesMatch(t.shape, n.shape, "Error in logLoss: ");var i = scalar(1),
	        s = scalar(a),
	        u = t.mul(n.add(s).log()).neg().sub(i.sub(t).mul(i.sub(n).add(s).log()));return e.computeWeightedLoss(u, r, o);
	  }, e.huberLoss = function (t, n, r, a, o) {
	    void 0 === a && (a = 1), void 0 === o && (o = exports.Reduction.SUM_BY_NONZERO_WEIGHTS), assertArgumentsAreTensors({ labels: t, predictions: n }, "huberLoss"), null != r && assertArgumentsAreTensors({ weights: r }, "huberLoss"), assertShapesMatch(t.shape, n.shape, "Error in huberLoss: ");var i = scalar(a),
	        s = n.sub(t).abs(),
	        u = minimum(s, i),
	        l = s.sub(u),
	        c = scalar(.5).mul(u.square()).add(i.mul(l));return e.computeWeightedLoss(c, r, o);
	  }, __decorate([doc({ heading: "Training", subheading: "Losses", namespace: "losses" }), operation], e, "computeWeightedLoss", null), __decorate([doc({ heading: "Training", subheading: "Losses", namespace: "losses" }), operation], e, "absoluteDifference", null), __decorate([doc({ heading: "Training", subheading: "Losses", namespace: "losses" }), operation], e, "meanSquaredError", null), __decorate([doc({ heading: "Training", subheading: "Losses", namespace: "losses" }), operation], e, "cosineDistance", null), __decorate([doc({ heading: "Training", subheading: "Losses", namespace: "losses" }), operation], e, "hingeLoss", null), __decorate([doc({ heading: "Training", subheading: "Losses", namespace: "losses" }), operation], e, "logLoss", null), __decorate([doc({ heading: "Training", subheading: "Losses", namespace: "losses" }), operation], e, "huberLoss", null), e;
	}(),
	    LRNOps = function () {
	  function e() {}return e.localResponseNormalization = function (e, t, n, r, a) {
	    void 0 === t && (t = 5), void 0 === n && (n = 1), void 0 === r && (r = 1), void 0 === a && (a = .5), assertArgumentsAreTensors({ x: e }, "localResponseNormalization"), assert(4 === e.rank || 3 === e.rank, "Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank " + e.rank + "."), assert(isInt(t), "Error in localResponseNormalization: depthRadius must be an integer\n                     but got depthRadius " + t + ".");var o = e,
	        i = !1;3 === e.rank && (i = !0, o = e.as4D(1, e.shape[0], e.shape[1], e.shape[2]));var s = ENV.engine.runKernel(function (e) {
	      return e.localResponseNormalization4D(o, t, n, r, a);
	    }, { x4D: o });return i ? s.as3D(s.shape[1], s.shape[2], s.shape[3]) : s;
	  }, __decorate([doc({ heading: "Operations", subheading: "Normalization" }), operation], e, "localResponseNormalization", null), e;
	}(),
	    LSTMOps = function () {
	  function e() {}return e.multiRNNCell = function (e, t, n, r) {
	    assertArgumentsAreTensors({ data: t, c: n, h: r }, "multiRNNCell");for (var a = t, o = [], i = 0; i < e.length; i++) {
	      var s = e[i](a, n[i], r[i]);o.push(s[0]), o.push(s[1]), a = s[1];
	    }var u = [],
	        l = [];for (i = 0; i < o.length; i += 2) u.push(o[i]), l.push(o[i + 1]);return [u, l];
	  }, e.basicLSTMCell = function (e, t, n, r, a, o) {
	    assertArgumentsAreTensors({ forgetBias: e, lstmKernel: t, lstmBias: n, data: r, c: a, h: o }, "basicLSTMCell");var i = r.concat(o, 1).matMul(t).add(n),
	        s = i.shape[0],
	        u = i.shape[1] / 4,
	        l = [s, u],
	        c = i.slice([0, 0], l),
	        d = i.slice([0, u], l),
	        p = i.slice([0, 2 * u], l),
	        h = i.slice([0, 3 * u], l),
	        f = c.sigmoid().mulStrict(d.tanh()).addStrict(a.mulStrict(e.add(p).sigmoid()));return [f, f.tanh().mulStrict(h.sigmoid())];
	  }, __decorate([doc({ heading: "Operations", subheading: "RNN" }), operation], e, "multiRNNCell", null), __decorate([doc({ heading: "Operations", subheading: "RNN" }), operation], e, "basicLSTMCell", null), e;
	}(),
	    MatmulOps = function () {
	  function e() {}return e.matMul = function (e, t, n, r) {
	    void 0 === n && (n = !1), void 0 === r && (r = !1), assertArgumentsAreTensors({ a: e, b: t }, "matMul");var a = n ? e.shape[0] : e.shape[1],
	        o = r ? t.shape[1] : t.shape[0];assert(2 === e.rank && 2 === t.rank, "Error in matMul: inputs must be rank 2, got ranks " + e.rank + " and " + t.rank + "."), assert(a === o, "Error in matMul: inner shapes (" + a + ") and (" + o + ") of Tensors with shapes " + e.shape + " and " + t.shape + " and transposeA=" + n + " and transposeB=" + r + " must match.");return ENV.engine.runKernel(function (a) {
	      return a.matMul(e, t, n, r);
	    }, { a: e, b: t }, function (a) {
	      return n || r ? !n && r ? { a: function () {
	          return a.matMul(t.toFloat(), !1, !1);
	        }, b: function () {
	          return a.matMul(e.toFloat(), !0, !1);
	        } } : n && !r ? { a: function () {
	          return t.toFloat().matMul(a, !1, !0);
	        }, b: function () {
	          return e.toFloat().matMul(a, !1, !1);
	        } } : { a: function () {
	          return t.toFloat().matMul(a, !0, !0);
	        }, b: function () {
	          return a.matMul(e.toFloat(), !0, !0);
	        } } : { a: function () {
	          return a.matMul(t.toFloat(), !1, !0);
	        }, b: function () {
	          return e.toFloat().matMul(a, !0, !1);
	        } };
	    });
	  }, e.vectorTimesMatrix = function (e, t) {
	    return assert(1 === e.rank, "Error in vectorTimesMatrix: first input must be rank 1, but got rank " + e.rank + "."), assert(2 === t.rank, "Error in vectorTimesMatrix: second input must be rank 2, but got rank " + t.rank + "."), assert(e.size === t.shape[0], "Error in vectorTimesMatrix: size of vector (" + e.size + ") must match first dimension of matrix (" + t.shape[0] + ")"), e.as2D(1, -1).matMul(t).as1D();
	  }, e.matrixTimesVector = function (e, t) {
	    return assert(1 === t.rank, "Error in matrixTimesVector: second input must rank 1, but got rank " + t.rank + "."), assert(2 === e.rank, "Error in matrixTimesVector: first input must be a rank 2, but got rank " + e.rank + "."), assert(t.size === e.shape[1], "Error in matrixTimesVector: size of first rank 1 input " + t.size + " must match inner dimension of second rank 2 input, but got shape " + e.shape + "."), e.matMul(t.as2D(-1, 1)).as1D();
	  }, e.dotProduct = function (e, t) {
	    return assert(1 === e.rank && 1 === t.rank, "Error in dotProduct: inputs must be rank 1, but got ranks " + e.rank + " and " + t.rank + "."), assert(e.size === t.size, "Error in dotProduct: size of inputs (" + e.size + ") and (" + t.size + ") must match."), e.as2D(1, -1).matMul(t.as2D(-1, 1)).asScalar();
	  }, e.outerProduct = function (e, t) {
	    return assert(1 === e.rank && 1 === t.rank, "Error in outerProduct: inputs must be rank 1, but got ranks " + e.rank + " and " + t.rank + "."), e.as2D(-1, 1).matMul(t.as2D(1, -1));
	  }, e.dot = function (e, t) {
	    assert(!(1 !== e.rank && 2 !== e.rank || 1 !== t.rank && 2 !== t.rank), "Error in dot: inputs must all be rank 1 or 2, but got ranks " + e.rank + " and " + t.rank + ".");var n = 1 === e.rank ? e.size : e.shape[1],
	        r = 1 === t.rank ? t.size : t.shape[0];return assert(n === r, "Error in dot: inner dimensions of inputs must match, but got " + n + " and " + r + "."), 1 === e.rank && 1 === t.rank ? e.as2D(1, -1).matMul(t.as2D(-1, 1)).asScalar() : 1 === e.rank && 2 === t.rank ? e.as2D(1, -1).matMul(t.as2D(t.shape[0], t.shape[1])).as1D() : 2 === e.rank && 1 === t.rank ? e.matMul(t.as2D(-1, 1)).as1D() : e.matMul(t.as2D(t.shape[0], t.shape[1]));
	  }, __decorate([doc({ heading: "Operations", subheading: "Matrices" }), operation], e, "matMul", null), __decorate([operation], e, "vectorTimesMatrix", null), __decorate([operation], e, "matrixTimesVector", null), __decorate([operation], e, "dotProduct", null), __decorate([doc({ heading: "Operations", subheading: "Matrices" }), operation], e, "outerProduct", null), __decorate([doc({ heading: "Operations", subheading: "Matrices" }), operation], e, "dot", null), e;
	}(),
	    MovingAverageOps = function () {
	  function e() {}return e.movingAverage = function (e, t, n, r, a) {
	    void 0 === a && (a = !0), assertArgumentsAreTensors({ v: e, x: t }, "movingAverage"), assertTypesMatch(e, t), assert(arraysEqual(e.shape, t.shape), "Shape mismatch in v and x");var o = ArrayOps.scalar(1);n = "number" == typeof n ? ArrayOps.scalar(n) : n;var i = o.sub(n),
	        s = t.sub(e).mul(i);return a && (assert(null != r, "When using zeroDebias: true, step is required."), r = "number" == typeof r ? ArrayOps.scalar(r) : r, s = s.div(o.sub(BinaryOps.pow(n, r)))), e.add(s);
	  }, __decorate([doc({ heading: "Operations", subheading: "Moving Average" }), operation], e, "movingAverage", null), e;
	}(),
	    NormOps = function () {
	  function e() {}return e.norm = function (e, t, n, r) {
	    void 0 === t && (t = "euclidean"), void 0 === n && (n = null), void 0 === r && (r = !1), assertArgumentsAreTensors({ x: e }, "norm");var a = normImpl(e, t, n),
	        o = a.shape;if (r) {
	      var i = parseAxisParam(n, e.shape);o = expandShapeToKeepDim(a.shape, i);
	    }return a.reshape(o);
	  }, __decorate([doc({ heading: "Operations", subheading: "Matrices" }), operation], e, "norm", null), e;
	}();function normImpl(e, t, n) {
	  if (void 0 === n && (n = null), 0 === e.rank) return e.abs();if (1 !== e.rank && null === n) return normImpl(e.reshape([-1]), t, n);if (1 === e.rank || "number" == typeof n || n instanceof Array && 1 === n.length) {
	    if (1 === t) return e.abs().sum(n);if (t === 1 / 0) return e.abs().max(n);if (t === -1 / 0) return e.abs().min(n);if ("euclidean" === t || 2 === t) return e.abs().pow(scalar(2, "int32")).sum(n).sqrt();throw new Error("Error in norm: invalid ord value: " + t);
	  }if (n instanceof Array && 2 === n.length) {
	    if (1 === t) return e.abs().sum(n[0]).max(n[1] - 1);if (t === 1 / 0) return e.abs().sum(n[1]).max(n[0]);if (t === -1 / 0) return e.abs().sum(n[1]).min(n[0]);if ("fro" === t || "euclidean" === t) return e.square().sum(n).sqrt();throw new Error("Error in norm: invalid ord value: " + t);
	  }throw new Error("Error in norm: invalid axis: " + n);
	}var PoolOps = function () {
	  function e() {}return e.maxPool = function (t, n, r, a, o) {
	    assertArgumentsAreTensors({ x: t }, "maxPool");var i = t,
	        s = !1;3 === t.rank && (s = !0, i = t.as4D(1, t.shape[0], t.shape[1], t.shape[2])), assert(4 === i.rank, "Error in maxPool: input must be rank 4 but got rank " + i.rank + "."), null != o && assert(isInt(a), "Error in maxPool: pad must be an integer when using, dimRoundingMode " + o + " but got pad " + a + ".");var u = computePool2DInfo(i.shape, n, r, a, o),
	        l = ENV.engine.runKernel(function (e, t) {
	      return t(e.maxPool(i, u));
	    }, { x: i }, function (t, o) {
	      var s = o[0];return { x: function () {
	          return e.maxPoolBackprop(t, i, s, n, r, a);
	        } };
	    });return s ? l.as3D(l.shape[1], l.shape[2], l.shape[3]) : l;
	  }, e.maxPoolBackprop = function (e, t, n, r, a, o, i) {
	    assertArgumentsAreTensors({ dy: e, input: t, output: n }, "maxPoolBackprop"), assert(t.rank === e.rank, "Rank of input (" + t.rank + ") does not match rank of dy (" + e.rank + ")"), assert(4 === e.rank, "Error in maxPoolBackprop: dy must be rank 4 but got rank " + e.rank + "."), assert(4 === t.rank, "Error in maxPoolBackprop: input must be rank 4 but got rank " + t.rank + "."), null != i && assert(isInt(o), "Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode " + i + " but got pad " + o + ".");var s = computePool2DInfo(t.shape, r, a, o, i);return ENV.engine.runKernel(function (r) {
	      return r.maxPoolBackprop(e, t, n, s);
	    }, { dy: e, input: t });
	  }, e.avgPool = function (t, n, r, a, o) {
	    assertArgumentsAreTensors({ x: t }, "avgPool"), assert("float32" === t.dtype, "The input dtype to avgPool must be float32");var i = t,
	        s = !1;3 === t.rank && (s = !0, i = t.as4D(1, t.shape[0], t.shape[1], t.shape[2])), assert(4 === i.rank, "Error in avgPool: x must be rank 4 but got rank " + i.rank + "."), null != o && assert(isInt(a), "Error in avgPool: pad must be an integer when using, dimRoundingMode " + o + " but got pad " + a + ".");var u = computePool2DInfo(i.shape, n, r, a),
	        l = ENV.engine.runKernel(function (e) {
	      return e.avgPool(i, u);
	    }, { x: i }, function (t) {
	      return { x: function () {
	          return e.avgPoolBackprop(t, i, n, r, a);
	        } };
	    });return l = l.cast(t.dtype), s ? l.as3D(l.shape[1], l.shape[2], l.shape[3]) : l;
	  }, e.avgPoolBackprop = function (e, t, n, r, a) {
	    assertArgumentsAreTensors({ dy: e, input: t }, "avgPoolBackprop"), assert(t.rank === e.rank, "Rank of input (" + t.rank + ") does not match rank of dy (" + e.rank + ")");var o = t,
	        i = e,
	        s = !1;3 === t.rank && (s = !0, o = t.as4D(1, t.shape[0], t.shape[1], t.shape[2]), i = e.as4D(1, e.shape[0], e.shape[1], e.shape[2])), assert(4 === i.rank, "Error in avgPoolBackprop: dy must be rank 4 but got rank " + i.rank + "."), assert(4 === o.rank, "Error in avgPoolBackprop: input must be rank 4 but got rank " + o.rank + ".");var u = computePool2DInfo(o.shape, n, r, a),
	        l = ENV.engine.runKernel(function (e) {
	      return e.avgPoolBackprop(i, o, u);
	    }, { dy4D: i, input4D: o });return s ? l.as3D(l.shape[1], l.shape[2], l.shape[3]) : l;
	  }, __decorate([doc({ heading: "Operations", subheading: "Convolution" }), operation], e, "maxPool", null), __decorate([operation], e, "maxPoolBackprop", null), __decorate([doc({ heading: "Operations", subheading: "Convolution" }), operation], e, "avgPool", null), __decorate([operation], e, "avgPoolBackprop", null), e;
	}(),
	    ReductionOps = function () {
	  function e() {}return e.logSumExp = function (e, t, n) {
	    void 0 === t && (t = null), void 0 === n && (n = !1), assertArgumentsAreTensors({ x: e }, "logSumExp");var r = parseAxisParam(t, e.shape),
	        a = e.max(r, !0),
	        o = e.sub(a).exp().sum(r).log(),
	        i = a.reshape(o.shape).add(o);if (n) {
	      var s = expandShapeToKeepDim(i.shape, r);return i.reshape(s);
	    }return i;
	  }, e.sum = function (e, t, n) {
	    void 0 === t && (t = null), void 0 === n && (n = !1), assertArgumentsAreTensors({ x: e }, "sum"), "bool" === e.dtype && (e = e.toInt());var r = parseAxisParam(t, e.shape);return customGrad(function (e) {
	      var t = getAxesPermutation(r, e.rank),
	          a = r,
	          o = e;null != t && (o = e.transpose(t), a = getInnerMostAxes(a.length, e.rank));var i = ENV.engine.runKernel(function (e) {
	        return e.sum(o, a);
	      }, { permutedX: o });if (n) {
	        var s = expandShapeToKeepDim(i.shape, r);i = i.reshape(s);
	      }return { value: i, gradFunc: function (t) {
	          var n = e.shape.slice();return r.forEach(function (e) {
	            n[e] = 1;
	          }), t.reshape(n).mul(ones(e.shape, "float32"));
	        } };
	    })(e);
	  }, e.mean = function (e, t, n) {
	    void 0 === t && (t = null), void 0 === n && (n = !1), assertArgumentsAreTensors({ x: e }, "mean");var r = parseAxisParam(t, e.shape),
	        a = sizeFromShape(computeOutAndReduceShapes(e.shape, r)[1]);return customGrad(function (e) {
	      var o = scalar(a);return { value: (o.dtype === e.dtype ? e : e.cast(o.dtype)).div(o).sum(t, n), gradFunc: function (t) {
	          var n = e.shape.slice();return r.forEach(function (e) {
	            n[e] = 1;
	          }), t.reshape(n).mul(ones(e.shape, "float32")).div(o);
	        } };
	    })(e);
	  }, e.min = function (e, t, n) {
	    void 0 === t && (t = null), void 0 === n && (n = !1), assertArgumentsAreTensors({ x: e }, "min");var r = parseAxisParam(t, e.shape),
	        a = r,
	        o = getAxesPermutation(a, e.rank);null != o && (e = e.transpose(o), a = getInnerMostAxes(a.length, e.rank));var i = ENV.engine.runKernel(function (t) {
	      return t.min(e, a);
	    }, { x: e });if (n) {
	      var s = expandShapeToKeepDim(i.shape, r);return i.reshape(s);
	    }return i;
	  }, e.max = function (e, t, n) {
	    void 0 === t && (t = null), void 0 === n && (n = !1), assertArgumentsAreTensors({ x: e }, "max");var r = parseAxisParam(t, e.shape),
	        a = r,
	        o = getAxesPermutation(a, e.rank);null != o && (e = e.transpose(o), a = getInnerMostAxes(a.length, e.rank));var i = ENV.engine.runKernel(function (t) {
	      return t.max(e, a);
	    }, { x: e });if (n) {
	      var s = expandShapeToKeepDim(i.shape, r);return i.reshape(s);
	    }return i;
	  }, e.argMin = function (e, t) {
	    void 0 === t && (t = 0), assertArgumentsAreTensors({ x: e }, "argMin"), null == t && (t = 0);var n = parseAxisParam(t, e.shape),
	        r = getAxesPermutation(n, e.rank);return null != r && (e = e.transpose(r), n = getInnerMostAxes(n.length, e.rank)), ENV.engine.runKernel(function (t) {
	      return t.argMin(e, n[0]);
	    }, { x: e });
	  }, e.argMax = function (e, t) {
	    void 0 === t && (t = 0), assertArgumentsAreTensors({ x: e }, "argMax"), null == t && (t = 0);var n = parseAxisParam(t, e.shape),
	        r = getAxesPermutation(n, e.rank);return null != r && (e = e.transpose(r), n = getInnerMostAxes(n.length, e.rank)), ENV.engine.runKernel(function (t) {
	      return t.argMax(e, n[0]);
	    }, { x: e });
	  }, e.all = function (e, t, n) {
	    void 0 === t && (t = null), void 0 === n && (n = !1), assertArgumentsAreTensors({ x: e }, "all"), assert("bool" === e.dtype, "Error Array must be of type bool.");var r = parseAxisParam(t, e.shape),
	        a = r,
	        o = getAxesPermutation(a, e.rank);null != o && (e = e.transpose(o), a = getInnerMostAxes(a.length, e.rank));var i = ENV.engine.runKernel(function (t) {
	      return t.all(e, a);
	    }, { x: e });if (n) {
	      var s = expandShapeToKeepDim(i.shape, r);return i.reshape(s);
	    }return i;
	  }, e.moments = function (e, t, n) {
	    void 0 === t && (t = null), void 0 === n && (n = !1), assertArgumentsAreTensors({ x: e }, "moments");var r = parseAxisParam(t, e.shape),
	        a = e.mean(r, n),
	        o = a.shape;return n || (o = expandShapeToKeepDim(a.shape, r)), { mean: a, variance: e.toFloat().sub(a.reshape(o)).square().mean(r, n) };
	  }, __decorate([doc({ heading: "Operations", subheading: "Reduction" }), operation], e, "logSumExp", null), __decorate([doc({ heading: "Operations", subheading: "Reduction" }), operation], e, "sum", null), __decorate([doc({ heading: "Operations", subheading: "Reduction" }), operation], e, "mean", null), __decorate([doc({ heading: "Operations", subheading: "Reduction" }), operation], e, "min", null), __decorate([doc({ heading: "Operations", subheading: "Reduction" }), operation], e, "max", null), __decorate([doc({ heading: "Operations", subheading: "Reduction" }), operation], e, "argMin", null), __decorate([doc({ heading: "Operations", subheading: "Reduction" }), operation], e, "argMax", null), __decorate([doc({ heading: "Operations", subheading: "Reduction" }), operation], e, "all", null), __decorate([doc({ heading: "Operations", subheading: "Normalization" }), operation], e, "moments", null), e;
	}(),
	    ReverseOps = function () {
	  function e() {}return e.reverse1d = function (t) {
	    return assert(1 === t.rank, "Error in reverse1D: x must be rank 1 but got\n             rank " + t.rank + "."), e.reverse(t, 0);
	  }, e.reverse2d = function (t, n) {
	    return assert(2 === t.rank, "Error in reverse2D: x must be rank 2 but got\n             rank " + t.rank + "."), e.reverse(t, n);
	  }, e.reverse3d = function (t, n) {
	    return assert(3 === t.rank, "Error in reverse3D: x must be rank 3 but got\n             rank " + t.rank + "."), e.reverse(t, n);
	  }, e.reverse4d = function (t, n) {
	    return assert(4 === t.rank, "Error in reverse4D: x must be rank 4 but got\n             rank " + t.rank + "."), e.reverse(t, n);
	  }, e.reverse = function (e, t) {
	    if (assertArgumentsAreTensors({ x: e }, "reverse"), 0 === e.rank) return e.clone();var n = parseAxisParam(t, e.shape);return ENV.engine.runKernel(function (t) {
	      return t.reverse(e, n);
	    }, { x: e }, function (e) {
	      return { x: function () {
	          return e.reverse(n);
	        } };
	    }).reshapeAs(e);
	  }, __decorate([doc({ heading: "Tensors", subheading: "Slicing and Joining" }), operation], e, "reverse", null), e;
	}(),
	    SigmoidCrossEntropyOps = function () {
	  function e() {}return e.sigmoidCrossEntropyWithLogits = function (e, t) {
	    assertArgumentsAreTensors({ labels: e, logits: t }, "sigmoidCrossEntropyWithLogits"), assertShapesMatch(e.shape, t.shape, "Error in sigmoidCrossEntropyWithLogits: ");var n = t.relu(),
	        r = t.mul(e),
	        a = t.abs().neg().exp().log1p();return n.sub(r).add(a);
	  }, __decorate([doc({ heading: "Operations", subheading: "Cross Entropy" }), operation], e, "sigmoidCrossEntropyWithLogits", null), e;
	}();function assertParamsValid(e, t, n) {
	  assert(e.rank === t.length, "Error in slice" + e.rank + "D: Length of begin " + t + " must match the rank of the array (" + e.rank + ")."), assert(e.rank === n.length, "Error in slice" + e.rank + "D: Length of size " + n + " must match the rank of the array (" + e.rank + ").");for (var r = 0; r < e.rank; ++r) assert(t[r] + n[r] <= e.shape[r], "Error in slice" + e.rank + "D: begin[" + r + "] + size[" + r + "] (" + (t[r] + n[r]) + ") would overflow input.shape[" + r + "] (" + e.shape[r] + ")");
	}function getStridedSlicedInfo(e, t, n, r, a, o) {
	  void 0 === a && (a = 0), void 0 === o && (o = 0);for (var i = [], s = [], u = 0; u < e.length; u++) i[u] = startForAxis(a, t, r, e, u), s[u] = stopForAxis(o, n, r, e, u);var l = new Array(e.length).fill(0);return l = l.map(function (e, t) {
	    for (var n = 0, a = i[t]; !(r[t] > 0 ? a >= s[t] : a <= s[t]); a += r[t]) n += 1;return n;
	  }), [i, l];
	}function startForAxis(e, t, n, r, a) {
	  var o = t[a];e & 1 << a && (o = n[a] > 0 ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER);var i = r[a];return o < 0 && (o += i), o = clamp(0, o, i - 1);
	}function stopForAxis(e, t, n, r, a) {
	  var o = t[a];e & 1 << a && (o = n[a] > 0 ? Number.MAX_SAFE_INTEGER : Number.MIN_SAFE_INTEGER);var i = r[a];return o < 0 && (o += i), o = n[a] > 0 ? clamp(0, o, i) : clamp(-1, o, i - 1);
	}var SliceOps = function () {
	  function e() {}return e.slice1d = function (t, n, r) {
	    return assert(1 === t.rank, "slice1d expects a rank-1 tensor, but got a rank-" + t.rank + " tensor"), e.slice(t, [n], [r]);
	  }, e.slice2d = function (t, n, r) {
	    return assert(2 === t.rank, "slice1d expects a rank-2 tensor, but got a rank-" + t.rank + " tensor"), e.slice(t, n, r);
	  }, e.slice3d = function (t, n, r) {
	    return assert(3 === t.rank, "slice1d expects a rank-3 tensor, but got a rank-" + t.rank + " tensor"), e.slice(t, n, r);
	  }, e.slice4d = function (t, n, r) {
	    return assert(4 === t.rank, "slice1d expects a rank-4 tensor, but got a rank-" + t.rank + " tensor"), e.slice(t, n, r);
	  }, e.slice = function (e, t, n) {
	    if (assertArgumentsAreTensors({ x: e }, "slice"), 0 === e.rank) throw new Error("Slicing scalar is not possible");var r, a;r = "number" == typeof t ? [t].concat(new Array(e.rank - 1).fill(0)) : t.length < e.rank ? t.concat(new Array(e.rank - t.length).fill(0)) : t, a = (a = null == n ? new Array(e.rank).fill(-1) : "number" == typeof n ? [n].concat(new Array(e.rank - 1).fill(-1)) : n.length < e.rank ? n.concat(new Array(e.rank - n.length).fill(-1)) : n).map(function (t, n) {
	      return t >= 0 ? t : (assert(-1 === t, "Bad value in size"), e.shape[n] - r[n]);
	    }), assertParamsValid(e, r, a);var o = e.shape;return ENV.engine.runKernel(function (t) {
	      return t.slice(e, r, a);
	    }, { x: e }, function (e) {
	      for (var t = [], n = 0; n < e.rank; n++) t.push([r[n], o[n] - r[n] - a[n]]);return { x: function () {
	          return e.pad(t);
	        } };
	    });
	  }, __decorate([doc({ heading: "Tensors", subheading: "Slicing and Joining" }), operation], e, "slice", null), e;
	}(),
	    SoftmaxOps = function () {
	  function e() {}return e.softmax = function (e, t) {
	    if (void 0 === t && (t = -1), assertArgumentsAreTensors({ logits: e }, "softmax"), -1 === t && (t = e.rank - 1), t !== e.rank - 1) throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank " + e.rank + " and dim was " + t);return customGrad(function (e) {
	      var n = e.logSumExp([t], !0),
	          r = e.toFloat().sub(n).exp();return { value: r, gradFunc: function (e) {
	          var n = e.mul(r);return n.sub(n.sum([t], !0).mul(r));
	        } };
	    })(e);
	  }, e.softmaxCrossEntropy = function (e, t, n) {
	    if (void 0 === n && (n = -1), assertArgumentsAreTensors({ labels: e, logits: t }, "softmaxCrossEntropy"), assertShapesMatch(e.shape, t.shape, "Error in softmaxCrossEntropy: "), -1 === n && (n = t.rank - 1), n !== t.rank - 1) throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank " + t.rank + " and dim was " + n);return customGrad(function (e, t) {
	      var r = t.softmax(n);return { value: scalar(1e-5).add(r).log().mul(e).neg().sum([n]), gradFunc: function (t) {
	          var a = expandShapeToKeepDim(t.shape, [n]);return [t.reshape(a).mul(e.toFloat().sub(r)), t.reshape(a).mul(r.sub(e.toFloat()))];
	        } };
	    })(e, t);
	  }, __decorate([doc({ heading: "Operations", subheading: "Normalization" }), operation], e, "softmax", null), __decorate([doc({ heading: "Training", subheading: "Losses", namespace: "losses" }), operation], e, "softmaxCrossEntropy", null), e;
	}(),
	    StridedSliceOps = function () {
	  function e() {}return e.stridedSlice = function (e, t, n, r, a, o) {
	    return void 0 === a && (a = 0), void 0 === o && (o = 0), assertArgumentsAreTensors({ x: e }, "stridedSlice"), ENV.engine.runKernel(function (i) {
	      return i.stridedSlice(e, t, n, r, a, o);
	    }, { x: e });
	  }, __decorate([doc({ heading: "Operations", subheading: "Slicing and Joining" }), operation], e, "stridedSlice", null), e;
	}(),
	    TransposeOps = function () {
	  function e() {}return e.transpose = function (e, t) {
	    if (assertArgumentsAreTensors({ x: e }, "transpose"), null == t && (t = e.shape.map(function (e, t) {
	      return t;
	    }).reverse()), assert(e.rank === t.length, "Error in transpose: rank of input " + e.rank + " must match length of perm " + t + "."), t.forEach(function (n) {
	      assert(n >= 0 && n < e.rank, "All entries in 'perm' must be between 0 and " + (e.rank - 1) + " but got " + t);
	    }), e.rank <= 1) return e.clone();return ENV.engine.runKernel(function (n) {
	      return n.transpose(e, t);
	    }, { x: e }, function (e) {
	      var n = getUndoAxesPermutation(t);return { x: function () {
	          return e.transpose(n);
	        } };
	    });
	  }, __decorate([doc({ heading: "Operations", subheading: "Matrices" }), operation], e, "transpose", null), e;
	}(),
	    SELU_SCALEALPHA = 1.7580993408473768,
	    SELU_SCALE = 1.0507009873554805,
	    UnaryOps = function () {
	  function e() {}return e.neg = function (e) {
	    assertArgumentsAreTensors({ x: e }, "neg");return ENV.engine.runKernel(function (t) {
	      return t.neg(e);
	    }, { x: e }, function (e) {
	      return { x: function () {
	          return e.neg();
	        } };
	    });
	  }, e.ceil = function (e) {
	    assertArgumentsAreTensors({ x: e }, "ceil");return ENV.engine.runKernel(function (t) {
	      return t.ceil(e);
	    }, { x: e }, function (e) {
	      return { x: function () {
	          return zerosLike(e);
	        } };
	    });
	  }, e.floor = function (e) {
	    assertArgumentsAreTensors({ x: e }, "floor");return ENV.engine.runKernel(function (t) {
	      return t.floor(e);
	    }, { x: e }, function (e) {
	      return { x: function () {
	          return zerosLike(e);
	        } };
	    });
	  }, e.sign = function (e) {
	    assertArgumentsAreTensors({ x: e }, "sign");return ENV.engine.runKernel(function (t) {
	      return t.sign(e);
	    }, { x: e }, function (e) {
	      return { x: function () {
	          return zerosLike(e);
	        } };
	    });
	  }, e.round = function (e) {
	    assertArgumentsAreTensors({ x: e }, "round");return ENV.engine.runKernel(function (t) {
	      return t.round(e);
	    }, { x: e }, function (e) {
	      return { x: function () {
	          return zerosLike(e);
	        } };
	    });
	  }, e.exp = function (e) {
	    assertArgumentsAreTensors({ x: e }, "exp");return ENV.engine.runKernel(function (t, n) {
	      return n(t.exp(e));
	    }, { x: e }, function (e, t) {
	      var n = t[0];return { x: function () {
	          return e.mulStrict(n);
	        } };
	    });
	  }, e.expm1 = function (e) {
	    assertArgumentsAreTensors({ x: e }, "expm1");return ENV.engine.runKernel(function (t) {
	      return t.expm1(e);
	    }, { x: e }, function (t) {
	      return { x: function () {
	          return t.mulStrict(e.exp());
	        } };
	    });
	  }, e.log = function (e) {
	    assertArgumentsAreTensors({ x: e }, "log");return ENV.engine.runKernel(function (t) {
	      return t.log(e);
	    }, { x: e }, function (t) {
	      return { x: function () {
	          return t.divStrict(e.toFloat());
	        } };
	    });
	  }, e.log1p = function (e) {
	    assertArgumentsAreTensors({ x: e }, "log1p");return ENV.engine.runKernel(function (t) {
	      return t.log1p(e);
	    }, { x: e }, function (t) {
	      return { x: function () {
	          return t.divStrict(e.add(scalar(1)));
	        } };
	    });
	  }, e.sqrt = function (e) {
	    assertArgumentsAreTensors({ x: e }, "sqrt");return ENV.engine.runKernel(function (t) {
	      return t.sqrt(e);
	    }, { x: e }, function (t) {
	      return { x: function () {
	          return t.divStrict(e.toFloat().sqrt().mul(scalar(2)));
	        } };
	    });
	  }, e.rsqrt = function (e) {
	    assertArgumentsAreTensors({ x: e }, "rsqrt");return ENV.engine.runKernel(function (t) {
	      return t.rsqrt(e);
	    }, { x: e }, function (t) {
	      return { x: function () {
	          return t.divStrict(e.pow(scalar(1.5)).mul(scalar(2))).neg();
	        } };
	    });
	  }, e.square = function (e) {
	    assertArgumentsAreTensors({ x: e }, "square");return ENV.engine.runKernel(function (t) {
	      return t.square(e);
	    }, { x: e }, function (t) {
	      return { x: function () {
	          return t.mulStrict(e.toFloat().mul(scalar(2)));
	        } };
	    });
	  }, e.reciprocal = function (e) {
	    assertArgumentsAreTensors({ x: e }, "reciprocal");return ENV.engine.runKernel(function (t) {
	      return t.reciprocal(e);
	    }, { x: e }, function (t) {
	      return { x: function () {
	          return t.divStrict(e.square().neg());
	        } };
	    });
	  }, e.abs = function (e) {
	    assertArgumentsAreTensors({ x: e }, "abs");return ENV.engine.runKernel(function (t) {
	      return t.abs(e);
	    }, { x: e }, function (t) {
	      return { x: function () {
	          return t.mulStrict(e.toFloat().step(-1));
	        } };
	    });
	  }, e.clipByValue = function (e, t, n) {
	    assertArgumentsAreTensors({ x: e }, "clipByValue"), assert(t <= n, "Error in clip: min (" + t + ") must be less than or equal to max (" + n + ").");return ENV.engine.runKernel(function (r) {
	      return r.clip(e, t, n);
	    }, { x: e }, function (r) {
	      return { x: function () {
	          return r.where(e.greaterEqual(scalar(t)).logicalAnd(e.lessEqual(scalar(n))), zerosLike(r));
	        } };
	    });
	  }, e.relu = function (e) {
	    if (assertArgumentsAreTensors({ x: e }, "relu"), "bool" === e.dtype) return e.toInt();return ENV.engine.runKernel(function (t) {
	      return t.relu(e);
	    }, { x: e }, function (t) {
	      var n = e.step();return { x: function () {
	          return t.mulStrict(n.toFloat());
	        } };
	    });
	  }, e.elu = function (e) {
	    assertArgumentsAreTensors({ x: e }, "elu");return ENV.engine.runKernel(function (t, n) {
	      return n(t.elu(e));
	    }, { x: e }, function (e, t) {
	      var n = t[0];return { x: function () {
	          return ENV.engine.runKernel(function (t) {
	            return t.eluDer(e, n);
	          }, { dy: e, y: n });
	        } };
	    });
	  }, e.selu = function (e) {
	    assertArgumentsAreTensors({ x: e }, "selu");return ENV.engine.runKernel(function (t) {
	      return t.selu(e);
	    }, { x: e }, function (t) {
	      return { x: function () {
	          var n = e.greater(scalar(0)),
	              r = scalar(SELU_SCALEALPHA),
	              a = scalar(SELU_SCALE),
	              o = t.mul(a),
	              i = t.mul(r).mul(e.toFloat().exp());return where(n, o, i);
	        } };
	    });
	  }, e.leakyRelu = function (e, t) {
	    return void 0 === t && (t = .2), assertArgumentsAreTensors({ x: e }, "leakyRelu"), maximum(scalar(t).mul(e), e);
	  }, e.prelu = function (e, t) {
	    assertArgumentsAreTensors({ x: e, alpha: t }, "prelu");var n = scalar(0);return maximum(n, e).add(t.mul(minimum(n, e)));
	  }, e.sigmoid = function (e) {
	    assertArgumentsAreTensors({ x: e }, "sigmoid");return ENV.engine.runKernel(function (t, n) {
	      return n(t.sigmoid(e));
	    }, { x: e }, function (e, t) {
	      var n = t[0];return { x: function () {
	          return e.mulStrict(n.mul(scalar(1).sub(n)));
	        } };
	    });
	  }, e.logSigmoid = function (e) {
	    assertArgumentsAreTensors({ x: e }, "logSigmoid");return ENV.engine.runKernel(function (t) {
	      return t.softplus(e.neg()).neg();
	    }, { x: e }, function (t) {
	      return { x: function () {
	          return t.mulStrict(e.neg().sigmoid());
	        } };
	    });
	  }, e.softplus = function (e) {
	    assertArgumentsAreTensors({ x: e }, "softplus");return ENV.engine.runKernel(function (t) {
	      return t.softplus(e);
	    }, { x: e }, function (t) {
	      return { x: function () {
	          return t.mulStrict(e.sigmoid());
	        } };
	    });
	  }, e.sin = function (e) {
	    assertArgumentsAreTensors({ x: e }, "sin");return ENV.engine.runKernel(function (t) {
	      return t.sin(e);
	    }, { x: e }, function (t) {
	      return { x: function () {
	          return e.toFloat().cos().mulStrict(t);
	        } };
	    });
	  }, e.cos = function (e) {
	    assertArgumentsAreTensors({ x: e }, "cos");return ENV.engine.runKernel(function (t) {
	      return t.cos(e);
	    }, { x: e }, function (t) {
	      return { x: function () {
	          return e.toFloat().sin().neg().mulStrict(t);
	        } };
	    });
	  }, e.tan = function (e) {
	    assertArgumentsAreTensors({ x: e }, "tan");return ENV.engine.runKernel(function (t) {
	      return t.tan(e);
	    }, { x: e }, function (t) {
	      return { x: function () {
	          return t.divStrict(e.cos().square());
	        } };
	    });
	  }, e.asin = function (t) {
	    assertArgumentsAreTensors({ x: t }, "asin");return ENV.engine.runKernel(function (e) {
	      return e.asin(t);
	    }, { x: t }, function (n) {
	      return { x: function () {
	          return n.divStrict(e.sqrt(scalar(1).sub(t.toFloat().square())));
	        } };
	    });
	  }, e.acos = function (t) {
	    assertArgumentsAreTensors({ x: t }, "acos");return ENV.engine.runKernel(function (e) {
	      return e.acos(t);
	    }, { x: t }, function (n) {
	      return { x: function () {
	          return n.divStrict(e.sqrt(scalar(1).sub(t.toFloat().square()))).neg();
	        } };
	    });
	  }, e.atan = function (e) {
	    assertArgumentsAreTensors({ x: e }, "atan");return ENV.engine.runKernel(function (t) {
	      return t.atan(e);
	    }, { x: e }, function (t) {
	      return { x: function () {
	          return t.divStrict(scalar(1).add(e.toFloat().square()));
	        } };
	    });
	  }, e.sinh = function (e) {
	    assertArgumentsAreTensors({ x: e }, "sinh");return ENV.engine.runKernel(function (t) {
	      return t.sinh(e);
	    }, { x: e }, function (t) {
	      return { x: function () {
	          return e.toFloat().cosh().mulStrict(t);
	        } };
	    });
	  }, e.cosh = function (e) {
	    assertArgumentsAreTensors({ x: e }, "cosh");return ENV.engine.runKernel(function (t) {
	      return t.cosh(e);
	    }, { x: e }, function (t) {
	      return { x: function () {
	          return e.toFloat().sinh().mulStrict(t);
	        } };
	    });
	  }, e.tanh = function (e) {
	    assertArgumentsAreTensors({ x: e }, "tanh");return ENV.engine.runKernel(function (t, n) {
	      return n(t.tanh(e));
	    }, { x: e }, function (e, t) {
	      var n = t[0];return { x: function () {
	          return scalar(1).sub(n.square()).mulStrict(e);
	        } };
	    });
	  }, e.asinh = function (t) {
	    assertArgumentsAreTensors({ x: t }, "asinh");return ENV.engine.runKernel(function (e) {
	      return e.asinh(t);
	    }, { x: t }, function (n) {
	      return { x: function () {
	          return n.divStrict(e.sqrt(scalar(1).add(t.toFloat().square())));
	        } };
	    });
	  }, e.acosh = function (t) {
	    assertArgumentsAreTensors({ x: t }, "acosh");return ENV.engine.runKernel(function (e) {
	      return e.acosh(t);
	    }, { x: t }, function (n) {
	      return { x: function () {
	          return n.divStrict(e.sqrt(t.toFloat().square().sub(scalar(1))));
	        } };
	    });
	  }, e.atanh = function (e) {
	    assertArgumentsAreTensors({ x: e }, "atanh");return ENV.engine.runKernel(function (t) {
	      return t.atanh(e);
	    }, { x: e }, function (t) {
	      return { x: function () {
	          return t.divStrict(scalar(1).sub(e.toFloat().square()));
	        } };
	    });
	  }, e.erf = function (e) {
	    assert("int32" === e.dtype || "float32" === e.dtype, "Input dtype must be `int32` or `float32`."), "int32" === e.dtype && (e = e.toFloat());return ENV.engine.runKernel(function (t) {
	      return t.erf(e);
	    }, { x: e }, function (t) {
	      return { x: function () {
	          return t.mulStrict(scalar(2 / Math.sqrt(Math.PI)).mul(e.square().neg().exp()));
	        } };
	    });
	  }, e.step = function (e, t) {
	    void 0 === t && (t = 0), assertArgumentsAreTensors({ x: e }, "step");return ENV.engine.runKernel(function (n) {
	      return n.step(e, t);
	    }, { x: e }, function (e) {
	      return { x: function () {
	          return zerosLike(e);
	        } };
	    });
	  }, __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "neg", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "ceil", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "floor", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "sign", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "round", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "exp", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "expm1", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "log", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "log1p", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "sqrt", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "rsqrt", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "square", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "reciprocal", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "abs", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "clipByValue", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "relu", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "elu", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "selu", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "leakyRelu", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "prelu", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "sigmoid", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "logSigmoid", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "softplus", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "sin", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "cos", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "tan", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "asin", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "acos", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "atan", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "sinh", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "cosh", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "tanh", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "asinh", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "acosh", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "atanh", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "erf", null), __decorate([doc({ heading: "Operations", subheading: "Basic math" }), operation], e, "step", null), e;
	}(),
	    batchNormalization = BatchNormOps.batchNormalization,
	    batchNormalization2d = BatchNormOps.batchNormalization2d,
	    batchNormalization3d = BatchNormOps.batchNormalization3d,
	    batchNormalization4d = BatchNormOps.batchNormalization4d,
	    concat = ConcatOps.concat,
	    concat1d = ConcatOps.concat1d,
	    concat2d = ConcatOps.concat2d,
	    concat3d = ConcatOps.concat3d,
	    concat4d = ConcatOps.concat4d,
	    conv1d = ConvOps.conv1d,
	    conv2d = ConvOps.conv2d,
	    conv2dTranspose = ConvOps.conv2dTranspose,
	    depthwiseConv2d = ConvOps.depthwiseConv2d,
	    separableConv2d = ConvOps.separableConv2d,
	    matMul = MatmulOps.matMul,
	    matrixTimesVector = MatmulOps.matrixTimesVector,
	    outerProduct = MatmulOps.outerProduct,
	    vectorTimesMatrix = MatmulOps.vectorTimesMatrix,
	    dot = MatmulOps.dot,
	    avgPool = PoolOps.avgPool,
	    maxPool = PoolOps.maxPool,
	    transpose = TransposeOps.transpose,
	    reverse = ReverseOps.reverse,
	    reverse1d = ReverseOps.reverse1d,
	    reverse2d = ReverseOps.reverse2d,
	    reverse3d = ReverseOps.reverse3d,
	    reverse4d = ReverseOps.reverse4d,
	    slice = SliceOps.slice,
	    slice1d = SliceOps.slice1d,
	    slice2d = SliceOps.slice2d,
	    slice3d = SliceOps.slice3d,
	    slice4d = SliceOps.slice4d,
	    stridedSlice = StridedSliceOps.stridedSlice,
	    argMax = ReductionOps.argMax,
	    argMin = ReductionOps.argMin,
	    logSumExp = ReductionOps.logSumExp,
	    max = ReductionOps.max,
	    mean = ReductionOps.mean,
	    min = ReductionOps.min,
	    all = ReductionOps.all,
	    moments = ReductionOps.moments,
	    sum = ReductionOps.sum,
	    unsortedSegmentSum = SegmentOps.unsortedSegmentSum,
	    equal = CompareOps.equal,
	    equalStrict = CompareOps.equalStrict,
	    greater = CompareOps.greater,
	    greaterStrict = CompareOps.greaterStrict,
	    greaterEqual = CompareOps.greaterEqual,
	    greaterEqualStrict = CompareOps.greaterEqualStrict,
	    less = CompareOps.less,
	    lessStrict = CompareOps.lessStrict,
	    lessEqual = CompareOps.lessEqual,
	    lessEqualStrict = CompareOps.lessEqualStrict,
	    notEqual = CompareOps.notEqual,
	    notEqualStrict = CompareOps.notEqualStrict,
	    logicalNot = LogicalOps.logicalNot,
	    logicalAnd = LogicalOps.logicalAnd,
	    logicalOr = LogicalOps.logicalOr,
	    logicalXor = LogicalOps.logicalXor,
	    where = LogicalOps.where,
	    abs = UnaryOps.abs,
	    acos = UnaryOps.acos,
	    acosh = UnaryOps.acosh,
	    asin = UnaryOps.asin,
	    asinh = UnaryOps.asinh,
	    atan = UnaryOps.atan,
	    atanh = UnaryOps.atanh,
	    ceil = UnaryOps.ceil,
	    clipByValue = UnaryOps.clipByValue,
	    cos = UnaryOps.cos,
	    cosh = UnaryOps.cosh,
	    elu = UnaryOps.elu,
	    exp = UnaryOps.exp,
	    expm1 = UnaryOps.expm1,
	    floor = UnaryOps.floor,
	    sign = UnaryOps.sign,
	    leakyRelu = UnaryOps.leakyRelu,
	    log = UnaryOps.log,
	    log1p = UnaryOps.log1p,
	    logSigmoid = UnaryOps.logSigmoid,
	    neg = UnaryOps.neg,
	    prelu = UnaryOps.prelu,
	    relu = UnaryOps.relu,
	    reciprocal = UnaryOps.reciprocal,
	    round = UnaryOps.round,
	    selu = UnaryOps.selu,
	    sigmoid = UnaryOps.sigmoid,
	    sin = UnaryOps.sin,
	    sinh = UnaryOps.sinh,
	    softplus = UnaryOps.softplus,
	    sqrt = UnaryOps.sqrt,
	    rsqrt = UnaryOps.rsqrt,
	    square = UnaryOps.square,
	    step = UnaryOps.step,
	    tan = UnaryOps.tan,
	    tanh$1 = UnaryOps.tanh,
	    erf = UnaryOps.erf,
	    add = BinaryOps.add,
	    addStrict = BinaryOps.addStrict,
	    atan2 = BinaryOps.atan2,
	    div = BinaryOps.div,
	    floorDiv = BinaryOps.floorDiv,
	    divStrict = BinaryOps.divStrict,
	    maximum = BinaryOps.maximum,
	    maximumStrict = BinaryOps.maximumStrict,
	    minimum = BinaryOps.minimum,
	    minimumStrict = BinaryOps.minimumStrict,
	    mod = BinaryOps.mod,
	    modStrict = BinaryOps.modStrict,
	    mul = BinaryOps.mul,
	    mulStrict = BinaryOps.mulStrict,
	    pow = BinaryOps.pow,
	    powStrict = BinaryOps.powStrict,
	    sub = BinaryOps.sub,
	    subStrict = BinaryOps.subStrict,
	    squaredDifference = BinaryOps.squaredDifference,
	    squaredDifferenceStrict = BinaryOps.squaredDifferenceStrict,
	    norm = NormOps.norm,
	    cast = ArrayOps.cast,
	    clone = ArrayOps.clone,
	    fromPixels = ArrayOps.fromPixels,
	    toPixels = ArrayOps.toPixels,
	    ones = ArrayOps.ones,
	    onesLike = ArrayOps.onesLike,
	    zeros = ArrayOps.zeros,
	    zerosLike = ArrayOps.zerosLike,
	    eye = ArrayOps.eye,
	    rand = ArrayOps.rand,
	    randomNormal = ArrayOps.randomNormal,
	    truncatedNormal = ArrayOps.truncatedNormal,
	    randomUniform = ArrayOps.randomUniform,
	    multinomial = ArrayOps.multinomial,
	    reshape = ArrayOps.reshape,
	    squeeze = ArrayOps.squeeze,
	    tile = ArrayOps.tile,
	    gather = ArrayOps.gather,
	    oneHot = ArrayOps.oneHot,
	    linspace = ArrayOps.linspace,
	    range = ArrayOps.range,
	    buffer = ArrayOps.buffer,
	    fill = ArrayOps.fill,
	    tensor = ArrayOps.tensor,
	    scalar = ArrayOps.scalar,
	    tensor1d = ArrayOps.tensor1d,
	    tensor2d = ArrayOps.tensor2d,
	    tensor3d = ArrayOps.tensor3d,
	    tensor4d = ArrayOps.tensor4d,
	    tensor5d = ArrayOps.tensor5d,
	    tensor6d = ArrayOps.tensor6d,
	    print = ArrayOps.print,
	    expandDims = ArrayOps.expandDims,
	    stack = ArrayOps.stack,
	    unstack = ArrayOps.unstack,
	    split = ArrayOps.split,
	    cumsum = ArrayOps.cumsum,
	    pad = ArrayOps.pad,
	    pad1d = ArrayOps.pad1d,
	    pad2d = ArrayOps.pad2d,
	    pad3d = ArrayOps.pad3d,
	    pad4d = ArrayOps.pad4d,
	    movingAverage = MovingAverageOps.movingAverage,
	    basicLSTMCell = LSTMOps.basicLSTMCell,
	    multiRNNCell = LSTMOps.multiRNNCell,
	    softmax = SoftmaxOps.softmax,
	    sigmoidCrossEntropyWithLogits = SigmoidCrossEntropyOps.sigmoidCrossEntropyWithLogits,
	    localResponseNormalization = LRNOps.localResponseNormalization,
	    linalg = LinalgOps,
	    losses = { absoluteDifference: LossOps.absoluteDifference, computeWeightedLoss: LossOps.computeWeightedLoss, cosineDistance: LossOps.cosineDistance, hingeLoss: LossOps.hingeLoss, huberLoss: LossOps.huberLoss, logLoss: LossOps.logLoss, meanSquaredError: LossOps.meanSquaredError, softmaxCrossEntropy: SoftmaxOps.softmaxCrossEntropy },
	    image = { resizeBilinear: ImageOps.resizeBilinear, resizeNearestNeighbor: ImageOps.resizeNearestNeighbor },
	    TensorBuffer = function () {
	  function e(e, t, n) {
	    if (this.dtype = t, null != n) {
	      var r = n.length,
	          a = sizeFromShape(e);assert(r === a, "Length of values '" + r + "' does not match the size inferred by the shape '" + a + "'");
	    }this.shape = e.slice(), this.values = n || getTypedArrayFromDType(t, sizeFromShape(e)), this.strides = computeStrides(e), this.size = sizeFromShape(e);
	  }return e.prototype.set = function (e) {
	    for (var t = [], n = 1; n < arguments.length; n++) t[n - 1] = arguments[n];0 === t.length && (t = [0]), assert(t.length === this.rank, "The number of provided coordinates (" + t.length + ") must match the rank (" + this.rank + ")");var r = this.locToIndex(t);this.values[r] = e;
	  }, e.prototype.get = function () {
	    for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];0 === e.length && (e = [0]);for (var n = e[e.length - 1], r = 0; r < e.length - 1; ++r) n += this.strides[r] * e[r];return this.values[n];
	  }, e.prototype.locToIndex = function (e) {
	    if (0 === this.rank) return 0;if (1 === this.rank) return e[0];for (var t = e[e.length - 1], n = 0; n < e.length - 1; ++n) t += this.strides[n] * e[n];return t;
	  }, e.prototype.indexToLoc = function (e) {
	    if (0 === this.rank) return [];if (1 === this.rank) return [e];for (var t = new Array(this.shape.length), n = 0; n < t.length - 1; ++n) t[n] = Math.floor(e / this.strides[n]), e -= t[n] * this.strides[n];return t[t.length - 1] = e, t;
	  }, Object.defineProperty(e.prototype, "rank", { get: function () {
	      return this.shape.length;
	    }, enumerable: !0, configurable: !0 }), e.prototype.toTensor = function () {
	    return Tensor.make(this.shape, { values: this.values }, this.dtype);
	  }, __decorate([doc({ heading: "Tensors", subheading: "Creation" })], e.prototype, "set", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" })], e.prototype, "get", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" })], e.prototype, "toTensor", null), e = __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e);
	}(),
	    Tensor = function () {
	  function e(e, n, r, a) {
	    this.isDisposedInternal = !1, this.size = sizeFromShape(e), null != r && assert(this.size === r.length, "Constructing tensor of shape (" + this.size + ") should match the length of values (" + r.length + ")"), this.shape = e.slice(), this.dtype = n || "float32", this.strides = computeStrides(e), this.dataId = null != a ? a : {}, this.id = t.nextId++, this.rankType = this.rank < 5 ? this.rank.toString() : "higher", ENV.engine.registerTensor(this), null != r && ENV.engine.write(this.dataId, r);
	  }return t = e, e.make = function (e, n, r) {
	    return new t(e, r, n.values, n.dataId);
	  }, e.prototype.flatten = function () {
	    return this.throwIfDisposed(), this.as1D();
	  }, e.prototype.asScalar = function () {
	    return this.throwIfDisposed(), assert(1 === this.size, "The array must have only 1 element."), this.reshape([]);
	  }, e.prototype.as1D = function () {
	    return this.throwIfDisposed(), this.reshape([this.size]);
	  }, e.prototype.as2D = function (e, t) {
	    return this.throwIfDisposed(), this.reshape([e, t]);
	  }, e.prototype.as3D = function (e, t, n) {
	    return this.throwIfDisposed(), this.reshape([e, t, n]);
	  }, e.prototype.as4D = function (e, t, n, r) {
	    return this.throwIfDisposed(), this.reshape([e, t, n, r]);
	  }, e.prototype.asType = function (e) {
	    return this.throwIfDisposed(), cast(this, e);
	  }, Object.defineProperty(e.prototype, "rank", { get: function () {
	      return this.shape.length;
	    }, enumerable: !0, configurable: !0 }), e.prototype.get = function () {
	    for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];assert(e.length === this.rank, "Number of coordinates in get() must match the rank of the tensor"), this.throwIfDisposed(), 0 === e.length && (e = [0]);for (var n = e[e.length - 1], r = 0; r < e.length - 1; ++r) n += this.strides[r] * e[r];return this.dataSync()[n];
	  }, e.prototype.buffer = function () {
	    return buffer(this.shape, this.dtype, this.dataSync());
	  }, e.prototype.data = function () {
	    return __awaiter(this, void 0, void 0, function () {
	      return __generator(this, function (e) {
	        return this.throwIfDisposed(), [2, ENV.engine.read(this.dataId)];
	      });
	    });
	  }, e.prototype.dataSync = function () {
	    return this.throwIfDisposed(), ENV.engine.readSync(this.dataId);
	  }, e.prototype.dispose = function () {
	    this.isDisposed || (ENV.engine.disposeTensor(this), this.isDisposedInternal = !0);
	  }, Object.defineProperty(e.prototype, "isDisposed", { get: function () {
	      return this.isDisposedInternal;
	    }, enumerable: !0, configurable: !0 }), e.prototype.throwIfDisposed = function () {
	    if (this.isDisposed) throw new Error("Tensor is disposed.");
	  }, e.prototype.toFloat = function () {
	    return this.asType("float32");
	  }, e.prototype.toInt = function () {
	    return this.asType("int32");
	  }, e.prototype.toBool = function () {
	    return this.asType("bool");
	  }, e.prototype.print = function (e) {
	    return void 0 === e && (e = !1), print(this, e);
	  }, e.prototype.reshape = function (e) {
	    return this.throwIfDisposed(), reshape(this, e);
	  }, e.prototype.reshapeAs = function (e) {
	    return this.throwIfDisposed(), this.reshape(e.shape);
	  }, e.prototype.expandDims = function (e) {
	    return void 0 === e && (e = 0), expandDims(this, e);
	  }, e.prototype.cumsum = function (e, t, n) {
	    return void 0 === e && (e = 0), void 0 === t && (t = !1), void 0 === n && (n = !1), cumsum(this, e, t, n);
	  }, e.prototype.squeeze = function (e) {
	    return this.throwIfDisposed(), squeeze(this, e);
	  }, e.prototype.clone = function () {
	    return this.throwIfDisposed(), clone(this);
	  }, e.prototype.toString = function (e) {
	    return void 0 === e && (e = !1), tensorToString(this, e);
	  }, e.prototype.tile = function (e) {
	    return this.throwIfDisposed(), tile(this, e);
	  }, e.prototype.gather = function (e, t) {
	    return void 0 === t && (t = 0), this.throwIfDisposed(), gather(this, e, t);
	  }, e.prototype.matMul = function (e, t, n) {
	    return void 0 === t && (t = !1), void 0 === n && (n = !1), this.throwIfDisposed(), matMul(this, e, t, n);
	  }, e.prototype.dot = function (e) {
	    return this.throwIfDisposed(), dot(this, e);
	  }, e.prototype.norm = function (e, t, n) {
	    return void 0 === e && (e = "euclidean"), void 0 === t && (t = null), void 0 === n && (n = !1), this.throwIfDisposed(), norm(this, e, t, n);
	  }, e.prototype.slice = function (e, t) {
	    return this.throwIfDisposed(), slice(this, e, t);
	  }, e.prototype.reverse = function (e) {
	    return this.throwIfDisposed(), reverse(this, e);
	  }, e.prototype.concat = function (e, t) {
	    return void 0 === t && (t = 0), this.throwIfDisposed(), concat([this, e], t);
	  }, e.prototype.stack = function (e, t) {
	    return void 0 === t && (t = 0), stack([this, e], t);
	  }, e.prototype.unstack = function (e, t) {
	    return void 0 === t && (t = 0), unstack(this, t);
	  }, e.prototype.pad = function (e, t) {
	    return void 0 === t && (t = 0), pad(this, e, t);
	  }, e.prototype.batchNormalization = function (e, t, n, r, a) {
	    return void 0 === n && (n = .001), this.throwIfDisposed(), batchNormalization(this, e, t, n, r, a);
	  }, e.prototype.all = function (e, t) {
	    return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), all(this, e, t);
	  }, e.prototype.logSumExp = function (e, t) {
	    return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), logSumExp(this, e, t);
	  }, e.prototype.sum = function (e, t) {
	    return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), sum(this, e, t);
	  }, e.prototype.mean = function (e, t) {
	    return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), mean(this, e, t);
	  }, e.prototype.min = function (e, t) {
	    return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), min(this, e, t);
	  }, e.prototype.max = function (e, t) {
	    return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), max(this, e, t);
	  }, e.prototype.argMin = function (e) {
	    return void 0 === e && (e = null), this.throwIfDisposed(), argMin(this, e);
	  }, e.prototype.argMax = function (e) {
	    return void 0 === e && (e = null), this.throwIfDisposed(), argMax(this, e);
	  }, e.prototype.cast = function (e) {
	    return this.throwIfDisposed(), cast(this, e);
	  }, e.prototype.add = function (e) {
	    return this.throwIfDisposed(), add(this, e);
	  }, e.prototype.addStrict = function (e) {
	    return this.throwIfDisposed(), addStrict(this, e);
	  }, e.prototype.sub = function (e) {
	    return this.throwIfDisposed(), sub(this, e);
	  }, e.prototype.subStrict = function (e) {
	    return this.throwIfDisposed(), subStrict(this, e);
	  }, e.prototype.pow = function (e) {
	    return this.throwIfDisposed(), pow(this, e);
	  }, e.prototype.powStrict = function (e) {
	    return this.throwIfDisposed(), powStrict(this, e);
	  }, e.prototype.mul = function (e) {
	    return this.throwIfDisposed(), mul(this, e);
	  }, e.prototype.mulStrict = function (e) {
	    return this.throwIfDisposed(), mulStrict(this, e);
	  }, e.prototype.div = function (e) {
	    return this.throwIfDisposed(), div(this, e);
	  }, e.prototype.floorDiv = function (e) {
	    return this.throwIfDisposed(), floorDiv(this, e);
	  }, e.prototype.divStrict = function (e) {
	    return this.throwIfDisposed(), divStrict(this, e);
	  }, e.prototype.minimum = function (e) {
	    return this.throwIfDisposed(), minimum(this, e);
	  }, e.prototype.minimumStrict = function (e) {
	    return this.throwIfDisposed(), minimumStrict(this, e);
	  }, e.prototype.maximum = function (e) {
	    return this.throwIfDisposed(), maximum(this, e);
	  }, e.prototype.maximumStrict = function (e) {
	    return this.throwIfDisposed(), maximumStrict(this, e);
	  }, e.prototype.mod = function (e) {
	    return this.throwIfDisposed(), mod(this, e);
	  }, e.prototype.modStrict = function (e) {
	    return this.throwIfDisposed(), modStrict(this, e);
	  }, e.prototype.squaredDifference = function (e) {
	    return this.throwIfDisposed(), squaredDifference(this, e);
	  }, e.prototype.squaredDifferenceStrict = function (e) {
	    return this.throwIfDisposed(), squaredDifferenceStrict(this, e);
	  }, e.prototype.transpose = function (e) {
	    return this.throwIfDisposed(), transpose(this, e);
	  }, e.prototype.notEqual = function (e) {
	    return this.throwIfDisposed(), notEqual(this, e);
	  }, e.prototype.notEqualStrict = function (e) {
	    return this.throwIfDisposed(), notEqualStrict(this, e);
	  }, e.prototype.less = function (e) {
	    return this.throwIfDisposed(), less(this, e);
	  }, e.prototype.lessStrict = function (e) {
	    return this.throwIfDisposed(), lessStrict(this, e);
	  }, e.prototype.equal = function (e) {
	    return this.throwIfDisposed(), equal(this, e);
	  }, e.prototype.equalStrict = function (e) {
	    return this.throwIfDisposed(), equalStrict(this, e);
	  }, e.prototype.lessEqual = function (e) {
	    return this.throwIfDisposed(), lessEqual(this, e);
	  }, e.prototype.lessEqualStrict = function (e) {
	    return this.throwIfDisposed(), lessEqualStrict(this, e);
	  }, e.prototype.greater = function (e) {
	    return this.throwIfDisposed(), greater(this, e);
	  }, e.prototype.greaterStrict = function (e) {
	    return this.throwIfDisposed(), greaterStrict(this, e);
	  }, e.prototype.greaterEqual = function (e) {
	    return this.throwIfDisposed(), greaterEqual(this, e);
	  }, e.prototype.greaterEqualStrict = function (e) {
	    return this.throwIfDisposed(), greaterEqualStrict(this, e);
	  }, e.prototype.logicalAnd = function (e) {
	    return this.throwIfDisposed(), logicalAnd(this, e);
	  }, e.prototype.logicalOr = function (e) {
	    return this.throwIfDisposed(), logicalOr(this, e);
	  }, e.prototype.logicalNot = function () {
	    return this.throwIfDisposed(), logicalNot(this);
	  }, e.prototype.logicalXor = function (e) {
	    return this.throwIfDisposed(), logicalXor(this, e);
	  }, e.prototype.where = function (e, t) {
	    return this.throwIfDisposed(), where(e, this, t);
	  }, e.prototype.neg = function () {
	    return this.throwIfDisposed(), neg(this);
	  }, e.prototype.ceil = function () {
	    return this.throwIfDisposed(), ceil(this);
	  }, e.prototype.floor = function () {
	    return this.throwIfDisposed(), floor(this);
	  }, e.prototype.sign = function () {
	    return this.throwIfDisposed(), sign(this);
	  }, e.prototype.exp = function () {
	    return this.throwIfDisposed(), exp(this);
	  }, e.prototype.expm1 = function () {
	    return this.throwIfDisposed(), expm1(this);
	  }, e.prototype.log = function () {
	    return this.throwIfDisposed(), log(this);
	  }, e.prototype.log1p = function () {
	    return this.throwIfDisposed(), log1p(this);
	  }, e.prototype.sqrt = function () {
	    return this.throwIfDisposed(), sqrt(this);
	  }, e.prototype.rsqrt = function () {
	    return this.throwIfDisposed(), rsqrt(this);
	  }, e.prototype.square = function () {
	    return this.throwIfDisposed(), square(this);
	  }, e.prototype.reciprocal = function () {
	    return this.throwIfDisposed(), reciprocal(this);
	  }, e.prototype.abs = function () {
	    return this.throwIfDisposed(), abs(this);
	  }, e.prototype.clipByValue = function (e, t) {
	    return this.throwIfDisposed(), clipByValue(this, e, t);
	  }, e.prototype.relu = function () {
	    return this.throwIfDisposed(), relu(this);
	  }, e.prototype.elu = function () {
	    return this.throwIfDisposed(), elu(this);
	  }, e.prototype.selu = function () {
	    return this.throwIfDisposed(), selu(this);
	  }, e.prototype.leakyRelu = function (e) {
	    return void 0 === e && (e = .2), this.throwIfDisposed(), leakyRelu(this, e);
	  }, e.prototype.prelu = function (e) {
	    return this.throwIfDisposed(), prelu(this, e);
	  }, e.prototype.sigmoid = function () {
	    return this.throwIfDisposed(), sigmoid(this);
	  }, e.prototype.logSigmoid = function () {
	    return this.throwIfDisposed(), logSigmoid(this);
	  }, e.prototype.softplus = function () {
	    return this.throwIfDisposed(), softplus(this);
	  }, e.prototype.sin = function () {
	    return this.throwIfDisposed(), sin(this);
	  }, e.prototype.cos = function () {
	    return this.throwIfDisposed(), cos(this);
	  }, e.prototype.tan = function () {
	    return this.throwIfDisposed(), tan(this);
	  }, e.prototype.asin = function () {
	    return this.throwIfDisposed(), asin(this);
	  }, e.prototype.acos = function () {
	    return this.throwIfDisposed(), acos(this);
	  }, e.prototype.atan = function () {
	    return this.throwIfDisposed(), atan(this);
	  }, e.prototype.sinh = function () {
	    return this.throwIfDisposed(), sinh(this);
	  }, e.prototype.cosh = function () {
	    return this.throwIfDisposed(), cosh(this);
	  }, e.prototype.tanh = function () {
	    return this.throwIfDisposed(), tanh$1(this);
	  }, e.prototype.asinh = function () {
	    return this.throwIfDisposed(), asinh(this);
	  }, e.prototype.acosh = function () {
	    return this.throwIfDisposed(), acosh(this);
	  }, e.prototype.atanh = function () {
	    return this.throwIfDisposed(), atanh(this);
	  }, e.prototype.erf = function () {
	    return this.throwIfDisposed(), erf(this);
	  }, e.prototype.round = function () {
	    return this.throwIfDisposed(), round(this);
	  }, e.prototype.step = function (e) {
	    return void 0 === e && (e = 0), this.throwIfDisposed(), step(this, e);
	  }, e.prototype.softmax = function (e) {
	    return void 0 === e && (e = -1), this.throwIfDisposed(), softmax(this, e);
	  }, e.prototype.resizeBilinear = function (e, t) {
	    return void 0 === t && (t = !1), this.throwIfDisposed(), image.resizeBilinear(this, e, t);
	  }, e.prototype.resizeNearestNeighbor = function (e, t) {
	    return void 0 === t && (t = !1), this.throwIfDisposed(), image.resizeNearestNeighbor(this, e, t);
	  }, e.prototype.conv1d = function (e, t, n, r, a, o) {
	    return void 0 === r && (r = "NWC"), void 0 === a && (a = 1), this.throwIfDisposed(), conv1d(this, e, t, n, r, a, o);
	  }, e.prototype.conv2d = function (e, t, n, r, a, o) {
	    return void 0 === r && (r = "NHWC"), void 0 === a && (a = [1, 1]), this.throwIfDisposed(), conv2d(this, e, t, n, r, a, o);
	  }, e.prototype.conv2dTranspose = function (e, t, n, r, a) {
	    return this.throwIfDisposed(), conv2dTranspose(this, e, t, n, r, a);
	  }, e.prototype.depthwiseConv2D = function (e, t, n, r, a, o) {
	    return void 0 === r && (r = "NHWC"), void 0 === a && (a = [1, 1]), this.throwIfDisposed(), depthwiseConv2d(this, e, t, n, r, a, o);
	  }, e.prototype.avgPool = function (e, t, n, r) {
	    return this.throwIfDisposed(), avgPool(this, e, t, n, r);
	  }, e.prototype.maxPool = function (e, t, n, r) {
	    return this.throwIfDisposed(), maxPool(this, e, t, n, r);
	  }, e.prototype.localResponseNormalization = function (e, t, n, r) {
	    return void 0 === e && (e = 5), void 0 === t && (t = 1), void 0 === n && (n = 1), void 0 === r && (r = .5), localResponseNormalization(this, e, t, n, r);
	  }, e.prototype.variable = function (e, t, n) {
	    return void 0 === e && (e = !0), this.throwIfDisposed(), Variable.variable(this, e, t, n);
	  }, e.prototype.unsortedSegmentSum = function (e, t) {
	    return this.throwIfDisposed(), unsortedSegmentSum(this, e, t);
	  }, e.nextId = 0, __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "flatten", null), __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "asScalar", null), __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "as1D", null), __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "as2D", null), __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "as3D", null), __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "as4D", null), __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "asType", null), __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "buffer", null), __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "data", null), __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "dataSync", null), __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "dispose", null), __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "toFloat", null), __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "toInt", null), __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "toBool", null), __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "print", null), __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "reshape", null), __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "reshapeAs", null), __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "expandDims", null), __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "cumsum", null), __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "squeeze", null), __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "clone", null), __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e.prototype, "toString", null), e = t = __decorate([doc({ heading: "Tensors", subheading: "Classes" })], e);var t;
	}(),
	    Variable = function (e) {
	  function t(t, r, a) {
	    void 0 === r && (r = !0);var o = e.call(this, t.shape, t.dtype, null, t.dataId) || this;return o.trainable = r, o.name = a, null == o.name && (o.name = n.nextVarId.toString(), n.nextVarId++), ENV.engine.registerVariable(o), o;
	  }return __extends(t, e), n = t, t.variable = function (e, t, r, a) {
	    return void 0 === t && (t = !0), null != a && a !== e.dtype && (e = e.asType(a)), new n(e, t, r);
	  }, t.prototype.assign = function (e) {
	    if (e.dtype !== this.dtype) throw new Error("dtype of the new value (" + e.dtype + ") and previous value (" + this.dtype + ") must match");if (!arraysEqual(e.shape, this.shape)) throw new Error("shape of the new value (" + e.shape + ") and previous value (" + this.shape + ") must match");ENV.engine.disposeTensor(this), this.dataId = e.dataId, ENV.engine.registerTensor(this);
	  }, t.nextVarId = 0, __decorate([doc({ heading: "Tensors", subheading: "Classes" })], t.prototype, "assign", null), __decorate([doc({ heading: "Tensors", subheading: "Creation" })], t, "variable", null), t = n = __decorate([doc({ heading: "Tensors", subheading: "Classes" })], t);var n;
	}(Tensor),
	    variable = Variable.variable;function computeStrides(e) {
	  var t = e.length;if (t < 2) return [];var n = new Array(t - 1);n[t - 2] = e[t - 1];for (var r = t - 3; r >= 0; --r) n[r] = n[r + 1] * e[r + 1];return n;
	}var Gradients = function () {
	  function e() {}return e.gradScope = function (e, t) {
	    return tidy(e, t, !0);
	  }, e.grad = function (e) {
	    return assert(isFunction(e), "The f passed in grad(f) must be a function"), function (t, n) {
	      return assert(t instanceof Tensor, "The x passed in grad(f)(x) must be a tensor"), assert(null == n || n instanceof Tensor, "The dy passed in grad(f)(x, dy) must be a tensor"), tidy(function () {
	        var r = ENV.engine.gradients(function () {
	          return e(t);
	        }, [t], n),
	            a = r.value,
	            o = r.grads;return null != n && assertShapesMatch(a.shape, n.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"), checkGrads(o), o[0];
	      });
	    };
	  }, e.grads = function (e) {
	    return assert(isFunction(e), "The f passed in grads(f) must be a function"), function (t, n) {
	      return assert(Array.isArray(t) && t.every(function (e) {
	        return e instanceof Tensor;
	      }), "The args passed in grads(f)(args) must be an array of tensors"), assert(null == n || n instanceof Tensor, "The dy passed in grads(f)(args, dy) must be a tensor"), tidy(function () {
	        var r = ENV.engine.gradients(function () {
	          return e.apply(void 0, t);
	        }, t, n),
	            a = r.value,
	            o = r.grads;return null != n && assertShapesMatch(a.shape, n.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), checkGrads(o), o;
	      });
	    };
	  }, e.valueAndGrad = function (e) {
	    return assert(isFunction(e), "The f passed in valueAndGrad(f) must be a function"), function (t, n) {
	      assert(t instanceof Tensor, "The x passed in valueAndGrad(f)(x) must be a tensor"), assert(null == n || n instanceof Tensor, "The dy passed in valueAndGrad(f)(x, dy) must be a tensor");var r = ENV.engine.gradients(function () {
	        return e(t);
	      }, [t], n),
	          a = r.grads,
	          o = r.value;return checkGrads(a), { grad: a[0], value: o };
	    };
	  }, e.valueAndGrads = function (e) {
	    return assert(isFunction(e), "The f passed in valueAndGrads(f) must be a function"), function (t, n) {
	      assert(Array.isArray(t) && t.every(function (e) {
	        return e instanceof Tensor;
	      }), "The args passed in valueAndGrads(f)(args) must be array of tensors"), assert(null == n || n instanceof Tensor, "The dy passed in valueAndGrads(f)(args, dy) must be a tensor");var r = ENV.engine.gradients(function () {
	        return e.apply(void 0, t);
	      }, t, n);return null != n && assertShapesMatch(r.value.shape, n.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), checkGrads(r.grads), r;
	    };
	  }, e.variableGrads = function (e, t) {
	    if (assert(isFunction(e), "The f passed in variableGrads(f) must be a function"), assert(null == t || Array.isArray(t) && t.every(function (e) {
	      return e instanceof Variable;
	    }), "The varList passed in variableGrads(f, varList) must be an array of variables"), null == t) for (var n in t = [], ENV.engine.registeredVariables) t.push(ENV.engine.registeredVariables[n]);var r = t.length;assert((t = t.filter(function (e) {
	      return e.trainable;
	    })).length > 0, "variableGrads() expects at least one of the input variables to be trainable, but none of the " + r + " variables is trainable.");var a = ENV.engine.gradients(e, t, null, !0),
	        o = a.value,
	        i = a.grads;assert(i.some(function (e) {
	      return null != e;
	    }), "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."), assert(0 === o.rank, "The f passed in variableGrads(f) must return a scalar, but it returned a rank-" + o.rank + " tensor");var s = {};return t.forEach(function (e, t) {
	      null != i[t] && (s[e.name] = i[t]);
	    }), { value: o, grads: s };
	  }, e.customGrad = function (e) {
	    return ENV.engine.customGrad(e);
	  }, __decorate([doc({ heading: "Training", subheading: "Gradients" })], e, "grad", null), __decorate([doc({ heading: "Training", subheading: "Gradients" })], e, "grads", null), __decorate([doc({ heading: "Training", subheading: "Gradients" })], e, "valueAndGrad", null), __decorate([doc({ heading: "Training", subheading: "Gradients" })], e, "valueAndGrads", null), __decorate([doc({ heading: "Training", subheading: "Gradients" })], e, "variableGrads", null), __decorate([doc({ heading: "Training", subheading: "Gradients" })], e, "customGrad", null), e;
	}();function checkGrads(e) {
	  if (e.filter(function (e) {
	    return null == e;
	  }).length > 0) throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.");
	}var tidy = Tracking.tidy,
	    keep = Tracking.keep,
	    dispose = Tracking.dispose,
	    time = Tracking.time,
	    grad = Gradients.grad,
	    valueAndGrad = Gradients.valueAndGrad,
	    grads = Gradients.grads,
	    valueAndGrads = Gradients.valueAndGrads,
	    variableGrads = Gradients.variableGrads,
	    customGrad = Gradients.customGrad,
	    Profiler = function () {
	  function e(e, t) {
	    this.backendTimer = e, this.logger = t, null == t && (this.logger = new Logger());
	  }return e.prototype.profileKernel = function (e, t) {
	    var n,
	        r = this,
	        a = this.backendTimer.time(function () {
	      n = t();
	    }),
	        o = n.dataSync();return checkForNaN(o, n.dtype, e), a.then(function (t) {
	      r.logger.logKernelProfile(e, n, o, t.kernelMs);
	    }), n;
	  }, e;
	}(),
	    Logger = function () {
	  function e() {}return e.prototype.logKernelProfile = function (e, t, n, r) {
	    var a = rightPad(r + "ms", 9),
	        o = rightPad(e, 25),
	        i = t.rank,
	        s = t.size,
	        u = rightPad(t.shape.toString(), 14);console.log("%c" + o + "\t%c" + a + "\t%c" + i + "D " + u + "\t%c" + s, "font-weight:bold", "color:red", "color:blue", "color: orange");
	  }, e;
	}();function getFilteredNodesXToY(e, t, n) {
	  for (var r = {}, a = {}, o = 0; o < t.length; o++) r[t[o].id] = !0;for (o = 0; o < e.length; o++) {
	    var i = (g = e[o]).inputs;for (var s in i) {
	      for (var u = i[s], l = !1, c = 0; c < t.length; c++) if (r[u.id]) {
	        r[g.output.id] = !0, l = !0, a[g.id] = !0;break;
	      }if (l) break;
	    }
	  }var d = {};d[n.id] = !0;var p = {};for (o = e.length - 1; o >= 0; o--) {
	    i = (g = e[o]).inputs;var h = [];h.push(g.output);for (c = 0; c < h.length; c++) if (d[h[c].id]) {
	      for (var s in i) d[i[s].id] = !0, p[g.id] = !0;break;
	    }
	  }var f = [];for (o = 0; o < e.length; o++) {
	    var g;if (a[(g = e[o]).id] && p[g.id]) {
	      var m = {};for (var s in g.inputs) {
	        var v = g.inputs[s];r[v.id] && (m[s] = v);
	      }var y = Object.assign({}, g);y.inputs = m, y.output = g.output, f.push(y);
	    }
	  }return f;
	}function backpropagateGradients(e, t) {
	  for (var n = t.length - 1; n >= 0; n--) {
	    var r = t[n],
	        a = e[r.output.id];if (null == r.gradient) throw new Error("Cannot compute gradient: gradient function not found for " + r.name + ".");var o = r.gradient(a);for (var i in r.inputs) {
	      if (!(i in o)) throw new Error("Cannot backprop through input " + i + ". Available gradients found: " + Object.keys(o) + ".");var s = o[i](),
	          u = r.inputs[i];if (!arraysEqual(s.shape, u.shape)) throw new Error("Error in gradient for op " + r.name + ". The gradient of input '" + i + "' has shape '" + s.shape + "', which does not match the shape of the input '" + u.shape + "'");if (null == e[u.id]) e[u.id] = s;else {
	        var l = e[u.id];e[u.id] = l.add(s), l.dispose();
	      }
	    }
	  }
	}var Type,
	    Engine = function () {
	  function e(e, t) {
	    this.backend = e, this.safeMode = t, this.registeredVariables = {}, this.refCounter = new WeakMap(), this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numDataBuffers = 0, this.gradientScopeCount = 0, this.customGradientDepth = 0, this.keepTensors = new Set(), this.activeScope = { track: [] }, this.scopeStack = [this.activeScope], this.profiler = new Profiler(e);
	  }return e.prototype.runKernel = function (e, t, n) {
	    var r,
	        a = this,
	        o = [],
	        i = function (e) {
	      return o.push(e), e;
	    },
	        s = this.activeScope.name;if (this.customGradientDepth++, r = ENV.get("DEBUG") ? this.profiler.profileKernel(s, function () {
	      return e(a.backend, i);
	    }) : e(this.backend, i), this.customGradientDepth--, this.shouldRecord()) {
	      var u = { id: this.nextTapeNodeId++, name: s, inputs: t, output: r };null != n && (u.gradient = function (e) {
	        return n(e, o);
	      }), this.activeTape.push(u);
	    }return r;
	  }, e.prototype.registerTensor = function (e) {
	    var t = this.refCounter.has(e.dataId) ? this.refCounter.get(e.dataId) : 0;this.numTensors++, 0 === t && (this.numDataBuffers++, this.numBytes += sizeFromShape(e.shape) * bytesPerElement(e.dtype), this.backend.register(e.dataId, e.shape, e.dtype)), this.refCounter.set(e.dataId, t + 1), e instanceof Variable || this.track(e);
	  }, e.prototype.registerVariable = function (e) {
	    if (null != this.registeredVariables[e.name]) throw new Error("Variable with name " + e.name + " was already registered");this.registeredVariables[e.name] = e;
	  }, e.prototype.disposeTensor = function (e) {
	    if (this.refCounter.has(e.dataId)) {
	      this.keepTensors.has(e.id) && this.keepTensors.delete(e.id), this.numTensors--;var t = this.refCounter.get(e.dataId);t <= 1 ? (this.refCounter.delete(e.dataId), this.backend.disposeData(e.dataId), this.numDataBuffers--, this.numBytes -= sizeFromShape(e.shape) * bytesPerElement(e.dtype)) : this.refCounter.set(e.dataId, t - 1);
	    }
	  }, e.prototype.disposeVariables = function () {
	    for (var e in this.registeredVariables) {
	      var t = this.registeredVariables[e];this.disposeTensor(t), delete this.registeredVariables[e];
	    }
	  }, e.prototype.memory = function () {
	    var e = this.backend.memory();return e.numTensors = this.numTensors, e.numDataBuffers = this.numDataBuffers, e.numBytes = this.numBytes, e;
	  }, e.prototype.shouldRecord = function () {
	    return null != this.activeTape && 0 === this.customGradientDepth;
	  }, e.prototype.addTapeNode = function (e, t, n) {
	    var r = {};e.forEach(function (e, t) {
	      r[t] = e;
	    });var a = { id: this.nextTapeNodeId++, name: this.activeScope.name, inputs: r, output: t, gradient: function (e) {
	        var t = {};return n(e).forEach(function (e, n) {
	          t[n] = function () {
	            return e;
	          };
	        }), t;
	      } };this.activeTape.push(a);
	  }, e.prototype.keep = function (e) {
	    if (1 === this.scopeStack.length && ENV.engine.safeMode) throw new Error("Safe mode is ON. Enclose all tensor operations inside tf.tidy(): tf.tidy(() => {...}) to avoid memory leaks.");return this.keepTensors.add(e.id), e;
	  }, e.prototype.startScope = function (e, t) {
	    void 0 === t && (t = !1), t && 0 === this.gradientScopeCount && (this.activeTape = []), t && this.gradientScopeCount++;var n = { track: [] };e && (n.name = e), this.scopeStack.push(n), this.activeScope = n;
	  }, e.prototype.endScope = function (e, t) {
	    var n = this;void 0 === t && (t = !1), t && (this.gradientScopeCount--, 0 === this.gradientScopeCount && (this.activeTape = null));var r = new Set(this.keepTensors),
	        a = getTensorsInContainer(e);a.forEach(function (e) {
	      return r.add(e.id);
	    });for (var o = 0; o < this.activeScope.track.length; o++) {
	      var i = this.activeScope.track[o];r.has(i.id) || (null != this.activeTape ? a.push(i) : i.dispose());
	    }var s = this.scopeStack.pop();this.activeScope = 0 === this.scopeStack.length ? { track: [] } : this.scopeStack[this.scopeStack.length - 1], a.forEach(function (e) {
	      !n.keepTensors.has(e.id) && isTensorInList(e, s.track) && n.track(e);
	    });
	  }, e.prototype.gradients = function (e, t, n, r) {
	    var a = this;return void 0 === r && (r = !1), assert(t.length > 0, "gradients() received an empty list of xs."), tidy("gradients", function () {
	      var o = e();assert(o instanceof Tensor, "The result y returned by f() must be a tensor.");var i = getFilteredNodesXToY(a.activeTape, t, o);if (!r && 0 === i.length && t.length > 0) throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");var s = {};return s[o.id] = null == n ? ones(o.shape) : n, backpropagateGradients(s, i), { value: o, grads: t.map(function (e) {
	          return s[e.id];
	        }) };
	    }, !0);
	  }, e.prototype.customGrad = function (e) {
	    var t = this;return assert(isFunction(e), "The f passed in customGrad(f) must be a function."), function () {
	      for (var n, r = [], a = 0; a < arguments.length; a++) r[a] = arguments[a];assert(r.every(function (e) {
	        return e instanceof Tensor;
	      }), "The args passed in customGrad(f)(x1, x2,...) must all be tensors"), t.customGradientDepth++;var o = tidy(e.name, function () {
	        var t = e.apply(void 0, r),
	            a = t.value,
	            o = t.gradFunc;return assert(a instanceof Tensor, "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"), assert(isFunction(o), "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."), n = o, a;
	      }, !0);if (t.customGradientDepth--, t.shouldRecord()) {
	        t.addTapeNode(r, o, function (e) {
	          var t = n(e),
	              a = Array.isArray(t) ? t : [t];return assert(a.length === r.length, "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."), assert(a.every(function (e) {
	            return e instanceof Tensor;
	          }), "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."), a;
	        });
	      }return o;
	    };
	  }, e.prototype.write = function (e, t) {
	    this.backend.write(e, t);
	  }, e.prototype.readSync = function (e) {
	    return this.backend.readSync(e);
	  }, e.prototype.read = function (e) {
	    return this.backend.read(e);
	  }, e.prototype.fromPixels = function (e, t) {
	    return this.backend.fromPixels(e, t);
	  }, e.prototype.time = function (e) {
	    return __awaiter(this, void 0, void 0, function () {
	      var t, n;return __generator(this, function (r) {
	        switch (r.label) {case 0:
	            return t = performance.now(), [4, this.backend.time(e)];case 1:
	            return (n = r.sent()).wallMs = performance.now() - t, [2, n];}
	      });
	    });
	  }, e.prototype.track = function (e) {
	    if (1 === this.scopeStack.length && this.safeMode) throw new Error("Safe mode is ON. Enclose all tensor operations inside tf.tidy(): tf.tidy(() => {op();...}); to avoid memory leaks.");return this.activeScope.track.push(e), e;
	  }, e;
	}();!function (e) {
	  e[e.NUMBER = 0] = "NUMBER", e[e.BOOLEAN = 1] = "BOOLEAN", e[e.STRING = 2] = "STRING";
	}(Type || (Type = {}));var URL_PROPERTIES = [{ name: "DEBUG", type: Type.BOOLEAN }, { name: "IS_BROWSER", type: Type.BOOLEAN }, { name: "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", type: Type.NUMBER }, { name: "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", type: Type.BOOLEAN }, { name: "WEBGL_VERSION", type: Type.NUMBER }, { name: "WEBGL_RENDER_FLOAT32_ENABLED", type: Type.BOOLEAN }, { name: "WEBGL_DOWNLOAD_FLOAT_ENABLED", type: Type.BOOLEAN }, { name: "WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED", type: Type.BOOLEAN }, { name: "BACKEND", type: Type.STRING }],
	    TEST_EPSILON_FLOAT32_ENABLED = .001,
	    TEST_EPSILON_FLOAT32_DISABLED = .1;function hasExtension(e, t) {
	  return null != e.getExtension(t);
	}function getWebGLRenderingContext(e) {
	  if (0 === e || !ENV.get("IS_BROWSER")) throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");var t = document.createElement("canvas");return 1 === e ? t.getContext("webgl") || t.getContext("experimental-webgl") : t.getContext("webgl2");
	}function loseContext(e) {
	  if (null != e) {
	    var t = e.getExtension("WEBGL_lose_context");if (null == t) throw new Error("Extension WEBGL_lose_context not supported on this browser.");t.loseContext();
	  }
	}function isWebGLVersionEnabled(e) {
	  var t;try {
	    t = getWebGLRenderingContext(e);
	  } catch (e) {
	    return !1;
	  }return null != t && (loseContext(t), !0);
	}function getWebGLDisjointQueryTimerVersion(e) {
	  if (0 === e) return 0;var t,
	      n = getWebGLRenderingContext(e);return t = hasExtension(n, "EXT_disjoint_timer_query_webgl2") && 2 === e ? 2 : hasExtension(n, "EXT_disjoint_timer_query") ? 1 : 0, null != n && loseContext(n), t;
	}function createFloatTextureAndBindToFramebuffer(e, t) {
	  var n = e.createFramebuffer(),
	      r = e.createTexture();e.bindTexture(e.TEXTURE_2D, r);var a = 2 === t ? e.RGBA32F : e.RGBA;e.texImage2D(e.TEXTURE_2D, 0, a, 1, 1, 0, e.RGBA, e.FLOAT, null), e.bindFramebuffer(e.FRAMEBUFFER, n), e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, r, 0);
	}function isRenderToFloatTextureEnabled(e) {
	  if (0 === e) return !1;var t = getWebGLRenderingContext(e);if (1 === e) {
	    if (!hasExtension(t, "OES_texture_float")) return !1;
	  } else if (!hasExtension(t, "EXT_color_buffer_float")) return !1;createFloatTextureAndBindToFramebuffer(t, e);var n = t.checkFramebufferStatus(t.FRAMEBUFFER) === t.FRAMEBUFFER_COMPLETE;return loseContext(t), n;
	}function isDownloadFloatTextureEnabled(e) {
	  if (0 === e) return !1;var t = getWebGLRenderingContext(e);if (1 === e) {
	    if (!hasExtension(t, "OES_texture_float")) return !1;
	  } else if (!hasExtension(t, "EXT_color_buffer_float")) return !1;createFloatTextureAndBindToFramebuffer(t, e), t.readPixels(0, 0, 1, 1, t.RGBA, t.FLOAT, new Float32Array(4));var n = t.getError() === t.NO_ERROR;return loseContext(t), n;
	}function isWebGLGetBufferSubDataAsyncExtensionEnabled(e) {
	  if (e > 0) return !1;if (2 !== e) return !1;var t = getWebGLRenderingContext(e),
	      n = hasExtension(t, "WEBGL_get_buffer_sub_data_async");return loseContext(t), n;
	}function isChrome() {
	  return null != navigator && null != navigator.userAgent && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
	}var Environment = function () {
	  function e(e) {
	    this.features = {}, this.registry = {}, null != e && (this.features = e), this.get("DEBUG") && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
	  }return e.setBackend = function (e, t) {
	    if (void 0 === t && (t = !1), !(e in ENV.registry)) throw new Error("Backend type '" + e + "' not found in registry");ENV.initBackend(e, t);
	  }, e.getBackend = function () {
	    return ENV.initDefaultBackend(), ENV.currentBackend;
	  }, e.disposeVariables = function () {
	    ENV.engine.disposeVariables();
	  }, e.memory = function () {
	    return ENV.engine.memory();
	  }, e.prototype.get = function (e) {
	    return e in this.features ? this.features[e] : (this.features[e] = this.evaluateFeature(e), this.features[e]);
	  }, e.prototype.getFeatures = function () {
	    return this.features;
	  }, e.prototype.set = function (e, t) {
	    this.features[e] = t;
	  }, e.prototype.getBestBackendType = function () {
	    var e = this;if (0 === Object.keys(this.registry).length) throw new Error("No backend found in registry.");return Object.keys(this.registry).map(function (t) {
	      return { name: t, entry: e.registry[t] };
	    }).sort(function (e, t) {
	      return t.entry.priority - e.entry.priority;
	    })[0].name;
	  }, e.prototype.evaluateFeature = function (e) {
	    if ("DEBUG" === e) return !1;if ("IS_BROWSER" === e) return "undefined" != typeof window;if ("IS_NODE" === e) return "undefined" != typeof process && void 0 !== process.versions.node;if ("IS_CHROME" === e) return isChrome();if ("BACKEND" === e) return this.getBestBackendType();if ("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION" === e) {
	      var t = this.get("WEBGL_VERSION");return 0 === t ? 0 : getWebGLDisjointQueryTimerVersion(t);
	    }if ("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE" === e) return this.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && !isMobile();if ("WEBGL_VERSION" === e) return isWebGLVersionEnabled(2) ? 2 : isWebGLVersionEnabled(1) ? 1 : 0;if ("WEBGL_RENDER_FLOAT32_ENABLED" === e) return isRenderToFloatTextureEnabled(this.get("WEBGL_VERSION"));if ("WEBGL_DOWNLOAD_FLOAT_ENABLED" === e) return isDownloadFloatTextureEnabled(this.get("WEBGL_VERSION"));if ("WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED" === e) return isWebGLGetBufferSubDataAsyncExtensionEnabled(this.get("WEBGL_VERSION"));if ("TEST_EPSILON" === e) return this.get("WEBGL_RENDER_FLOAT32_ENABLED") ? TEST_EPSILON_FLOAT32_ENABLED : TEST_EPSILON_FLOAT32_DISABLED;throw new Error("Unknown feature " + e + ".");
	  }, e.prototype.setFeatures = function (e) {
	    this.features = e;
	  }, e.prototype.reset = function () {
	    this.features = getFeaturesFromURL(), null != this.globalEngine && (this.globalEngine = null);
	  }, e.prototype.initBackend = function (e, t) {
	    void 0 === t && (t = !1), this.currentBackend = e;var n = ENV.findBackend(e);this.globalEngine = new Engine(n, t);
	  }, e.prototype.findBackend = function (e) {
	    return e in this.registry ? this.registry[e].backend : null;
	  }, e.prototype.registerBackend = function (e, t, n) {
	    void 0 === n && (n = 1), e in this.registry && console.warn(e + " backend was already registered");try {
	      var r = t();return this.registry[e] = { backend: r, priority: n }, !0;
	    } catch (t) {
	      return console.warn("Registration of backend " + e + " failed"), console.warn(t.stack || t.message), !1;
	    }
	  }, e.prototype.removeBackend = function (e) {
	    if (!(e in this.registry)) throw new Error(e + " backend not found in registry");this.registry[e].backend.dispose(), delete this.registry[e];
	  }, Object.defineProperty(e.prototype, "engine", { get: function () {
	      return this.initDefaultBackend(), this.globalEngine;
	    }, enumerable: !0, configurable: !0 }), e.prototype.initDefaultBackend = function () {
	    null == this.globalEngine && this.initBackend(ENV.get("BACKEND"), !1);
	  }, __decorate([doc({ heading: "Environment" })], e, "setBackend", null), __decorate([doc({ heading: "Environment" })], e, "getBackend", null), __decorate([doc({ heading: "Environment" })], e, "disposeVariables", null), __decorate([doc({ heading: "Performance", subheading: "Memory" })], e, "memory", null), e;
	}(),
	    TENSORFLOWJS_FLAGS_PREFIX = "tfjsflags";function getFeaturesFromURL() {
	  var e = {};if ("undefined" == typeof window || void 0 === window.location) return e;var t = getQueryParams(window.location.search);if (TENSORFLOWJS_FLAGS_PREFIX in t) {
	    var n = {};t[TENSORFLOWJS_FLAGS_PREFIX].split(",").forEach(function (e) {
	      var t = e.split(":"),
	          r = t[0],
	          a = t[1];n[r] = a;
	    }), URL_PROPERTIES.forEach(function (t) {
	      t.name in n && (console.log("Setting feature override from URL " + t.name + ": " + n[t.name]), t.type === Type.NUMBER ? e[t.name] = +n[t.name] : t.type === Type.BOOLEAN ? e[t.name] = "true" === n[t.name] : t.type === Type.STRING ? e[t.name] = n[t.name] : console.warn("Unknown URL param: " + t.name + "."));
	    });
	  }return e;
	}function getGlobalNamespace() {
	  var e;if ("undefined" != typeof window) e = window;else {
	    if ("undefined" == typeof global) throw new Error("Could not find a global object");e = global;
	  }return e;
	}function getOrMakeEnvironment() {
	  var e = getGlobalNamespace();return e.ENV = e.ENV || new Environment(getFeaturesFromURL()), e.ENV;
	}var ENV = getOrMakeEnvironment(),
	    environment = Object.freeze({ get Type() {
	    return Type;
	  }, URL_PROPERTIES: URL_PROPERTIES, Environment: Environment, ENV: ENV }),
	    PARALLELIZE_THRESHOLD = 30;function computeOptimalWindowSize(e) {
	  return e <= PARALLELIZE_THRESHOLD ? e : nearestDivisor(e, Math.floor(Math.sqrt(e)));
	}function segOpComputeOptimalWindowSize(e, t) {
	  var n,
	      r = !1;for (e <= PARALLELIZE_THRESHOLD ? (n = e, r = !0) : n = nearestDivisor(e, Math.floor(Math.sqrt(e))); !r;) {
	    if (n > t || n === e) {
	      r = !0;break;
	    }n = nearestDivisor(e, n + 1);
	  }return n;
	}function computeOutShape$1(e, t, n) {
	  for (var r = [], a = e.length, o = 0; o < a; o++) o !== t ? r.push(e[o]) : r.push(n);return r;
	}function castTensor(e, t, n) {
	  if (!hasEncodingLoss(e.dtype, t)) return Tensor.make(e.shape, { dataId: e.dataId }, t);if ("int32" === t) return n.int(e);if ("bool" === t) return n.notEqual(e, ArrayOps.scalar(0, e.dtype));throw new Error("Error in Cast: unknown dtype argument (" + t + ")");
	}function reshapeTensor(e, t) {
	  return Tensor.make(t, { dataId: e.dataId }, e.dtype);
	}var ArgMinMaxProgram = function () {
	  return function (e, t, n) {
	    this.variableNames = ["A"];var r = e.windowSize,
	        a = e.batchSize,
	        o = e.inSize,
	        i = Math.ceil(o / r);n || this.variableNames.push("bestIndicesA"), this.outputShape = [a, i];var s = "max" === t ? ">" : "<",
	        u = n ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + r + ";\n\n        int bestIndex = 0;\n        float bestValue = getA(batch, inOffset);\n\n        for (int i = 0; i < " + r + "; i++) {\n          int inIdx = " + u + ";\n          float candidate = getA(batch, inIdx);\n          if (candidate " + s + " bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    ";
	  };
	}(),
	    AvgPool2DBackpropProgram = function () {
	  return function (e) {
	    this.variableNames = ["dy"], this.outputShape = e.inShape;var t = e.filterHeight,
	        n = e.filterWidth,
	        r = e.strideHeight,
	        a = e.strideWidth,
	        o = t - 1 - e.padInfo.top,
	        i = n - 1 - e.padInfo.left,
	        s = 1 / (t * n);this.userCode = "\n      const ivec2 pads = ivec2(" + o + ", " + i + ");\n      const float avgMultiplier = float(" + s + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + t + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + r + ".0;\n\n          if (dyR < 0.0 || dyR >= " + e.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + n + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + a + ".0;\n\n            if (dyC < 0.0 || dyC >= " + e.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
	  };
	}(),
	    BatchNormProgram = function () {
	  return function (e, t, n, r, a, o) {
	    this.outputShape = [], this.supportsBroadcasting = !0, this.variableNames = ["x", "mean", "variance"], assertAndGetBroadcastShape(e, t), assertAndGetBroadcastShape(e, n);var i = "0.0";null != r && (assertAndGetBroadcastShape(e, r), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()");var s = "1.0";null != a && (assertAndGetBroadcastShape(e, a), this.variableNames.push("scale"), s = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = "\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = " + i + ";\n        float scale = " + s + ";\n        float inv = scale * inversesqrt(variance + float(" + o + "));\n        setOutput((x - mean) * inv + offset);\n      }\n    ";
	  };
	}(),
	    CHECK_NAN_SNIPPET = "\n  if (isNaN(a)) return a;\n  if (isNaN(b)) return b;\n",
	    ADD = "return a + b;",
	    SUB = "return a - b;",
	    MUL = "return a * b;",
	    DIV = "return a / b;",
	    INT_DIV = "\n  float resultSign = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  int result = ia / ib;\n  int amodb = ia - ib * result;\n\n  if (resultSign < 0.0 && amodb != 0) {\n    result -= 1;\n  }\n  return float(result);\n",
	    POW = "\n  return (round(mod(b, 2.0)) == 0 || round(mod(b, 2.0)) == 2) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",
	    SQUARED_DIFFERENCE = "return (a - b) * (a - b);",
	    EQUAL = "return float(a == b);",
	    NOT_EQUAL = "return float(a != b);",
	    LESS = "return float(a < b);",
	    LESS_EQUAL = "return float(a <= b);",
	    GREATER = "return float(a > b);",
	    GREATER_EQUAL = "return float(a >= b);",
	    LOGICAL_AND = "return float(a >= 1.0 && b >= 1.0);",
	    LOGICAL_OR = "return float(a >= 1.0 || b >= 1.0);",
	    MAX = CHECK_NAN_SNIPPET + "\n  return max(a, b);\n",
	    MIN = CHECK_NAN_SNIPPET + "\n  return min(a, b);\n",
	    MOD = "return mod(a, b);",
	    ATAN2 = CHECK_NAN_SNIPPET + "\n  return atan(a, b);\n",
	    ELU_DER = "return (b >= 1.0) ? a : a * (b + 1.0);",
	    BinaryOpProgram = function () {
	  return function (e, t, n) {
	    this.variableNames = ["A", "B"], this.supportsBroadcasting = !0, this.outputShape = assertAndGetBroadcastShape(t, n), this.userCode = "\n      float binaryOperation(float a, float b) {\n        " + e + "\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    ";
	  };
	}(),
	    ClipProgram = function () {
	  return function (e, t, n) {
	    this.variableNames = ["A"], this.outputShape = e;var r = t.toFixed(20),
	        a = n.toFixed(20);this.userCode = "\n      void main() {\n        float value = getAAtOutCoords();\n        if (isNaN(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, " + r + ", " + a + "));\n      }\n    ";
	  };
	}(),
	    ConcatProgram = function () {
	  return function (e, t) {
	    this.variableNames = ["A", "B"], this.outputShape = [], this.outputShape = computeOutShape(e, t, 1), this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        float value = 0.0;\n        if (yC < " + e[1] + ") {\n          value = getA(yR, yC);\n        } else {\n          yC -= " + e[1] + ";\n          value = getB(yR, yC);\n        }\n\n        setOutput(value);\n      }\n    ";
	  };
	}(),
	    Conv2DDerFilterProgram = function () {
	  return function (e) {
	    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;var t = e.strideHeight,
	        n = e.strideWidth,
	        r = e.padInfo.top,
	        a = e.padInfo.left;this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " + e.batchSize + "; b++) {\n          for (int yR = 0; yR < " + e.outHeight + "; yR++) {\n            int xR = wR + yR * " + t + " - " + r + ";\n\n            if (xR < 0 || xR >= " + e.inHeight + ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " + e.outWidth + "; yC++) {\n              int xC = wC + yC * " + n + " - " + a + ";\n\n              if (xC < 0 || xC >= " + e.inWidth + ") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
	  };
	}(),
	    Conv2DDerInputProgram = function () {
	  return function (e) {
	    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;var t = e.filterHeight,
	        n = e.filterWidth,
	        r = e.strideHeight,
	        a = e.strideWidth,
	        o = t - 1 - e.padInfo.top,
	        i = n - 1 - e.padInfo.left;this.userCode = "\n      const ivec2 pads = ivec2(" + o + ", " + i + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + t + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + r + ".0;\n\n          if (dyR < 0.0 || dyR >= " + e.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " + t + " - 1 - wR;\n\n          for (int wC = 0; wC < " + n + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + a + ".0;\n\n            if (dyC < 0.0 || dyC >= " + e.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " + n + " - 1 - wC;\n\n            for (int d2 = 0; d2 < " + e.outChannels + "; d2++) {\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, d2);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
	  };
	}(),
	    DepthwiseConv2DDerFilterProgram = function () {
	  return function (e) {
	    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;var t = e.strideHeight,
	        n = e.strideWidth,
	        r = e.padInfo.top,
	        a = e.padInfo.left,
	        o = e.outChannels / e.inChannels;this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * " + o + " + dm;\n\n        float dotProd = 0.0;\n\n        // TODO: Vec4 over the batch size\n        for (int b = 0; b < " + e.batchSize + "; b++) {\n          for (int yR = 0; yR < " + e.outHeight + "; yR++) {\n            int xR = wR + yR * " + t + " - " + r + ";\n\n            if (xR < 0 || xR >= " + e.inHeight + ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " + e.outWidth + "; yC++) {\n              int xC = wC + yC * " + n + " - " + a + ";\n\n              if (xC < 0 || xC >= " + e.inWidth + ") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
	  };
	}(),
	    DepthwiseConv2DDerInputProgram = function () {
	  return function (e) {
	    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;var t = e.filterHeight,
	        n = e.filterWidth,
	        r = e.strideHeight,
	        a = e.strideWidth,
	        o = t - 1 - e.padInfo.top,
	        i = n - 1 - e.padInfo.left,
	        s = e.outChannels / e.inChannels;this.userCode = "\n      const ivec2 pads = ivec2(" + o + ", " + i + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < " + t + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + r + ".0;\n\n          if (dyR < 0.0 || dyR >= " + e.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " + t + " - 1 - wR;\n\n          for (int wC = 0; wC < " + n + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + a + ".0;\n\n            if (dyC < 0.0 || dyC >= " + e.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " + n + " - 1 - wC;\n\n            // TODO: Vec4 over the channelMul\n            for (int dm = 0; dm < " + s + "; dm++) {\n              int d2 = d1 * " + s + " + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
	  };
	}(),
	    Conv2DProgram = function () {
	  return function (e) {
	    this.variableNames = ["x", "W"], this.outputShape = e.outShape;var t = e.padInfo.top,
	        n = e.padInfo.left,
	        r = e.strideHeight,
	        a = e.strideWidth,
	        o = e.dilationHeight,
	        i = e.dilationWidth,
	        s = e.filterHeight,
	        u = e.filterWidth,
	        l = 4 * Math.floor(e.inChannels / 4),
	        c = e.inChannels % 4;this.userCode = "\n      const ivec2 strides = ivec2(" + r + ", " + a + ");\n      const ivec2 pads = ivec2(" + t + ", " + n + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + s + "; wR++) {\n          int xR = xRCorner + wR * " + o + ";\n\n          if (xR < 0 || xR >= " + e.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + u + "; wC++) {\n            int xC = xCCorner + wC * " + i + ";\n\n            if (xC < 0 || xC >= " + e.inWidth + ") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < " + l + "; d1 += 4) {\n              vec4 xValues = vec4(\n                getX(batch, xR, xC, d1),\n                getX(batch, xR, xC, d1 + 1),\n                getX(batch, xR, xC, d1 + 2),\n                getX(batch, xR, xC, d1 + 3)\n              );\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              dotProd += dot(xValues, wValues);\n            }\n\n            if (" + (1 === c) + ") {\n              dotProd +=\n                getX(batch, xR, xC, " + l + ") *\n                getW(wR, wC, " + l + ", d2);\n            } else if (" + (2 === c) + ") {\n              vec2 xValues = vec2(\n                getX(batch, xR, xC, " + l + "),\n                getX(batch, xR, xC, " + l + " + 1)\n              );\n              vec2 wValues = vec2(\n                getW(wR, wC, " + l + ", d2),\n                getW(wR, wC, " + l + " + 1, d2)\n              );\n              dotProd += dot(xValues, wValues);\n            } else if (" + (3 === c) + ") {\n              vec3 xValues = vec3(\n                getX(batch, xR, xC, " + l + "),\n                getX(batch, xR, xC, " + l + " + 1),\n                getX(batch, xR, xC, " + l + " + 2)\n              );\n              vec3 wValues = vec3(\n                getW(wR, wC, " + l + ", d2),\n                getW(wR, wC, " + l + " + 1, d2),\n                getW(wR, wC, " + l + " + 2, d2)\n              );\n              dotProd += dot(xValues, wValues);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
	  };
	}(),
	    DepthwiseConv2DProgram = function () {
	  return function (e) {
	    this.variableNames = ["x", "W"], this.outputShape = e.outShape;var t = e.inHeight,
	        n = e.inWidth,
	        r = e.padInfo.top,
	        a = e.padInfo.left,
	        o = e.strideHeight,
	        i = e.strideWidth,
	        s = e.dilationHeight,
	        u = e.dilationWidth,
	        l = e.filterHeight,
	        c = e.filterWidth,
	        d = e.outChannels / e.inChannels;this.userCode = "\n      const ivec2 strides = ivec2(" + o + ", " + i + ");\n      const ivec2 pads = ivec2(" + r + ", " + a + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / " + d + ";\n        int q = d2 - d1 * " + d + ";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TODO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < " + l + "; wR++) {\n          int xR = xRCorner + wR * " + s + ";\n\n          if (xR < 0 || xR >= " + t + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + c + "; wC++) {\n            int xC = xCCorner + wC * " + u + ";\n\n            if (xC < 0 || xC >= " + n + ") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
	  };
	}();function makeShader(e, t, n, r) {
	  var a = e.map(function (e) {
	    var t = sizeFromShape(e.shapeInfo.logicalShape);return e.shapeInfo.isUniform ? "uniform float " + e.name + (t > 1 ? "[" + t + "]" : "") + ";" : "uniform sampler2D " + e.name + ";";
	  });a = a.join("\n");var o = e.map(function (e) {
	    return getInputSamplingSnippet(e, t, r);
	  }).join("\n"),
	      i = t.texShape,
	      s = getOutputSamplingSnippet(t.logicalShape, i);return [SHADER_PREFIX, FLOAT_TEXTURE_SAMPLE_SNIPPET, FLOAT_TEXTURE_SETOUTPUT_SNIPPET, a, s, o, n].join("\n");
	}function getSamplerFromInInfo(e) {
	  var t = e.shapeInfo.logicalShape;switch (t.length) {case 0:
	      return getSamplerScalar(e);case 1:
	      return getSampler1D(e);case 2:
	      return getSampler2D(e);case 3:
	      return getSampler3D(e);case 4:
	      return getSampler4D(e);case 5:
	      return getSampler5D(e);case 6:
	      return getSampler6D(e);default:
	      throw new Error(t.length + "-D input sampling is not yet supported");}
	}function getInputSamplingSnippet(e, t, n) {
	  var r = getSamplerFlat(e);return r += getSamplerFromInInfo(e), (n || arraysEqual(e.shapeInfo.logicalShape, t.logicalShape)) && (r += getSamplerAtOutputCoords(e, t, n)), r;
	}function getOutputSamplingSnippet(e, t) {
	  switch (e.length) {case 0:
	      return getOutputScalarCoords();case 1:
	      return getOutput1DCoords(e, t);case 2:
	      return getOutput2DCoords(e, t);case 3:
	      return getOutput3DCoords(e, t);case 4:
	      return getOutput4DCoords(e, t);case 5:
	      return getOutput5DCoords(e, t);case 6:
	      return getOutput6DCoords(e, t);default:
	      throw new Error(e.length + "-D output sampling is not yet supported");}
	}var SAMPLE_1D_SNIPPET = "\nvec2 UVfrom1D(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",
	    SAMPLE_2D_SNIPPET = "\nvec2 UVfrom2D(int texNumR, int texNumC, int numC, int row, int col) {\n  int index = row * numC + col;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",
	    SAMPLE_3D_SNIPPET = "\nvec2 UVfrom3D(int texNumR, int texNumC, int stride0,\n    int stride1, int row, int col, int depth) {\n  // Explicitly use integer operations as dot() only works on floats.\n  int index = row * stride0 + col * stride1 + depth;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",
	    SAMPLE_4D_SNIPPET = "\nvec2 UVfrom4D(int texNumR, int texNumC, int stride0,\n    int stride1, int stride2, int row, int col, int depth,\n    int depth2) {\n  // Explicitly use integer operations as dot() only works on floats.\n  int index = row * stride0 + col * stride1 + depth * stride2 + depth2;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",
	    SAMPLE_5D_SNIPPET = "\nvec2 UVfrom5D(int texNumR, int texNumC, int stride0,\n    int stride1, int stride2, int stride3, int row, int col, int depth,\n    int depth2, int depth3) {\n  // Explicitly use integer operations as dot() only works on floats.\n  int index = row * stride0 + col * stride1 +\n              depth * stride2 + depth2 * stride3 + depth3;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",
	    SAMPLE_6D_SNIPPET = "\nvec2 UVfrom6D(int texNumR, int texNumC, int stride0,\n    int stride1, int stride2, int stride3, int stride4,\n    int row, int col, int depth, int depth2, int depth3, int depth4) {\n  // Explicitly use integer operations as dot() only works on floats.\n  int index = row * stride0 + col * stride1 + depth * stride2 + depth2 *\n    stride3 + depth3 * stride4 + depth4;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",
	    FLOAT_TEXTURE_SAMPLE_SNIPPET = "\n  float sampleTexture(sampler2D textureSampler, vec2 uv) {\n    return texture2D(textureSampler, uv).r;\n  }\n",
	    FLOAT_TEXTURE_SETOUTPUT_SNIPPET = "\n  void setOutput(float val) {\n    gl_FragColor = vec4(val, 0, 0, 0);\n  }\n",
	    SHADER_PREFIX = "\n  precision highp float;\n  precision highp int;\n  varying vec2 resultUV;\n  const vec2 halfCR = vec2(0.5, 0.5);\n\n  struct ivec5\n  {\n    int x;\n    int y;\n    int z;\n    int w;\n    int u;\n  };\n\n  struct ivec6\n  {\n    int x;\n    int y;\n    int z;\n    int w;\n    int u;\n    int v;\n  };\n\n  bool isNaN(float val) {\n    return (val < 0.0 || 0.0 < val || val == 0.0) ? false : true;\n  }\n\n  bool hasNaN(vec4 values) {\n    vec4 v1 = values * values;\n    vec4 v2 = values * values;\n    return any(notEqual(v1, v2));\n  }\n\n  float getNaN(vec4 values) {\n    return dot(vec4(1), values);\n  }\n\n  int round(float value) {\n    return int(floor(value + 0.5));\n  }\n\n  int imod(int x, int y) {\n    return x - y * (x / y);\n  }\n\n  //Based on the work of Dave Hoskins\n  //https://www.shadertoy.com/view/4djSRW\n  #define HASHSCALE1 443.8975\n  float random(float seed){\n    vec2 p = resultUV * seed;\n    vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n  }\n\n  " + SAMPLE_1D_SNIPPET + "\n  " + SAMPLE_2D_SNIPPET + "\n  " + SAMPLE_3D_SNIPPET + "\n  " + SAMPLE_4D_SNIPPET + "\n  " + SAMPLE_5D_SNIPPET + "\n  " + SAMPLE_6D_SNIPPET + "\n";function getOutputScalarCoords() {
	  return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";
	}function getOutput1DCoords(e, t) {
	  return 1 === t[0] ? "\n      int getOutputCoords() {\n        return int(resultUV.x * " + t[1] + ".0);\n      }\n    " : 1 === t[1] ? "\n      int getOutputCoords() {\n        return int(resultUV.y * " + t[0] + ".0);\n      }\n    " : "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + t[0] + ", " + t[1] + "));\n      return resTexRC.x * " + t[1] + " + resTexRC.y;\n    }\n  ";
	}function getOutput3DCoords(e, t) {
	  var n = e[1] * e[2],
	      r = e[2];return "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + t[0] + ", " + t[1] + "));\n      int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n      int r = index / " + n + ";\n      index -= r * " + n + ";\n      int c = index / " + r + ";\n      int d = index - c * " + r + ";\n      return ivec3(r, c, d);\n    }\n  ";
	}function getOutput4DCoords(e, t) {
	  var n = e[3],
	      r = e[2] * n,
	      a = e[1] * r;return "\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" + t[0] + ", " + t[1] + "));\n      int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n\n      int r = index / " + a + ";\n      index -= r * " + a + ";\n\n      int c = index / " + r + ";\n      index -= c * " + r + ";\n\n      int d = index / " + n + ";\n      int d2 = index - d * " + n + ";\n\n      return ivec4(r, c, d, d2);\n    }\n  ";
	}function getOutput5DCoords(e, t) {
	  var n = e[4],
	      r = e[3] * n,
	      a = e[2] * r,
	      o = e[1] * a;return "\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(" + t[0] + ",\n                             " + t[1] + "));\n\n      int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n\n      int r = index / " + o + ";\n      index -= r * " + o + ";\n\n      int c = index / " + a + ";\n      index -= c * " + a + ";\n\n      int d = index / " + r + ";\n      index -= d * " + r + ";\n\n      int d2 = index  / " + n + ";\n      int d3 = index - d2 * " + n + ";\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  ";
	}function getOutput6DCoords(e, t) {
	  var n = e[5],
	      r = e[4] * n,
	      a = e[3] * r,
	      o = e[2] * a,
	      i = e[1] * o;return "\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" + t[0] + ", " + t[1] + "));\n      int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n\n      int r = index / " + i + ";\n      index -= r * " + i + ";\n\n      int c = index / " + o + ";\n      index -= c * " + o + ";\n\n      int d = index / " + a + ";\n      index -= d * " + a + ";\n\n      int d2 = index / " + r + ";\n      index -= d2 * " + r + ";\n\n      int d3 = index / " + n + ";\n      int d4 = index - d3 * " + n + ";\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  ";
	}function getOutput2DCoords(e, t) {
	  return arraysEqual(e, t) ? "\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(" + t[0] + ", " + t[1] + "));\n      }\n    " : 1 === e[1] ? "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + t[0] + ", " + t[1] + "));\n        int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    " : 1 === e[0] ? "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + t[0] + ", " + t[1] + "));\n        int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n        return ivec2(0, index);\n      }\n    " : "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + t[0] + ", " + t[1] + "));\n      int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n      int r = index / " + e[1] + ";\n      int c = index - r * " + e[1] + ";\n      return ivec2(r, c);\n    }\n  ";
	}function getSamplerScalar(e) {
	  var t = e.name,
	      n = "get" + t.charAt(0).toUpperCase() + t.slice(1);return e.shapeInfo.isUniform ? "float " + n + "() {return " + t + ";}" : "\n    float " + n + "() {\n      return sampleTexture(" + t + ", halfCR);\n    }\n  ";
	}function getSampler1D(e) {
	  var t = e.name,
	      n = "get" + t.charAt(0).toUpperCase() + t.slice(1);return "\n    float " + n + "(int index) {\n      return " + n + "Flat(index);\n    }\n  ";
	}function getSampler2D(e) {
	  var t = e.shapeInfo.logicalShape,
	      n = e.name,
	      r = "get" + n.charAt(0).toUpperCase() + n.slice(1),
	      a = e.shapeInfo.texShape;if (null != a && arraysEqual(t, a)) {
	    var o = a[0];return "\n    float " + r + "(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(" + a[1] + ".0, " + o + ".0);\n      return sampleTexture(" + n + ", uv);\n    }\n  ";
	  }var i = squeezeShape(t),
	      s = i.newShape,
	      u = i.keptDims,
	      l = s;if (l.length < t.length) {
	    return "\n      " + getSamplerFromInInfo(squeezeInputInfo(e, l)) + "\n      float " + r + "(int row, int col) {\n        return " + r + "(" + getSqueezedParams(["row", "col"], u) + ");\n      }\n    ";
	  }if (e.shapeInfo.isUniform) return "\n      float " + r + "(int row, int col) {\n        int index = row * " + t[1] + " + col;\n        return " + r + "Flat(index);\n      }\n    ";var c = a[0],
	      d = a[1];return 1 === d ? "\n    float " + r + "(int row, int col) {\n      int index = row * " + t[1] + " + col;\n      vec2 uv = vec2(0.5, (float(index) + 0.5) / " + c + ".0);\n      return sampleTexture(" + n + ", uv);\n    }\n  " : 1 === c ? "\n    float " + r + "(int row, int col) {\n      int index = row * " + t[1] + " + col;\n      vec2 uv = vec2((float(index) + 0.5) / " + d + ".0, 0.5);\n      return sampleTexture(" + n + ", uv);\n    }\n  " : "\n  float " + r + "(int row, int col) {\n    vec2 uv = UVfrom2D(" + c + ", " + d + ", " + t[1] + ", row, col);\n    return sampleTexture(" + n + ", uv);\n  }\n";
	}function getSampler3D(e) {
	  var t = e.shapeInfo.logicalShape,
	      n = e.name,
	      r = "get" + n.charAt(0).toUpperCase() + n.slice(1),
	      a = t[1] * t[2],
	      o = t[2],
	      i = squeezeShape(t),
	      s = i.newShape,
	      u = i.keptDims,
	      l = s;if (l.length < t.length) {
	    return "\n        " + getSamplerFromInInfo(squeezeInputInfo(e, l)) + "\n        float " + r + "(int row, int col, int depth) {\n          return " + r + "(" + getSqueezedParams(["row", "col", "depth"], u) + ");\n        }\n      ";
	  }if (e.shapeInfo.isUniform) return "\n      float " + r + "(int row, int col, int depth) {\n        int index = row * " + a + " + col * " + o + " + depth;\n        return " + r + "Flat(index);\n      }\n    ";var c = e.shapeInfo.texShape,
	      d = c[0],
	      p = c[1];return p === a ? "\n        float " + r + "(int row, int col, int depth) {\n          int texR = row;\n          int texC = col * " + o + " + depth;\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(" + p + ".0, " + d + ".0);\n          return sampleTexture(" + n + ", uv);\n        }\n      " : p === o ? "\n    float " + r + "(int row, int col, int depth) {\n      int texR = row * " + t[1] + " + col;\n      int texC = depth;\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + p + ".0, " + d + ".0);\n      return sampleTexture(" + n + ", uv);\n    }\n  " : "\n      float " + r + "(int row, int col, int depth) {\n        vec2 uv = UVfrom3D(\n            " + d + ", " + p + ", " + a + ", " + o + ", row, col, depth);\n        return sampleTexture(" + n + ", uv);\n      }\n  ";
	}function getSampler4D(e) {
	  var t = e.shapeInfo.logicalShape,
	      n = e.name,
	      r = "get" + n.charAt(0).toUpperCase() + n.slice(1),
	      a = t[3],
	      o = t[2] * a,
	      i = t[1] * o,
	      s = squeezeShape(t),
	      u = s.newShape,
	      l = s.keptDims;if (u.length < t.length) {
	    return "\n      " + getSamplerFromInInfo(squeezeInputInfo(e, u)) + "\n      float " + r + "(int row, int col, int depth, int depth2) {\n        return " + r + "(" + getSqueezedParams(["row", "col", "depth", "depth2"], l) + ");\n      }\n    ";
	  }if (e.shapeInfo.isUniform) return "\n      float " + r + "(int row, int col, int depth, int depth2) {\n        int index = row * " + i + " + col * " + o + " +\n            depth * " + a + " + depth2;\n        return " + r + "Flat(index);\n      }\n    ";var c = e.shapeInfo.texShape,
	      d = c[0],
	      p = c[1];return p === i ? "\n      float " + r + "(int row, int col, int depth, int depth2) {\n        int texR = row;\n        int texC = col * " + o + " + depth * " + a + " + depth2;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + p + ".0, " + d + ".0);\n        return sampleTexture(" + n + ", uv);\n      }\n    " : p === a ? "\n      float " + r + "(int row, int col, int depth, int depth2) {\n        int texR = row * " + t[1] * t[2] + " + col * " + t[2] + " + depth;\n        int texC = depth2;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + p + ".0, " + d + ".0);\n        return sampleTexture(" + n + ", uv);\n      }\n    " : "\n    float " + r + "(int row, int col, int depth, int depth2) {\n      vec2 uv = UVfrom4D(" + d + ", " + p + ", " + i + ", " + o + ",\n          " + a + ", row, col, depth, depth2);\n      return sampleTexture(" + n + ", uv);\n    }\n  ";
	}function getSampler5D(e) {
	  var t = e.shapeInfo.logicalShape,
	      n = e.name,
	      r = "get" + n.charAt(0).toUpperCase() + n.slice(1),
	      a = t[4],
	      o = t[3] * a,
	      i = t[2] * o,
	      s = t[1] * i,
	      u = squeezeShape(t),
	      l = u.newShape,
	      c = u.keptDims;if (l.length < t.length) {
	    return "\n      " + getSamplerFromInInfo(squeezeInputInfo(e, l)) + "\n      float " + r + "(int row, int col, int depth, int depth2, int depth3) {\n        return " + r + "(" + getSqueezedParams(["row", "col", "depth", "depth2", "depth3"], c) + ");\n      }\n    ";
	  }if (e.shapeInfo.isUniform) return "\n      float " + r + "(int row, int col, int depth, int depth2, int depth3) {\n        int index = row * " + s + " + col * " + i + " +\n            depth * " + o + " + depth2 * " + a + " + depth3;\n        return " + r + "Flat(index);\n      }\n    ";var d = e.shapeInfo.texShape,
	      p = d[0],
	      h = d[1];return h === s ? "\n      float " + r + "(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        int texC = col * " + i + " + depth * " + o + " +\n                   depth2 * " + a + " + depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + h + ".0, " + p + ".0);\n        return sampleTexture(" + n + ", uv);\n      }\n    " : h === a ? "\n      float " + r + "(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row * " + t[1] * t[2] + " + col * " + t[2] + " +\n                   depth * " + t[3] + " + depth2;\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + h + ".0, " + p + ".0);\n        return sampleTexture(" + n + ", uv);\n      }\n    " : "\n    float " + r + "(int row, int col, int depth, int depth2, int depth3) {\n      vec2 uv = UVfrom5D(" + p + ", " + h + ", " + s + ", " + i + ",\n          " + o + ", " + a + ", row, col, depth, depth2, depth3);\n      return sampleTexture(" + n + ", uv);\n    }\n  ";
	}function getSampler6D(e) {
	  var t = e.shapeInfo.logicalShape,
	      n = e.name,
	      r = "get" + n.charAt(0).toUpperCase() + n.slice(1),
	      a = t[5],
	      o = t[4] * a,
	      i = t[3] * o,
	      s = t[2] * i,
	      u = t[1] * s,
	      l = squeezeShape(t),
	      c = l.newShape,
	      d = l.keptDims;if (c.length < t.length) {
	    return "\n      " + getSamplerFromInInfo(squeezeInputInfo(e, c)) + "\n      float " + r + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return " + r + "(" + getSqueezedParams(["row", "col", "depth", "depth2", "depth3", "depth4"], d) + ");\n      }\n    ";
	  }if (e.shapeInfo.isUniform) return "\n      float " + r + "(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = row * " + u + " + col * " + s + " +\n            depth * " + i + " + depth2 * " + o + " + depth3 * " + o + "\n            + depth4\n        return " + r + "Flat(index);\n      }\n    ";var p = e.shapeInfo.texShape,
	      h = p[0],
	      f = p[1];return f === u ? "\n      float " + r + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        int texC = col * " + s + " + depth * " + i + " + depth2;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + f + ".0, " + h + ".0);\n        return sampleTexture(" + n + ", uv);\n      }\n    " : f === a ? "\n      float " + r + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row * " + t[1] * t[2] + " + col * " + t[2] + " + depth;\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + f + ".0, " + h + ".0);\n        return sampleTexture(" + n + ", uv);\n      }\n    " : "\n    float " + r + "(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      vec2 uv = UVfrom6D(" + h + ", " + f + ", " + u + ", " + s + ",\n          " + i + ", " + o + ", " + a + "\n          ,row, col, depth, depth2, depth3, depth4);\n      return sampleTexture(" + n + ", uv);\n    }\n  ";
	}function getSamplerFlat(e) {
	  var t = e.name,
	      n = "get" + t.charAt(0).toUpperCase() + t.slice(1) + "Flat",
	      r = sizeFromShape(e.shapeInfo.logicalShape);if (e.shapeInfo.isUniform) return 1 === r ? "float " + n + "(int index) {return " + t + ";}" : "\n      float " + n + "(int index) {\n        for (int i = 0; i < " + r + "; i++) {\n          if (i == index) {\n            return " + t + "[i];\n          }\n        }\n      }\n    ";var a = e.shapeInfo.texShape,
	      o = a[0],
	      i = a[1];return 1 === i && 1 === o ? "\n      float " + n + "(int index) {\n        return sampleTexture(" + t + ", halfCR);\n      }\n    " : 1 === i ? "\n      float " + n + "(int index) {\n        vec2 uv = vec2(0.5, (float(index) + 0.5) / " + o + ".0);\n        return sampleTexture(" + t + ", uv);\n      }\n    " : 1 === o ? "\n      float " + n + "(int index) {\n        vec2 uv = vec2((float(index) + 0.5) / " + i + ".0, 0.5);\n        return sampleTexture(" + t + ", uv);\n      }\n    " : "\n    float " + n + "(int index) {\n      vec2 uv = UVfrom1D(" + o + ", " + i + ", index);\n      return sampleTexture(" + t + ", uv);\n    }\n  ";
	}function getBroadcastOutputCoordsSampler(e, t, n, r) {
	  var a = e.shapeInfo.logicalShape.length,
	      o = t.logicalShape.length,
	      i = "int";2 === o ? i = "ivec2" : 3 === o ? i = "ivec3" : 4 === o && (i = "ivec4");var s = getBroadcastDims(e.shapeInfo.logicalShape, t.logicalShape),
	      u = o - a;return "\n    float " + r + "() {\n      " + i + " coords = getOutputCoords();\n      " + (0 === a ? "" : o < 2 && s.length >= 1 ? "coords = 0;" : s.map(function (e) {
	    return "coords[" + (e + u) + "] = 0;";
	  }).join("\n")) + "\n      return get" + n + "(" + (o < 2 && a > 0 ? "coords" : e.shapeInfo.logicalShape.map(function (e, t) {
	    return "coords[" + (t + u) + "]";
	  }).join(", ")) + ");\n    }\n  ";
	}function getSamplerAtOutputCoords(e, t, n) {
	  var r = e.name,
	      a = r.charAt(0).toUpperCase() + r.slice(1),
	      o = "get" + a + "AtOutCoords",
	      i = getBroadcastDims(e.shapeInfo.logicalShape, t.logicalShape),
	      s = e.shapeInfo.logicalShape.length,
	      u = t.logicalShape.length,
	      l = n && (u > s || i.length > 0),
	      c = broadcastDimsAreOuter(i),
	      d = e.shapeInfo.isUniform;if (l && !c) return getBroadcastOutputCoordsSampler(e, t, a, o);var p = sizeFromShape(e.shapeInfo.logicalShape),
	      h = "";l && c && (h = "\n        int mainPart = index / " + p + ";\n        index -= mainPart * " + p + ";\n      ");var f = t.texShape;if (d) return 1 === p ? "float " + o + "() {return " + r + ";}" : "\n      float " + o + "() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                              vec2(" + f[0] + ", " + f[1] + "));\n        int index = resTexRC.x * " + f[1] + " + resTexRC.y;\n        " + h + "\n        return get" + a + "Flat(index);\n      }\n    ";var g = e.shapeInfo.texShape;return arraysEqual(g, f) ? "\n      float " + o + "() {\n        return sampleTexture(" + r + ", resultUV);\n      }\n    " : "\n    float " + o + "() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + f[0] + ", " + f[1] + "));\n      int index = resTexRC.x * " + f[1] + " + resTexRC.y;\n      " + h + "\n      int texR = index / " + g[1] + ";\n      int texC = index - texR * " + g[1] + ";\n      vec2 uv = (vec2(texC, texR) + halfCR) /\n                 vec2(" + g[1] + ".0, " + g[0] + ".0);\n\n      return sampleTexture(" + r + ", uv);\n    }\n  ";
	}function getCoordsDataType(e) {
	  if (e <= 1) return "int";if (2 === e) return "ivec2";if (3 === e) return "ivec3";if (4 === e) return "ivec4";if (5 === e) return "ivec5";if (6 === e) return "ivec6";throw Error("GPU for rank " + e + " is not yet supported");
	}function squeezeInputInfo(e, t) {
	  var n = JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape = t, n;
	}function getSqueezedParams(e, t) {
	  return t.map(function (t) {
	    return e[t];
	  }).join(", ");
	}var CumSumProgram = function () {
	  return function (e, t, n) {
	    this.variableNames = ["x"], this.outputShape = e;var r = e.length,
	        a = e[e.length - 1],
	        o = n ? "<" : ">";this.userCode = "\n      int getIndex(int i) {\n        " + (n ? "return " + a + " -i - 1;" : "return i;") + "\n      }\n\n      void main() {\n        " + getCoordsDataType(r) + " coords = getOutputCoords();\n        int end = " + getFinalCoord(r, "coords") + ";\n        float val = 0.0;\n        for (int i = " + a + " - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx " + o + " end) {\n            continue;\n          }\n          if (idx == end && " + t + ") {\n            continue;\n          }\n          " + getFinalCoord(r, "coords") + " = idx;\n          val += getX(" + getCoords(r, "coords") + ");\n        }\n        setOutput(val);\n      }\n    ";
	  };
	}();function getCoords(e, t) {
	  if (1 === e) return "" + t;if (2 === e) return t + ".x, " + t + ".y";if (3 === e) return t + ".x, " + t + ".y, " + t + ".z";if (4 === e) return t + ".x, " + t + ".y, " + t + ".z, " + t + ".w";throw Error("Cumulative sum for rank " + e + " is not yet supported");
	}function getFinalCoord(e, t) {
	  if (1 === e) return "" + t;if (2 === e) return t + ".y";if (3 === e) return t + ".z";if (4 === e) return t + ".w";throw Error("Cumulative sum for rank " + e + " is not yet supported");
	}var TextureUsage,
	    PhysicalTextureType,
	    EncodeFloatProgram = function () {
	  return function (e) {
	    this.variableNames = ["A"], this.outputShape = e, this.userCode = "\n      const float FLOAT_MAX = 1.70141184e38;\n      const float FLOAT_MIN = 1.17549435e-38;\n\n      lowp vec4 encode_float(highp float v) {\n        if (isNaN(v)) {\n          return vec4(255, 255, 255, 255);\n        }\n\n        highp float av = abs(v);\n\n        if(av < FLOAT_MIN) {\n          return vec4(0.0, 0.0, 0.0, 0.0);\n        } else if(v > FLOAT_MAX) {\n          return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n        } else if(v < -FLOAT_MAX) {\n          return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n        }\n\n        highp vec4 c = vec4(0,0,0,0);\n\n        highp float e = floor(log2(av));\n        highp float m = exp2(fract(log2(av))) - 1.0;\n\n        c[2] = floor(128.0 * m);\n        m -= c[2] / 128.0;\n        c[1] = floor(32768.0 * m);\n        m -= c[1] / 32768.0;\n        c[0] = floor(8388608.0 * m);\n\n        highp float ebias = e + 127.0;\n        c[3] = floor(ebias / 2.0);\n        ebias -= c[3] * 2.0;\n        c[2] += floor(ebias) * 128.0;\n\n        c[3] += 128.0 * step(0.0, -v);\n\n        return c / 255.0;\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        gl_FragColor = encode_float(x);\n      }\n    ";
	  };
	}(),
	    FromPixelsProgram = function () {
	  return function (e) {
	    this.variableNames = ["A"];var t = e[0],
	        n = e[1];this.outputShape = e, this.userCode = "\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + n + ".0, " + t + ".0);\n\n        vec4 values = texture2D(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    ";
	  };
	}(),
	    GatherProgram = function () {
	  return function (e, t, n) {
	    this.variableNames = ["A", "indices"];var r = e.slice();r[n] = t, this.outputShape = r, this.rank = r.length;var a = getCoordsDataType(this.rank),
	        o = getSourceCoords(e, n);this.userCode = "\n      void main() {\n        " + a + " resRC = getOutputCoords();\n        setOutput(getA(" + o + "));\n      }\n    ";
	  };
	}();function getSourceCoords(e, t) {
	  var n = e.length;if (n > 4) throw Error("Gather for rank " + n + " is not yet supported");if (1 === n) return "int(getIndices(resRC))";for (var r = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], a = [], o = 0; o < e.length; o++) o === t ? a.push("int(getIndices(" + r[o] + "))") : a.push("" + r[o]);return a.join();
	}function getUnpackedMatrixTextureShapeWidthHeight(e, t) {
	  return [t, e];
	}function getUnpackedArraySizeFromMatrixSize(e, t) {
	  return e * t;
	}function getMatrixSizeFromUnpackedArraySize(e, t) {
	  if (e % t != 0) throw new Error("unpackedSize (" + e + ") must be a multiple of " + t);return e / t;
	}function encodeMatrixToUnpackedArray(e, t, n) {
	  var r = getUnpackedArraySizeFromMatrixSize(e.length, n);if (t.length < r) throw new Error("unpackedArray length (" + t.length + ") must be >= " + r);for (var a = 0, o = 0; o < e.length; ++o) t[a] = e[o], a += n;
	}function decodeMatrixFromUnpackedArray(e, t, n) {
	  var r = getMatrixSizeFromUnpackedArraySize(e.length, n);if (t.length < r) throw new Error("matrix length (" + t.length + ") must be >= " + r);for (var a = 0, o = 0; o < e.length; o += n) t[a++] = e[o];
	}function getPackedMatrixTextureShapeWidthHeight(e, t) {
	  return [Math.ceil(t / 2), Math.ceil(e / 2)];
	}function getPackedRGBAArraySizeFromMatrixShape(e, t) {
	  var n = getPackedMatrixTextureShapeWidthHeight(e, t);return n[0] * n[1] * 4;
	}function encodeMatrixToPackedRGBA(e, t, n, r) {
	  var a = getPackedRGBAArraySizeFromMatrixShape(t, n);if (r.length < a) throw new Error("packedRGBA length (" + r.length + ") must be >= " + a);for (var o = getPackedMatrixTextureShapeWidthHeight(t, n), i = o[0], s = o[1], u = n % 2 == 1, l = t % 2 == 1, c = Math.floor(n / 2), d = Math.floor(t / 2), p = u ? 4 : 0, h = n, f = 0, g = 0; g < d; ++g) {
	    for (var m = 2 * g * n, v = 0; v < c; ++v) {
	      var y = m + 2 * v;r[f] = e[y], r[f + 1] = e[y + 1], r[f + 2] = e[y + h], r[f + 3] = e[y + h + 1], f += 4;
	    }f += p;
	  }if (u) {
	    y = n - 1, f = 4 * (i - 1);var x = 2 * n;for (p = 4 * i, g = 0; g < d; ++g) r[f] = e[y], r[f + 2] = e[y + n], y += x, f += p;
	  }if (l) for (y = (t - 1) * n, f = (s - 1) * i * 4, v = 0; v < c; ++v) r[f++] = e[y++], r[f++] = e[y++], f += 2;return u && l && (r[r.length - 4] = e[e.length - 1]), r;
	}function decodeMatrixFromPackedRGBA(e, t, n, r) {
	  var a = t * n;if (a < r.length) throw new Error("matrix length (" + r.length + ") must be >= " + a);for (var o = n % 2 == 1, i = t % 2 == 1, s = Math.floor(n / 2), u = Math.floor(t / 2), l = getPackedMatrixTextureShapeWidthHeight(t, n), c = l[0], d = l[1], p = o ? 4 : 0, h = n + (o ? 1 : 0), f = 0, g = 0, m = n, v = 0; v < u; ++v) {
	    for (var y = 0; y < s; ++y) r[g++] = e[f++], r[g++] = e[f++], r[m++] = e[f++], r[m++] = e[f++];f += p, g += h, m += h;
	  }if (o) {
	    f = 4 * (c - 1);var x = n - 1;for (p = 4 * c, h = 2 * n, v = 0; v < u; ++v) r[x] = e[f], r[x + n] = e[f + 2], f += p, x += h;
	  }if (i) for (f = (d - 1) * c * 4, x = (t - 1) * n, y = 0; y < s; ++y) r[x++] = e[f++], r[x++] = e[f++], f += 2;return o && i && (r[r.length - 1] = e[e.length - 4]), r;
	}!function (e) {
	  e[e.RENDER = 0] = "RENDER", e[e.UPLOAD = 1] = "UPLOAD", e[e.PIXELS = 2] = "PIXELS", e[e.DOWNLOAD = 3] = "DOWNLOAD";
	}(TextureUsage || (TextureUsage = {})), function (e) {
	  e[e.FLOAT16 = 0] = "FLOAT16", e[e.FLOAT32 = 1] = "FLOAT32", e[e.UNSIGNED_BYTE = 2] = "UNSIGNED_BYTE";
	}(PhysicalTextureType || (PhysicalTextureType = {}));var MAX_TEXTURE_SIZE = null;function createWebGLRenderingContext(e) {
	  var t = document.createElement("canvas");return t.width = 1, t.height = 1, createWebGLRenderingContextFromCanvas(t, e);
	}function createWebGLRenderingContextFromCanvas(e, t) {
	  var n,
	      r = ENV.get("WEBGL_VERSION");if (2 === r ? n = e.getContext("webgl2", t) : 1 === r && (n = e.getContext("webgl", t) || e.getContext("experimental-webgl", t)), 0 === r || null == n) throw new Error("This browser does not support WebGL.");return n;
	}function callAndCheck(e, t) {
	  var n = t();return checkWebGLError(e), n;
	}var webGLDebugErrorCheckingEnabled = !1;function enableDebugWebGLErrorChecking(e) {
	  webGLDebugErrorCheckingEnabled = e;
	}function checkWebGLError(e) {
	  if (webGLDebugErrorCheckingEnabled) {
	    var t = e.getError();if (t !== e.NO_ERROR) throw new Error("WebGL Error: " + getWebGLErrorMessage(e, t));
	  }
	}function getWebGLErrorMessage(e, t) {
	  switch (t) {case e.NO_ERROR:
	      return "NO_ERROR";case e.INVALID_ENUM:
	      return "INVALID_ENUM";case e.INVALID_VALUE:
	      return "INVALID_VALUE";case e.INVALID_OPERATION:
	      return "INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:
	      return "INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:
	      return "OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:
	      return "CONTEXT_LOST_WEBGL";default:
	      return "Unknown error code " + t;}
	}function getExtensionOrThrow(e, t) {
	  return throwIfNull(e, function () {
	    return e.getExtension(t);
	  }, 'Extension "' + t + '" not supported on this browser.');
	}function createVertexShader(e, t) {
	  var n = throwIfNull(e, function () {
	    return e.createShader(e.VERTEX_SHADER);
	  }, "Unable to create vertex WebGLShader.");if (callAndCheck(e, function () {
	    return e.shaderSource(n, t);
	  }), callAndCheck(e, function () {
	    return e.compileShader(n);
	  }), !1 === e.getShaderParameter(n, e.COMPILE_STATUS)) throw console.log(e.getShaderInfoLog(n)), new Error("Failed to compile vertex shader.");return n;
	}function createFragmentShader(e, t) {
	  var n = throwIfNull(e, function () {
	    return e.createShader(e.FRAGMENT_SHADER);
	  }, "Unable to create fragment WebGLShader.");if (callAndCheck(e, function () {
	    return e.shaderSource(n, t);
	  }), callAndCheck(e, function () {
	    return e.compileShader(n);
	  }), !1 === e.getShaderParameter(n, e.COMPILE_STATUS)) throw logShaderSourceAndInfoLog(t, e.getShaderInfoLog(n)), new Error("Failed to compile fragment shader.");return n;
	}var lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;function logShaderSourceAndInfoLog(e, t) {
	  var n = lineNumberRegex.exec(t);if (null == n) return console.log("Couldn't parse line number in error: " + t), void console.log(e);for (var r = +n[1], a = e.split("\n"), o = a.length.toString().length + 2, i = a.map(function (e, t) {
	    return rightPad((t + 1).toString(), o) + e;
	  }), s = 0, u = 0; u < i.length; u++) s = Math.max(i[u].length, s);var l = i.slice(0, r - 1),
	      c = i.slice(r - 1, r),
	      d = i.slice(r);console.log(l.join("\n")), console.log(t.split("\n")[0]), console.log("%c " + rightPad(c[0], s), "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(d.join("\n"));
	}function createProgram(e) {
	  return throwIfNull(e, function () {
	    return e.createProgram();
	  }, "Unable to create WebGLProgram.");
	}function linkProgram(e, t) {
	  if (callAndCheck(e, function () {
	    return e.linkProgram(t);
	  }), !1 === e.getProgramParameter(t, e.LINK_STATUS)) throw console.log(e.getProgramInfoLog(t)), new Error("Failed to link vertex and fragment shaders.");
	}function validateProgram(e, t) {
	  if (callAndCheck(e, function () {
	    return e.validateProgram(t);
	  }), !1 === e.getProgramParameter(t, e.VALIDATE_STATUS)) throw console.log(e.getProgramInfoLog(t)), new Error("Shader program validation failed.");
	}function createStaticVertexBuffer(e, t) {
	  var n = throwIfNull(e, function () {
	    return e.createBuffer();
	  }, "Unable to create WebGLBuffer");return callAndCheck(e, function () {
	    return e.bindBuffer(e.ARRAY_BUFFER, n);
	  }), callAndCheck(e, function () {
	    return e.bufferData(e.ARRAY_BUFFER, t, e.STATIC_DRAW);
	  }), n;
	}function createStaticIndexBuffer(e, t) {
	  var n = throwIfNull(e, function () {
	    return e.createBuffer();
	  }, "Unable to create WebGLBuffer");return callAndCheck(e, function () {
	    return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, n);
	  }), callAndCheck(e, function () {
	    return e.bufferData(e.ELEMENT_ARRAY_BUFFER, t, e.STATIC_DRAW);
	  }), n;
	}function queryMaxTextureSize(e) {
	  return null != MAX_TEXTURE_SIZE ? MAX_TEXTURE_SIZE : MAX_TEXTURE_SIZE = callAndCheck(e, function () {
	    return e.getParameter(e.MAX_TEXTURE_SIZE);
	  });
	}function getNumChannels() {
	  return 2 === ENV.get("WEBGL_VERSION") ? 1 : 4;
	}function createTexture(e) {
	  return throwIfNull(e, function () {
	    return e.createTexture();
	  }, "Unable to create WebGLTexture.");
	}function validateTextureSize(e, t, n) {
	  var r = queryMaxTextureSize(e);if (t <= 0 || n <= 0) {
	    var a = "[" + t + "x" + n + "]";throw new Error("Requested texture size " + a + " is invalid.");
	  }if (t > r || n > r) {
	    a = "[" + t + "x" + n + "]";throw new Error("Requested texture size " + a + " greater than WebGL maximum on this browser / GPU " + ("[" + r + "x" + r + "]") + ".");
	  }
	}function createFramebuffer(e) {
	  return throwIfNull(e, function () {
	    return e.createFramebuffer();
	  }, "Unable to create WebGLFramebuffer.");
	}function bindVertexBufferToProgramAttribute(e, t, n, r, a, o, i) {
	  var s = e.getAttribLocation(t, n);return -1 !== s && (callAndCheck(e, function () {
	    return e.bindBuffer(e.ARRAY_BUFFER, r);
	  }), callAndCheck(e, function () {
	    return e.vertexAttribPointer(s, a, e.FLOAT, !1, o, i);
	  }), callAndCheck(e, function () {
	    return e.enableVertexAttribArray(s);
	  }), !0);
	}function bindTextureUnit(e, t, n) {
	  validateTextureUnit(e, n), callAndCheck(e, function () {
	    return e.activeTexture(e.TEXTURE0 + n);
	  }), callAndCheck(e, function () {
	    return e.bindTexture(e.TEXTURE_2D, t);
	  });
	}function unbindTextureUnit(e, t) {
	  validateTextureUnit(e, t), callAndCheck(e, function () {
	    return e.activeTexture(e.TEXTURE0 + t);
	  }), callAndCheck(e, function () {
	    return e.bindTexture(e.TEXTURE_2D, null);
	  });
	}function getProgramUniformLocationOrThrow(e, t, n) {
	  return throwIfNull(e, function () {
	    return e.getUniformLocation(t, n);
	  }, 'uniform "' + n + '" not present in program.');
	}function getProgramUniformLocation(e, t, n) {
	  return e.getUniformLocation(t, n);
	}function bindTextureToProgramUniformSampler(e, t, n, r, a) {
	  callAndCheck(e, function () {
	    return bindTextureUnit(e, n, a);
	  }), callAndCheck(e, function () {
	    return e.uniform1i(r, a);
	  });
	}function bindCanvasToFramebuffer(e) {
	  callAndCheck(e, function () {
	    return e.bindFramebuffer(e.FRAMEBUFFER, null);
	  }), callAndCheck(e, function () {
	    return e.viewport(0, 0, e.canvas.width, e.canvas.height);
	  }), callAndCheck(e, function () {
	    return e.scissor(0, 0, e.canvas.width, e.canvas.height);
	  });
	}function bindColorTextureToFramebuffer(e, t, n) {
	  callAndCheck(e, function () {
	    return e.bindFramebuffer(e.FRAMEBUFFER, n);
	  }), callAndCheck(e, function () {
	    return e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, t, 0);
	  });
	}function unbindColorTextureFromFramebuffer(e, t) {
	  callAndCheck(e, function () {
	    return e.bindFramebuffer(e.FRAMEBUFFER, t);
	  }), callAndCheck(e, function () {
	    return e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, null, 0);
	  });
	}function validateFramebuffer(e) {
	  var t = e.checkFramebufferStatus(e.FRAMEBUFFER);if (t !== e.FRAMEBUFFER_COMPLETE) throw new Error("Error binding framebuffer: " + getFramebufferErrorMessage(e, t));
	}function getFramebufferErrorMessage(e, t) {
	  switch (t) {case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
	      return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
	      return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
	      return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:
	      return "FRAMEBUFFER_UNSUPPORTED";default:
	      return "unknown error " + t;}
	}function throwIfNull(e, t, n) {
	  var r = callAndCheck(e, function () {
	    return t();
	  });if (null == r) throw new Error(n);return r;
	}function validateTextureUnit(e, t) {
	  var n = e.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1,
	      r = t + e.TEXTURE0;if (r < e.TEXTURE0 || r > n) throw new Error("textureUnit must be in " + ("[gl.TEXTURE0, gl.TEXTURE" + n + "]") + ".");
	}function getTextureShapeFromLogicalShape(e, t) {
	  2 !== t.length && (t = squeezeShape(t).newShape);var n = queryMaxTextureSize(e),
	      r = sizeFromShape(t);return t.length <= 1 && r <= n ? [r, 1] : 2 === t.length && t[0] <= n && t[1] <= n ? t : 3 === t.length && t[0] <= n && t[1] * t[2] <= n ? [t[0], t[1] * t[2]] : 4 === t.length && t[0] <= n && t[1] * t[2] * t[3] <= n ? [t[0], t[1] * t[2] * t[3]] : sizeToSquarishShape(r);
	}var webgl_util = Object.freeze({ createWebGLRenderingContext: createWebGLRenderingContext, createWebGLRenderingContextFromCanvas: createWebGLRenderingContextFromCanvas, callAndCheck: callAndCheck, enableDebugWebGLErrorChecking: enableDebugWebGLErrorChecking, checkWebGLError: checkWebGLError, getWebGLErrorMessage: getWebGLErrorMessage, getExtensionOrThrow: getExtensionOrThrow, createVertexShader: createVertexShader, createFragmentShader: createFragmentShader, createProgram: createProgram, linkProgram: linkProgram, validateProgram: validateProgram, createStaticVertexBuffer: createStaticVertexBuffer, createStaticIndexBuffer: createStaticIndexBuffer, queryMaxTextureSize: queryMaxTextureSize, getNumChannels: getNumChannels, createTexture: createTexture, validateTextureSize: validateTextureSize, createFramebuffer: createFramebuffer, bindVertexBufferToProgramAttribute: bindVertexBufferToProgramAttribute, bindTextureUnit: bindTextureUnit, unbindTextureUnit: unbindTextureUnit, getProgramUniformLocationOrThrow: getProgramUniformLocationOrThrow, getProgramUniformLocation: getProgramUniformLocation, bindTextureToProgramUniformSampler: bindTextureToProgramUniformSampler, bindCanvasToFramebuffer: bindCanvasToFramebuffer, bindColorTextureToFramebuffer: bindColorTextureToFramebuffer, unbindColorTextureFromFramebuffer: unbindColorTextureFromFramebuffer, validateFramebuffer: validateFramebuffer, getFramebufferErrorMessage: getFramebufferErrorMessage, getTextureShapeFromLogicalShape: getTextureShapeFromLogicalShape });function getWebGLContextAttributes() {
	  return { alpha: !1, antialias: !1, premultipliedAlpha: !1, preserveDrawingBuffer: !1, depth: !1, stencil: !1, failIfMajorPerformanceCaveat: !0 };
	}function createWebGLContext(e) {
	  var t,
	      n = getWebGLContextAttributes();return callAndCheck(t = null != e ? createWebGLRenderingContextFromCanvas(e, n) : createWebGLRenderingContext(n), function () {
	    return t.disable(t.DEPTH_TEST);
	  }), callAndCheck(t, function () {
	    return t.disable(t.STENCIL_TEST);
	  }), callAndCheck(t, function () {
	    return t.disable(t.BLEND);
	  }), callAndCheck(t, function () {
	    return t.disable(t.DITHER);
	  }), callAndCheck(t, function () {
	    return t.disable(t.POLYGON_OFFSET_FILL);
	  }), callAndCheck(t, function () {
	    return t.disable(t.SAMPLE_COVERAGE);
	  }), callAndCheck(t, function () {
	    return t.enable(t.SCISSOR_TEST);
	  }), callAndCheck(t, function () {
	    return t.enable(t.CULL_FACE);
	  }), callAndCheck(t, function () {
	    return t.cullFace(t.BACK);
	  }), t;
	}function createVertexShader$1(e) {
	  return createVertexShader(e, "\n    precision highp float;\n    attribute vec3 clipSpacePos;\n    attribute vec2 uv;\n    varying vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }");
	}function createVertexBuffer(e) {
	  return createStaticVertexBuffer(e, new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]));
	}function createIndexBuffer(e) {
	  return createStaticIndexBuffer(e, new Uint16Array([0, 1, 2, 2, 1, 3]));
	}function getTextureConfig(e, t) {
	  var n,
	      r,
	      a,
	      o,
	      i,
	      s,
	      u,
	      l = e;return 2 === ENV.get("WEBGL_VERSION") ? (n = l.R32F, r = l.R16F, a = l.RGBA32F, o = l.RED, i = 4, s = 1, u = l.HALF_FLOAT) : (n = e.RGBA, r = e.RGBA, a = l.RGBA, o = e.RGBA, i = 4, s = 4, u = null != t ? t.HALF_FLOAT_OES : null), { internalFormatFloat: n, internalFormatHalfFloat: r, internalFormatPackedFloat: a, textureFormatFloat: o, downloadTextureFormat: e.RGBA, downloadUnpackNumChannels: i, defaultNumChannels: s, textureTypeHalfFloat: u };
	}function createAndConfigureTexture(e, t, n, r, a, o) {
	  validateTextureSize(e, t, n);var i = createTexture(e),
	      s = e.TEXTURE_2D;return callAndCheck(e, function () {
	    return e.bindTexture(s, i);
	  }), callAndCheck(e, function () {
	    return e.texParameteri(s, e.TEXTURE_WRAP_S, e.CLAMP_TO_EDGE);
	  }), callAndCheck(e, function () {
	    return e.texParameteri(s, e.TEXTURE_WRAP_T, e.CLAMP_TO_EDGE);
	  }), callAndCheck(e, function () {
	    return e.texParameteri(s, e.TEXTURE_MIN_FILTER, e.NEAREST);
	  }), callAndCheck(e, function () {
	    return e.texParameteri(s, e.TEXTURE_MAG_FILTER, e.NEAREST);
	  }), callAndCheck(e, function () {
	    return e.texImage2D(s, 0, r, t, n, 0, a, o, null);
	  }), callAndCheck(e, function () {
	    return e.bindTexture(e.TEXTURE_2D, null);
	  }), i;
	}function createFloat32MatrixTexture(e, t, n, r) {
	  var a = getUnpackedMatrixTextureShapeWidthHeight(t, n);return createAndConfigureTexture(e, a[0], a[1], r.internalFormatFloat, r.textureFormatFloat, e.FLOAT);
	}function createFloat16MatrixTexture(e, t, n, r) {
	  var a = getUnpackedMatrixTextureShapeWidthHeight(t, n);return createAndConfigureTexture(e, a[0], a[1], r.internalFormatFloat, r.textureFormatFloat, r.textureTypeHalfFloat);
	}function createUnsignedBytesMatrixTexture(e, t, n, r) {
	  var a = getUnpackedMatrixTextureShapeWidthHeight(t, n);return createAndConfigureTexture(e, a[0], a[1], e.RGBA, e.RGBA, e.UNSIGNED_BYTE);
	}function createPackedMatrixTexture(e, t, n, r) {
	  var a = getPackedMatrixTextureShapeWidthHeight(t, n);return createAndConfigureTexture(e, a[0], a[1], r.internalFormatPackedFloat, e.RGBA, e.FLOAT);
	}function bindVertexProgramAttributeStreams(e, t, n) {
	  return callAndCheck(e, function () {
	    return e.bindBuffer(e.ARRAY_BUFFER, n);
	  }), bindVertexBufferToProgramAttribute(e, t, "clipSpacePos", n, 3, 20, 0) && bindVertexBufferToProgramAttribute(e, t, "uv", n, 2, 20, 12);
	}function uploadPixelDataToTexture(e, t, n) {
	  callAndCheck(e, function () {
	    return e.bindTexture(e.TEXTURE_2D, t);
	  }), callAndCheck(e, function () {
	    return e.texImage2D(e.TEXTURE_2D, 0, e.RGBA, e.RGBA, e.UNSIGNED_BYTE, n);
	  }), callAndCheck(e, function () {
	    return e.bindTexture(e.TEXTURE_2D, null);
	  });
	}function uploadDataToTexture(e, t, n, r, a, o) {
	  validateTextureSize(e, n, r), callAndCheck(e, function () {
	    return e.bindTexture(e.TEXTURE_2D, t);
	  }), callAndCheck(e, function () {
	    return e.texSubImage2D(e.TEXTURE_2D, 0, 0, 0, n, r, o, e.FLOAT, a);
	  }), callAndCheck(e, function () {
	    return e.bindTexture(e.TEXTURE_2D, null);
	  });
	}function uploadMatrixToTexture(e, t, n, r, a, o, i) {
	  var s,
	      u = getUnpackedMatrixTextureShapeWidthHeight(n, r),
	      l = u[0],
	      c = u[1];1 === i.defaultNumChannels ? s = a : encodeMatrixToUnpackedArray(a, s = new Float32Array(getUnpackedArraySizeFromMatrixSize(a.length, o)), o), uploadDataToTexture(e, t, l, c, s, i.textureFormatFloat);
	}function uploadMatrixToPackedTexture(e, t, n, r, a, o) {
	  var i = getPackedMatrixTextureShapeWidthHeight(n, r),
	      s = i[0],
	      u = i[1],
	      l = new Float32Array(getPackedRGBAArraySizeFromMatrixShape(n, r));encodeMatrixToPackedRGBA(a, n, r, l), uploadDataToTexture(e, t, s, u, l, e.RGBA);
	}function downloadMatrixFromOutputTextureAsync(e, t, n, r, a) {
	  return __awaiter(this, void 0, void 0, function () {
	    var o, i, s, u, l;return __generator(this, function (c) {
	      switch (c.label) {case 0:
	          return o = e, i = new Float32Array(getUnpackedArraySizeFromMatrixSize(n * r, a.downloadUnpackNumChannels)), s = i instanceof Float32Array ? 4 * i.length : i, u = e.createBuffer(), callAndCheck(e, function () {
	            return e.bindBuffer(o.PIXEL_PACK_BUFFER, u);
	          }), callAndCheck(e, function () {
	            return e.bufferData(o.PIXEL_PACK_BUFFER, s, e.STATIC_DRAW);
	          }), callAndCheck(e, function () {
	            return o.readPixels(0, 0, r, n, e.RGBA, e.FLOAT, 0);
	          }), [4, t.getBufferSubDataAsync(o.PIXEL_PACK_BUFFER, 0, i)];case 1:
	          return c.sent(), l = new Float32Array(n * r), decodeMatrixFromUnpackedArray(i, l, a.downloadUnpackNumChannels), [2, l];}
	    });
	  });
	}function downloadFloat32MatrixFromOutputTexture(e, t, n, r) {
	  var a = getUnpackedMatrixTextureShapeWidthHeight(t, n),
	      o = a[0],
	      i = a[1],
	      s = new Float32Array(getUnpackedArraySizeFromMatrixSize(t * n, r.downloadUnpackNumChannels));callAndCheck(e, function () {
	    return e.readPixels(0, 0, o, i, r.downloadTextureFormat, e.FLOAT, s);
	  });var u = new Float32Array(t * n);return decodeMatrixFromUnpackedArray(s, u, r.downloadUnpackNumChannels), u;
	}function downloadByteEncodedFloatMatrixFromOutputTexture(e, t, n, r) {
	  var a = getUnpackedMatrixTextureShapeWidthHeight(t, n),
	      o = a[0],
	      i = a[1],
	      s = new Uint8Array(getUnpackedArraySizeFromMatrixSize(t * n, 4));return callAndCheck(e, function () {
	    return e.readPixels(0, 0, o, i, r.downloadTextureFormat, e.UNSIGNED_BYTE, s);
	  }), new Float32Array(s.buffer);
	}function downloadMatrixFromPackedOutputTexture(e, t, n, r) {
	  var a = getPackedMatrixTextureShapeWidthHeight(t, n),
	      o = a[0],
	      i = a[1],
	      s = new Float32Array(getPackedRGBAArraySizeFromMatrixShape(t, n));callAndCheck(e, function () {
	    return e.readPixels(0, 0, o, i, e.RGBA, e.FLOAT, s);
	  });var u = new Float32Array(t * n);return decodeMatrixFromPackedRGBA(s, t, n, u);
	}var gpgpu_util = Object.freeze({ getWebGLContextAttributes: getWebGLContextAttributes, createWebGLContext: createWebGLContext, createVertexShader: createVertexShader$1, createVertexBuffer: createVertexBuffer, createIndexBuffer: createIndexBuffer, getTextureConfig: getTextureConfig, createFloat32MatrixTexture: createFloat32MatrixTexture, createFloat16MatrixTexture: createFloat16MatrixTexture, createUnsignedBytesMatrixTexture: createUnsignedBytesMatrixTexture, createPackedMatrixTexture: createPackedMatrixTexture, bindVertexProgramAttributeStreams: bindVertexProgramAttributeStreams, uploadPixelDataToTexture: uploadPixelDataToTexture, uploadMatrixToTexture: uploadMatrixToTexture, uploadMatrixToPackedTexture: uploadMatrixToPackedTexture, downloadMatrixFromOutputTextureAsync: downloadMatrixFromOutputTextureAsync, downloadFloat32MatrixFromOutputTexture: downloadFloat32MatrixFromOutputTexture, downloadByteEncodedFloatMatrixFromOutputTexture: downloadByteEncodedFloatMatrixFromOutputTexture, downloadMatrixFromPackedOutputTexture: downloadMatrixFromPackedOutputTexture }),
	    GPGPUContext = function () {
	  function e(e) {
	    this.outputTexture = null, this.program = null, this.disposed = !1, this.autoDebugValidate = !1, this.vertexAttrsAreBound = !1, this.itemsToPoll = [], this.gl = null != e ? e : createWebGLContext(), 1 === ENV.get("WEBGL_VERSION") ? (this.textureFloatExtension = getExtensionOrThrow(this.gl, "OES_texture_float"), this.colorBufferFloatExtension = this.gl.getExtension("WEBGL_color_buffer_float"), ENV.get("WEBGL_RENDER_FLOAT32_ENABLED") || (this.textureHalfFloatExtension = getExtensionOrThrow(this.gl, "OES_texture_half_float"), this.colorBufferHalfFloatExtension = this.gl.getExtension("EXT_color_buffer_half_float"))) : this.colorBufferFloatExtension = getExtensionOrThrow(this.gl, "EXT_color_buffer_float"), this.loseContextExtension = getExtensionOrThrow(this.gl, "WEBGL_lose_context"), ENV.get("WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED") && (this.getBufferSubDataAsyncExtension = this.gl.getExtension("WEBGL_get_buffer_sub_data_async")), this.vertexBuffer = createVertexBuffer(this.gl), this.indexBuffer = createIndexBuffer(this.gl), this.framebuffer = createFramebuffer(this.gl), this.textureConfig = getTextureConfig(this.gl, this.textureHalfFloatExtension);
	  }return e.prototype.dispose = function () {
	    var e = this;if (!this.disposed) {
	      null != this.program && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), null != this.outputTexture && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");var t = this.gl;callAndCheck(t, function () {
	        return t.finish();
	      }), callAndCheck(t, function () {
	        return t.bindFramebuffer(t.FRAMEBUFFER, null);
	      }), callAndCheck(t, function () {
	        return t.deleteFramebuffer(e.framebuffer);
	      }), callAndCheck(t, function () {
	        return t.bindBuffer(t.ARRAY_BUFFER, null);
	      }), callAndCheck(t, function () {
	        return t.deleteBuffer(e.vertexBuffer);
	      }), callAndCheck(t, function () {
	        return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, null);
	      }), callAndCheck(t, function () {
	        return t.deleteBuffer(e.indexBuffer);
	      }), this.loseContextExtension.loseContext(), this.disposed = !0;
	    }
	  }, e.prototype.enableAutomaticDebugValidation = function (e) {
	    this.autoDebugValidate = e, enableDebugWebGLErrorChecking(e);
	  }, e.prototype.createFloat32MatrixTexture = function (e, t) {
	    return this.throwIfDisposed(), createFloat32MatrixTexture(this.gl, e, t, this.textureConfig);
	  }, e.prototype.createFloat16MatrixTexture = function (e, t) {
	    return this.throwIfDisposed(), createFloat16MatrixTexture(this.gl, e, t, this.textureConfig);
	  }, e.prototype.createUnsignedBytesMatrixTexture = function (e, t) {
	    return this.throwIfDisposed(), createUnsignedBytesMatrixTexture(this.gl, e, t, this.textureConfig);
	  }, e.prototype.uploadPixelDataToTexture = function (e, t) {
	    this.throwIfDisposed(), uploadPixelDataToTexture(this.gl, e, t);
	  }, e.prototype.createPackedMatrixTexture = function (e, t) {
	    return this.throwIfDisposed(), createPackedMatrixTexture(this.gl, e, t, this.textureConfig);
	  }, e.prototype.deleteMatrixTexture = function (e) {
	    var t = this;this.throwIfDisposed(), this.outputTexture === e && (unbindColorTextureFromFramebuffer(this.gl, this.framebuffer), this.outputTexture = null), callAndCheck(this.gl, function () {
	      return t.gl.deleteTexture(e);
	    });
	  }, e.prototype.uploadMatrixToTexture = function (e, t, n, r) {
	    this.throwIfDisposed();var a = getNumChannels();return uploadMatrixToTexture(this.gl, e, t, n, r, a, this.textureConfig);
	  }, e.prototype.uploadMatrixToPackedTexture = function (e, t, n, r) {
	    return this.throwIfDisposed(), uploadMatrixToPackedTexture(this.gl, e, t, n, r, this.textureConfig);
	  }, e.prototype.downloadFloat32MatrixFromOutputTexture = function (e, t, n) {
	    var r = this;return this.downloadMatrixDriver(e, function () {
	      return downloadFloat32MatrixFromOutputTexture(r.gl, t, n, r.textureConfig);
	    });
	  }, e.prototype.downloadByteEncodedFloatMatrixFromOutputTexture = function (e, t, n) {
	    var r = this;return this.downloadMatrixDriver(e, function () {
	      return downloadByteEncodedFloatMatrixFromOutputTexture(r.gl, t, n, r.textureConfig);
	    });
	  }, e.prototype.downloadMatrixFromTextureAsync = function (e, t, n) {
	    return __awaiter(this, void 0, void 0, function () {
	      var r = this;return __generator(this, function (a) {
	        if (null == this.getBufferSubDataAsyncExtension) throw new Error("Cannot download matrix from output texture asynchronously, WEBGL_get_buffer_sub_data_async is not enabled.");return [2, this.downloadMatrixDriverAsync(e, function () {
	          return downloadMatrixFromOutputTextureAsync(r.gl, r.getBufferSubDataAsyncExtension, t, n, r.textureConfig);
	        })];
	      });
	    });
	  }, e.prototype.downloadMatrixFromPackedTexture = function (e, t, n) {
	    var r = this;return this.downloadMatrixDriver(e, function () {
	      return downloadMatrixFromPackedOutputTexture(r.gl, t, n, r.textureConfig);
	    });
	  }, e.prototype.createProgram = function (e) {
	    this.throwIfDisposed();var t = this.gl,
	        n = createFragmentShader(t, e),
	        r = createVertexShader$1(t),
	        a = createProgram(t);return callAndCheck(t, function () {
	      return t.attachShader(a, r);
	    }), callAndCheck(t, function () {
	      return t.attachShader(a, n);
	    }), linkProgram(t, a), this.autoDebugValidate && validateProgram(t, a), this.vertexAttrsAreBound || (this.setProgram(a), this.vertexAttrsAreBound = bindVertexProgramAttributeStreams(t, this.program, this.vertexBuffer)), a;
	  }, e.prototype.deleteProgram = function (e) {
	    var t = this;this.throwIfDisposed(), e === this.program && (this.program = null), null != e && callAndCheck(this.gl, function () {
	      return t.gl.deleteProgram(e);
	    });
	  }, e.prototype.setProgram = function (e) {
	    var t = this;this.throwIfDisposed(), this.program = e, null != this.program && this.autoDebugValidate && validateProgram(this.gl, this.program), callAndCheck(this.gl, function () {
	      return t.gl.useProgram(e);
	    });
	  }, e.prototype.getUniformLocation = function (e, t, n) {
	    return void 0 === n && (n = !0), this.throwIfDisposed(), n ? getProgramUniformLocationOrThrow(this.gl, e, t) : getProgramUniformLocation(this.gl, e, t);
	  }, e.prototype.getAttributeLocation = function (e, t) {
	    var n = this;return this.throwIfDisposed(), callAndCheck(this.gl, function () {
	      return n.gl.getAttribLocation(e, t);
	    });
	  }, e.prototype.getUniformLocationNoThrow = function (e, t) {
	    return this.throwIfDisposed(), this.gl.getUniformLocation(e, t);
	  }, e.prototype.setInputMatrixTexture = function (e, t, n) {
	    this.throwIfDisposed(), this.throwIfNoProgram(), bindTextureToProgramUniformSampler(this.gl, this.program, e, t, n);
	  }, e.prototype.setOutputMatrixTexture = function (e, t, n) {
	    this.setOutputMatrixTextureDriver(e, n, t);
	  }, e.prototype.setOutputPackedMatrixTexture = function (e, t, n) {
	    this.throwIfDisposed();var r = getPackedMatrixTextureShapeWidthHeight(t, n),
	        a = r[0],
	        o = r[1];this.setOutputMatrixTextureDriver(e, a, o);
	  }, e.prototype.setOutputMatrixWriteRegion = function (e, t, n, r) {
	    this.setOutputMatrixWriteRegionDriver(n, e, r, t);
	  }, e.prototype.setOutputPackedMatrixWriteRegion = function (e, t, n, r) {
	    throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
	  }, e.prototype.debugValidate = function () {
	    null != this.program && validateProgram(this.gl, this.program), validateFramebuffer(this.gl);
	  }, e.prototype.executeProgram = function () {
	    this.throwIfDisposed(), this.throwIfNoProgram();var e = this.gl;this.autoDebugValidate && this.debugValidate(), callAndCheck(e, function () {
	      return e.drawElements(e.TRIANGLES, 6, e.UNSIGNED_SHORT, 0);
	    });
	  }, e.prototype.blockUntilAllProgramsCompleted = function () {
	    var e = this;this.throwIfDisposed(), callAndCheck(this.gl, function () {
	      return e.gl.finish();
	    });
	  }, e.prototype.getQueryTimerExtension = function () {
	    return null == this.disjointQueryTimerExtension && (this.disjointQueryTimerExtension = getExtensionOrThrow(this.gl, 2 === ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
	  }, e.prototype.getQueryTimerExtensionWebGL2 = function () {
	    return this.getQueryTimerExtension();
	  }, e.prototype.getQueryTimerExtensionWebGL1 = function () {
	    return this.getQueryTimerExtension();
	  }, e.prototype.runQuery = function (e) {
	    var t = this.beginQuery();return e(), this.endQuery(), this.pollQueryTime(t);
	  }, e.prototype.beginQuery = function () {
	    if (2 === ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")) {
	      var e = this.gl,
	          t = this.getQueryTimerExtensionWebGL2(),
	          n = e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT, n), n;
	    }var r = this.getQueryTimerExtensionWebGL1(),
	        a = r.createQueryEXT();return r.beginQueryEXT(r.TIME_ELAPSED_EXT, a), a;
	  }, e.prototype.endQuery = function () {
	    if (2 !== ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")) {
	      var e = this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT);
	    } else {
	      var t = this.gl,
	          n = this.getQueryTimerExtensionWebGL2();t.endQuery(n.TIME_ELAPSED_EXT);
	    }
	  }, e.prototype.isQueryAvailable = function (e, t) {
	    if (0 === t) return !0;if (2 === t) {
	      var n = this.gl,
	          r = this.getQueryTimerExtensionWebGL2(),
	          a = n.getQueryParameter(e, n.QUERY_RESULT_AVAILABLE);return null == this.disjoint && (this.disjoint = this.gl.getParameter(r.GPU_DISJOINT_EXT)), a && !this.disjoint;
	    }a = (r = this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(e, r.QUERY_RESULT_AVAILABLE_EXT);return null == this.disjoint && (this.disjoint = this.gl.getParameter(r.GPU_DISJOINT_EXT)), a && !this.disjoint;
	  }, e.prototype.pollQueryTime = function (e) {
	    var t = this;return new Promise(function (n) {
	      var r = ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION");t.addItemToPoll(function () {
	        return t.isQueryAvailable(e, r);
	      }, function () {
	        return n(t.getQueryTime(e, r));
	      });
	    });
	  }, e.prototype.pollItems = function () {
	    for (var e = binSearchLastTrue(this.itemsToPoll.map(function (e) {
	      return e.isDoneFn;
	    })), t = 0; t <= e; ++t) {
	      (0, this.itemsToPoll[t].resolveFn)();
	    }this.itemsToPoll = this.itemsToPoll.slice(e + 1);
	  }, e.prototype.addItemToPoll = function (e, t) {
	    var n = this;this.itemsToPoll.push({ isDoneFn: e, resolveFn: t }), this.itemsToPoll.length > 1 || repeatedTry(function () {
	      return n.pollItems(), 0 === n.itemsToPoll.length;
	    });
	  }, e.prototype.getQueryTime = function (e, t) {
	    if (0 === t) return null;if (2 === t) {
	      var n = this.gl;return n.getQueryParameter(e, n.QUERY_RESULT) / 1e6;
	    }var r = this.getQueryTimerExtensionWebGL1();return r.getQueryObjectEXT(e, r.QUERY_RESULT_EXT) / 1e6;
	  }, e.prototype.downloadMatrixDriverSetup = function (e) {
	    this.throwIfDisposed(), bindColorTextureToFramebuffer(this.gl, e, this.framebuffer), this.autoDebugValidate && validateFramebuffer(this.gl);
	  }, e.prototype.downloadMatrixDriverTeardown = function () {
	    null != this.outputTexture ? (bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer), this.autoDebugValidate && validateFramebuffer(this.gl)) : unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);
	  }, e.prototype.downloadMatrixDriver = function (e, t) {
	    this.downloadMatrixDriverSetup(e);var n = t();return this.downloadMatrixDriverTeardown(), n;
	  }, e.prototype.downloadMatrixDriverAsync = function (e, t) {
	    return __awaiter(this, void 0, void 0, function () {
	      var n;return __generator(this, function (r) {
	        switch (r.label) {case 0:
	            return this.downloadMatrixDriverSetup(e), [4, t()];case 1:
	            return n = r.sent(), this.downloadMatrixDriverTeardown(), [2, n];}
	      });
	    });
	  }, e.prototype.setOutputMatrixTextureDriver = function (e, t, n) {
	    this.throwIfDisposed();var r = this.gl;bindColorTextureToFramebuffer(r, e, this.framebuffer), this.autoDebugValidate && validateFramebuffer(r), this.outputTexture = e, callAndCheck(r, function () {
	      return r.viewport(0, 0, t, n);
	    }), callAndCheck(r, function () {
	      return r.scissor(0, 0, t, n);
	    });
	  }, e.prototype.setOutputMatrixWriteRegionDriver = function (e, t, n, r) {
	    var a = this;this.throwIfDisposed(), callAndCheck(this.gl, function () {
	      return a.gl.scissor(e, t, n, r);
	    });
	  }, e.prototype.throwIfDisposed = function () {
	    if (this.disposed) throw new Error("Attempted to use disposed GPGPUContext.");
	  }, e.prototype.throwIfNoProgram = function () {
	    if (null == this.program) throw new Error("No GPU program is currently set.");
	  }, e;
	}();function binSearchLastTrue(e) {
	  for (var t = 0, n = e.length - 1, r = -1; t <= n;) {
	    var a = t + n >> 1;e[a]() ? (r = a, t = a + 1) : n = a - 1;
	  }return r;
	}function compileProgram(e, t, n, r) {
	  for (var a = t.userCode, o = n.map(function (e, n) {
	    var r = { logicalShape: e.tensor.shape, texShape: e.isUniform ? null : e.texData.texShape, isUniform: e.isUniform };return { name: t.variableNames[n], shapeInfo: r };
	  }), i = o.map(function (e) {
	    return e.shapeInfo;
	  }), s = { logicalShape: r.tensor.shape, texShape: r.texData.texShape, isUniform: !1 }, u = makeShader(o, s, a, !0 === t.supportsBroadcasting), l = e.createProgram(u), c = {}, d = 0; d < t.variableNames.length; d++) {
	    var p = t.variableNames[d];c[p] = e.getUniformLocation(l, p, !1);
	  }return { program: t, source: u, webGLProgram: l, uniformLocations: c, gpgpu: e, inShapeInfos: i, outShapeInfo: s };
	}function validateBinaryAndProgram(e, t) {
	  if (e.length !== t.length) throw Error("Binary was compiled with " + e.length + " inputs, but was executed with " + t.length + " inputs");e.forEach(function (e, n) {
	    var r = e.logicalShape,
	        a = t[n],
	        o = a.tensor.shape;if (!arraysEqual(r, o)) throw Error("Binary was compiled with different shapes than the current args. Shapes " + r + " and " + o + " must match");if (!e.isUniform || !a.isUniform) {
	      var i = e.texShape,
	          s = a.isUniform ? null : a.texData.texShape;if (!arraysEqual(i, s)) throw Error("Binary was compiled with different texture shapes than the current args. Shape " + i + " and " + s + " must match");
	    }
	  });
	}function runProgram(e, t, n, r) {
	  validateBinaryAndProgram(e.inShapeInfos, t), validateBinaryAndProgram([e.outShapeInfo], [n]);var a = n.texData.texture,
	      o = n.texData.texShape,
	      i = e.gpgpu;i.setOutputMatrixTexture(a, o[0], o[1]), i.setProgram(e.webGLProgram), t.forEach(function (t, n) {
	    var r = e.program.variableNames[n],
	        a = e.uniformLocations[r];if (null != a) {
	      if (t.isUniform) {
	        if (1 === t.tensor.size) i.gl.uniform1f(a, t.tensor.dataSync()[0]);else {
	          var o = t.tensor.dataSync();o instanceof Float32Array || (o = new Float32Array(o)), i.gl.uniform1fv(a, o);
	        }return;
	      }var s = t.texData.texture;i.setInputMatrixTexture(s, a, n);
	    }
	  }), null != r && r(i, e.webGLProgram), i.executeProgram();
	}function makeShaderKey(e, t, n) {
	  var r = "";t.concat(n).forEach(function (e) {
	    r += e.tensor.shape + "_" + (e.isUniform ? "uniform" : e.texData.texShape);
	  });var a = e.userCode,
	      o = (!0 === e.supportsBroadcasting).toString(),
	      i = e.constructor.name;return i += "_" + o + "_" + r + "_" + a;
	}var WhereProgram = function () {
	  return function (e, t, n) {
	    var r, a;if (this.variableNames = ["c", "a", "b"], this.outputShape = t, n > 4) throw Error("Where for rank " + n + " is not yet supported");if (1 === n) a = "resRC", r = "resRC";else {
	      for (var o = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], i = [], s = [], u = 0; u < t.length; u++) s.push("" + o[u]), u < e && i.push("" + o[u]);r = i.join(), a = s.join();
	    }var l = getCoordsDataType(n);this.userCode = "\n      void main() {\n        " + l + " resRC = getOutputCoords();\n        float cVal = getC(" + r + ");\n        if (cVal >= 1.0) {\n          setOutput(getA(" + a + "));\n        } else {\n          setOutput(getB(" + a + "));\n        }\n      }\n    ";
	  };
	}(),
	    LRNProgram = function () {
	  return function (e, t, n, r, a) {
	    this.variableNames = ["x"], this.outputShape = [];var o,
	        i = t,
	        s = e[3] - 1;this.outputShape = e;var u = "float(" + n + ") + float(" + r + ") * sum";o = .5 === a ? "inversesqrt(" + u + ")" : 1 === a ? "1.0/(" + u + ")" : "exp(log(" + u + ") * float(-" + a + "));", this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -" + i + "; j <= " + i + "; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  " + s + ") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * " + o + ";\n        setOutput(val);\n      }\n    ";
	  };
	}(),
	    MaxPool2DBackpropProgram = function () {
	  return function (e) {
	    this.variableNames = ["dy", "maxPos"], this.outputShape = e.inShape;var t = e.filterHeight,
	        n = e.filterWidth,
	        r = e.strideHeight,
	        a = e.strideWidth,
	        o = t - 1 - e.padInfo.top,
	        i = n - 1 - e.padInfo.left,
	        s = t * n - 1;this.userCode = "\n      const ivec2 pads = ivec2(" + o + ", " + i + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + t + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + r + ".0;\n\n          if (dyR < 0.0 || dyR >= " + e.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + n + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + a + ".0;\n\n            if (dyC < 0.0 || dyC >= " + e.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = " + s + " - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * " + n + " + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
	  };
	}(),
	    MatMulProgram = function () {
	  return function (e, t, n, r) {
	    void 0 === n && (n = !1), void 0 === r && (r = !1), this.variableNames = ["matrixA", "matrixB"];var a = n ? e[1] : e[0],
	        o = r ? t[0] : t[1],
	        i = n ? e[0] : e[1];this.outputShape = [a, o];var s = function (e, t) {
	      return n ? t + " + " + e + ", aRow" : "aRow, " + t + " + " + e;
	    },
	        u = function (e, t) {
	      return r ? "bCol, " + t + " + " + e : t + " + " + e + ", bCol";
	    },
	        l = 4 * Math.floor(i / 4),
	        c = i % 4;this.userCode = " float dotARowBCol(int aRow, int bCol) {\n      float result = 0.0;\n      for (int i = 0; i < " + l + "; i += 4) {\n        vec4 a = vec4(\n          getMatrixA(" + s(0, "i") + "),\n          getMatrixA(" + s(1, "i") + "),\n          getMatrixA(" + s(2, "i") + "),\n          getMatrixA(" + s(3, "i") + ")\n        );\n        vec4 b = vec4(\n          getMatrixB(" + u(0, "i") + "),\n          getMatrixB(" + u(1, "i") + "),\n          getMatrixB(" + u(2, "i") + "),\n          getMatrixB(" + u(3, "i") + ")\n        );\n\n        result += dot(a, b);\n      }\n\n      if (" + (1 === c) + ") {\n        result += getMatrixA(" + s(0, l) + ") *\n          getMatrixB(" + u(0, l) + ");\n      } else if (" + (2 === c) + ") {\n        vec2 a = vec2(\n          getMatrixA(" + s(0, l) + "),\n          getMatrixA(" + s(1, l) + ")\n        );\n        vec2 b = vec2(\n          getMatrixB(" + u(0, l) + "),\n          getMatrixB(" + u(1, l) + ")\n        );\n        result += dot(a, b);\n      } else if (" + (3 === c) + ") {\n        vec3 a = vec3(\n          getMatrixA(" + s(0, l) + "),\n          getMatrixA(" + s(1, l) + "),\n          getMatrixA(" + s(2, l) + ")\n        );\n        vec3 b = vec3(\n          getMatrixB(" + u(0, l) + "),\n          getMatrixB(" + u(1, l) + "),\n          getMatrixB(" + u(2, l) + ")\n        );\n        result += dot(a, b);\n      }\n\n      return result;\n    }\n\n    void main() {\n      ivec2 resRC = getOutputCoords();\n      setOutput(dotARowBCol(resRC.x, resRC.y));\n    }\n    ";
	  };
	}(),
	    MultinomialProgram = function () {
	  function e(e, t, n) {
	    this.variableNames = ["probs"], this.outputShape = [e, n], this.userCode = "\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < " + (t - 1) + "; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(" + (t - 1) + "));\n      }\n    ";
	  }return e.prototype.getCustomSetupFunc = function (e) {
	    var t = this;return function (n, r) {
	      null == t.seedLoc && (t.seedLoc = n.getUniformLocation(r, "seed")), n.gl.uniform1f(t.seedLoc, e);
	    };
	  }, e;
	}(),
	    OneHotProgram = function () {
	  return function (e, t, n, r) {
	    this.variableNames = ["indices"], this.outputShape = [e, t], this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(" + r + "), float(" + n + "),\n                      float(index == coords.y)));\n      }\n    ";
	  };
	}(),
	    PadProgram = function () {
	  return function (e, t, n) {
	    this.variableNames = ["x"], this.outputShape = t.map(function (t, n) {
	      return t[0] + e[n] + t[1];
	    });var r = e.length,
	        a = getCoordsDataType(r),
	        o = t.map(function (e) {
	      return e[0];
	    }).join(","),
	        i = t.map(function (t, n) {
	      return t[0] + e[n];
	    }).join(","),
	        s = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, r);this.userCode = 1 !== r ? "\n      " + a + " start = " + a + "(" + o + ");\n      " + a + " end = " + a + "(" + i + ");\n\n      void main() {\n        " + a + " outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(" + n + "));\n        } else {\n          " + a + " coords = outC - start;\n          setOutput(getX(" + s + "));\n        }\n      }\n    " : "\n        int start = " + o + ";\n        int end = " + i + ";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(" + n + "));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      ";
	  };
	}(),
	    Pool2DProgram = function () {
	  return function (e, t, n) {
	    if (this.variableNames = ["x"], "avg" === t && n) throw new Error("Cannot compute positions for average pool.");var r = e.filterHeight,
	        a = e.filterWidth,
	        o = e.strideHeight,
	        i = e.strideWidth,
	        s = e.padInfo.top,
	        u = e.padInfo.left;this.outputShape = e.outShape;var l = "avg" === t,
	        c = "0.0";if (l || (c = "-1.0 / 0.0"), n) this.userCode = "\n        const ivec2 strides = ivec2(" + o + ", " + i + ");\n        const ivec2 pads = ivec2(" + s + ", " + u + ");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < " + r + "; wR++) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= " + e.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + a + "; wC++) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= " + e.inWidth + ") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * " + a + " + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else {
	      var d = t + "(" + t + "(" + t + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg" === t && (d = "avgValue / count");var p = 4 * Math.floor(a / 4),
	          h = a % 4,
	          f = "\n      if (" + l + ") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode = "\n      const ivec2 strides = ivec2(" + o + ", " + i + ");\n      const ivec2 pads = ivec2(" + s + ", " + u + ");\n      const float initializationValue = " + c + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= " + e.inWidth + ") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(" + c + ");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < " + r + "; wR++) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= " + e.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + p + "; wC += 4) {\n            int xC = xCCorner + wC;\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + 1, d),\n              getValue(batch, xR, xC + 2, d),\n              getValue(batch, xR, xC + 3, d)\n            );\n\n            " + f + "\n          }\n\n          int xC = xCCorner + " + p + ";\n          if (" + (1 === h) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            " + f + "\n          } else if (" + (2 === h) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + 1, d),\n              initializationValue,\n              initializationValue\n            );\n\n            " + f + "\n          } else if (" + (3 === h) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + 1, d),\n              getValue(batch, xR, xC + 2, d),\n              initializationValue\n            );\n\n            " + f + "\n          }\n        }\n        setOutput(" + d + ");\n      }\n    ";
	    }
	  };
	}(),
	    ReduceProgram = function () {
	  return function (e, t) {
	    this.variableNames = ["x"];var n = e.windowSize,
	        r = e.batchSize,
	        a = e.inSize,
	        o = Math.ceil(a / n);this.outputShape = [r, o];var i = "0.0",
	        s = "";"min" === t ? (i = "1.0 / 0.0", s = "min") : "max" === t && (i = "-1.0 / 0.0", s = "max");var u = t + "(" + t + "(" + t + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"sum" === t ? u = "sumValue" : "all" === t && (u = "allValue");var l = 4 * Math.floor(n / 4),
	        c = n % 4,
	        d = "\n      if (" + ("sum" === t) + ") {\n        sumValue += dot(values, ones);\n      } else {\n        minMaxValue = " + s + "(values, minMaxValue);\n      }\n    ",
	        p = "vec4";"all" === t && (i = "1.0", d = "\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ", p = "bvec4");var h = "";a % n > 0 && (h = "\n        if (inIdx < 0 || inIdx >= " + a + ") {\n          return initializationValue;\n        }\n      "), this.userCode = "\n      const float initializationValue = " + i + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        " + h + "\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + n + ";\n\n        vec4 minMaxValue = vec4(" + i + ");\n        float sumValue = 0.0;\n        float allValue = 1.0;\n\n        for (int i = 0; i < " + l + "; i += 4) {\n          int inIdx = inOffset + i;\n          " + p + " values = " + p + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          " + d + "\n        }\n\n        int inIdx = inOffset + " + l + ";\n        if (" + (1 === c) + ") {\n          " + p + " values = " + p + "(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          " + d + "\n        } else if (" + (2 === c) + ") {\n          " + p + " values = " + p + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          " + d + "\n        } else if (" + (3 === c) + ") {\n          " + p + " values = " + p + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          " + d + "\n        }\n        setOutput(" + u + ");\n      }\n    ";
	  };
	}(),
	    ResizeBilinearBackpropProgram = function () {
	  return function (e, t, n) {
	    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = t.shape;var r = t.shape,
	        a = r[1],
	        o = r[2],
	        i = e.shape,
	        s = i[1],
	        u = i[2],
	        l = [n && s > 1 ? a - 1 : a, n && u > 1 ? o - 1 : o],
	        c = [n && s > 1 ? s - 1 : s, n && u > 1 ? u - 1 : u],
	        d = l[0] / c[0],
	        p = l[1] / c[1],
	        h = 1 / d,
	        f = 1 / p,
	        g = 2 * Math.ceil(h) + 2,
	        m = 2 * Math.ceil(f) + 2;this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(" + d + ");\n        const float widthScale = float(" + p + ");\n\n        const float invHeightScale = float(" + h + ");\n        const float invWidthScale = float(" + f + ");\n\n        const int winHeight = int(" + g + ");\n        const int winWidth = int(" + m + ");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= " + s + ") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= " + u + ") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), " + (a - 1) + ".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), " + (o - 1) + ".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";
	  };
	}(),
	    ResizeBilinearProgram = function () {
	  return function (e, t, n, r) {
	    this.variableNames = ["A"], this.outputShape = [];var a = e[0],
	        o = e[1],
	        i = e[2],
	        s = e[3];this.outputShape = [a, t, n, s];var u = [r && t > 1 ? o - 1 : o, r && n > 1 ? i - 1 : i],
	        l = [r && t > 1 ? t - 1 : t, r && n > 1 ? n - 1 : n];this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + u[0] / l[0] + ",\n          " + u[1] / l[1] + ");\n      const vec2 inputShapeRC = vec2(" + o + ".0, " + i + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    ";
	  };
	}(),
	    ResizeNearestNeighborProgram = function () {
	  return function (e, t, n, r) {
	    this.variableNames = ["A"], this.outputShape = [];var a = e[0],
	        o = e[1],
	        i = e[2],
	        s = e[3];this.outputShape = [a, t, n, s];var u = r ? [o - 1, i - 1] : [o, i],
	        l = r ? [t - 1, n - 1] : [t, n],
	        c = r ? "0.5" : "0.0";this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + u[0] / l[0] + ",\n          " + u[1] / l[1] + ");\n      const vec2 inputShapeRC = vec2(" + o + ".0, " + i + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + " + c + ")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    ";
	  };
	}(),
	    ReverseProgram = function () {
	  return function (e, t) {
	    this.variableNames = ["x"];var n = e.length;if (n > 4) throw new Error("WebGL backend: Reverse of rank-" + n + " tensor is not yet supported");if (this.outputShape = e, 1 !== n) {
	      var r = e.map(function (n, r) {
	        return function (n) {
	          return -1 !== t.indexOf(n) && 1 !== e[n] ? e[n] + " - coords[" + n + "] - 1" : "coords[" + n + "]";
	        }(r);
	      }).join(","),
	          a = getCoordsDataType(n);this.userCode = "\n      void main() {\n        " + a + " coords = getOutputCoords();\n        setOutput(getX(" + r + "));\n      }\n    ";
	    } else this.userCode = "\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(" + e[0] + " - coord - 1));\n        }\n      ";
	  };
	}(),
	    SegmentOpProgram = function () {
	  return function (e, t) {
	    this.variableNames = ["x", "segmentIds"];var n = e.windowSize,
	        r = e.batchSize,
	        a = e.inSize,
	        o = e.numSegments,
	        i = o * Math.ceil(a / n);this.outputShape = [r, i];var s = 4 * Math.floor(n / 4),
	        u = n % 4,
	        l = "\n        sumValue += dot(values, filter);\n    ",
	        c = "";a % n > 0 && (c = "\n        if (inIdx < 0 || inIdx >= " + a + ") {\n          return initializationValue;\n        }\n      ");var d = "";a % n > 0 && (d = "\n        if (inIdx < 0 || inIdx >= " + a + ") {\n          return -1.0;\n        }\n      "), this.userCode = "\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        " + c + "\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        " + d + "\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          " + o + ")) * float(" + n + "));\n        int currentSeg = int(mod(float(outIdx), float(" + o + ")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < " + s + "; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 filter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          " + l + "\n        }\n\n        int inIdx = inOffset + " + s + ";\n        if (" + (1 === u) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 filter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          " + l + "\n        } else if (" + (2 === u) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 filter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          " + l + "\n        } else if (" + (3 === u) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 filter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          " + l + "\n        }\n        setOutput(sumValue);\n      }\n    ";
	  };
	}(),
	    SliceProgram = function () {
	  function e(e) {
	    this.variableNames = ["source"], this.outputShape = e, this.rank = e.length;var t = getCoordsDataType(this.rank),
	        n = getCoords$1(this.rank);this.userCode = "\n      uniform " + t + " start;\n\n      void main() {\n        " + t + " sourceLoc = start + getOutputCoords();\n        setOutput(getSource(" + n + "));\n      }\n    ";
	  }return e.prototype.getCustomSetupFunc = function (e) {
	    var t = this;if (e.length !== this.rank) throw Error("The rank (" + this.rank + ") of the program must match the length of start (" + e.length + ")");return function (n, r) {
	      if (null != t.startLoc || (t.startLoc = n.getUniformLocationNoThrow(r, "start"), null != t.startLoc)) if (1 === t.rank) n.gl.uniform1i(t.startLoc, e[0]);else if (2 === t.rank) n.gl.uniform2i(t.startLoc, e[0], e[1]);else if (3 === t.rank) n.gl.uniform3i(t.startLoc, e[0], e[1], e[2]);else {
	        if (4 !== t.rank) throw Error("Slicing for rank " + t.rank + " is not yet supported");n.gl.uniform4i(t.startLoc, e[0], e[1], e[2], e[3]);
	      }
	    };
	  }, e;
	}();function getCoords$1(e) {
	  if (1 === e) return "sourceLoc";if (2 === e) return "sourceLoc.x, sourceLoc.y";if (3 === e) return "sourceLoc.x, sourceLoc.y, sourceLoc.z";if (4 === e) return "sourceLoc.x, sourceLoc.y, sourceLoc.z, sourceLoc.w";throw Error("Slicing for rank " + e + " is not yet supported");
	}var StridedSliceProgram = function () {
	  return function (e, t, n) {
	    this.variableNames = ["x"], this.outputShape = n, this.rank = n.length;var r = getCoordsDataType(this.rank),
	        a = "";a = 1 === this.rank ? "coords * strides + begin" : n.map(function (e, t) {
	      return "coords[" + t + "] * strides[" + t + "] + begin[" + t + "]";
	    }).join(","), this.userCode = "\n      " + r + " begin = " + r + "(" + e + ");\n      " + r + " strides = " + r + "(" + t + ");\n\n      void main() {\n        " + r + " coords = getOutputCoords();\n        setOutput(getX(" + a + "));\n      }\n    ";
	  };
	}(),
	    TextureManager = function () {
	  function e(e) {
	    this.gpgpu = e, this.numUsedTextures = 0, this.numFreeTextures = 0, this.freeTextures = {}, this.logEnabled = !1, this.usedTextures = {};
	  }return e.prototype.acquireTexture = function (e, t) {
	    var n,
	        r = getPhysicalFromLogicalTextureType(t),
	        a = getKeyFromTextureShape(e, r);if (a in this.freeTextures || (this.freeTextures[a] = []), a in this.usedTextures || (this.usedTextures[a] = []), this.freeTextures[a].length > 0) {
	      this.numFreeTextures--, this.numUsedTextures++, this.log();var o = this.freeTextures[a].shift();return this.usedTextures[a].push(o), o;
	    }return this.numUsedTextures++, this.log(), r === PhysicalTextureType.FLOAT32 ? n = this.gpgpu.createFloat32MatrixTexture(e[0], e[1]) : r === PhysicalTextureType.FLOAT16 ? n = this.gpgpu.createFloat16MatrixTexture(e[0], e[1]) : r === PhysicalTextureType.UNSIGNED_BYTE && (n = this.gpgpu.createUnsignedBytesMatrixTexture(e[0], e[1])), this.usedTextures[a].push(n), n;
	  }, e.prototype.releaseTexture = function (e, t, n) {
	    var r = getKeyFromTextureShape(t, getPhysicalFromLogicalTextureType(n));r in this.freeTextures || (this.freeTextures[r] = []), this.freeTextures[r].push(e), this.numFreeTextures++, this.numUsedTextures--;var a = this.usedTextures[r],
	        o = a.indexOf(e);if (o < 0) throw new Error("Cannot release a texture that was never provided by this texture manager");a.splice(o, 1), this.log();
	  }, e.prototype.log = function () {
	    if (this.logEnabled) {
	      var e = this.numFreeTextures + this.numUsedTextures;console.log("Free/Used", this.numFreeTextures + " / " + this.numUsedTextures, "(" + e + ")");
	    }
	  }, e.prototype.getNumUsedTextures = function () {
	    return this.numUsedTextures;
	  }, e.prototype.getNumFreeTextures = function () {
	    return this.numFreeTextures;
	  }, e.prototype.dispose = function () {
	    var e = this;if (null != this.freeTextures) {
	      for (var t in this.freeTextures) this.freeTextures[t].forEach(function (t) {
	        e.gpgpu.deleteMatrixTexture(t);
	      });for (var t in this.usedTextures) this.usedTextures[t].forEach(function (t) {
	        e.gpgpu.deleteMatrixTexture(t);
	      });this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0;
	    }
	  }, e;
	}();function getPhysicalFromLogicalTextureType(e) {
	  if (e === TextureUsage.DOWNLOAD || e === TextureUsage.PIXELS) return PhysicalTextureType.UNSIGNED_BYTE;if (e === TextureUsage.UPLOAD) return PhysicalTextureType.FLOAT32;if (e === TextureUsage.RENDER) return ENV.get("WEBGL_RENDER_FLOAT32_ENABLED") ? PhysicalTextureType.FLOAT32 : PhysicalTextureType.FLOAT16;throw new Error("Unknown logical texture type " + e);
	}function getKeyFromTextureShape(e, t) {
	  return e[0] + "_" + e[1] + "_" + t;
	}var TileProgram = function () {
	  return function (e, t) {
	    this.variableNames = ["A"];for (var n = new Array(e.length), r = 0; r < n.length; r++) n[r] = e[r] * t[r];this.outputShape = n, this.rank = n.length;var a = getCoordsDataType(this.rank),
	        o = getSourceCoords$1(e);this.userCode = "\n      void main() {\n        " + a + " resRC = getOutputCoords();\n        setOutput(getA(" + o + "));\n      }\n    ";
	  };
	}();function getSourceCoords$1(e) {
	  var t = e.length;if (t > 5) throw Error("Tile for rank " + t + " is not yet supported");if (1 === t) return "imod(resRC, " + e[0] + ")";for (var n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"], r = [], a = 0; a < e.length; a++) r.push("imod(" + n[a] + ", " + e[a] + ")");return r.join();
	}var TransposeProgram = function () {
	  return function (e, t) {
	    this.variableNames = ["A"];for (var n = new Array(e.length), r = 0; r < n.length; r++) n[r] = e[t[r]];this.outputShape = n, this.rank = n.length;var a = getCoordsDataType(this.rank),
	        o = getSwitchedCoords(t);this.userCode = "\n    void main() {\n      " + a + " resRC = getOutputCoords();\n      setOutput(getA(" + o + "));\n    }\n    ";
	  };
	}();function getSwitchedCoords(e) {
	  var t = e.length;if (t > 6) throw Error("Transpose for rank " + t + " is not yet supported");for (var n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u", "resRC.v"], r = new Array(t), a = 0; a < e.length; a++) r[e[a]] = n[a];return r.join();
	}var ERF_P = .3275911,
	    ERF_A1 = .254829592,
	    ERF_A2 = -.284496736,
	    ERF_A3 = 1.421413741,
	    ERF_A4 = -1.453152027,
	    ERF_A5 = 1.061405429,
	    UnaryOpProgram = function () {
	  return function (e, t) {
	    this.variableNames = ["A"], this.outputShape = e, this.userCode = "\n      float unaryOperation(float x) {\n        " + t + "\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ";
	  };
	}(),
	    CHECK_NAN_SNIPPET$1 = "if (isNaN(x)) return x;",
	    ABS = "return abs(x);",
	    RELU = CHECK_NAN_SNIPPET$1 + "\n  return (x < 0.0) ? 0.0 : x;\n",
	    ELU = "return (x >= 0.0) ? x : (exp(x) - 1.0);",
	    SELU = "\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = " + SELU_SCALEALPHA + ";\n  float scale = " + SELU_SCALE + ";\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n";function STEP(e) {
	  return void 0 === e && (e = 0), CHECK_NAN_SNIPPET$1 + "\n    return x > 0.0 ? 1.0 : float(" + e + ");\n  ";
	}var NEG = "return -x;",
	    CEIL = "return ceil(x);",
	    FLOOR = "return floor(x);",
	    SIGN = "\n  if (isNaN(x)) { return 0.0; }\n  return sign(x);\n",
	    ROUND = "\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n",
	    EXP = "return exp(x);",
	    EXPM1 = "return exp(x) - 1.0;",
	    LOG = "return log(x);",
	    LOG1P = "return log(1.0 + x);",
	    SQRT = "return sqrt(x);",
	    RSQRT = "return inversesqrt(x);",
	    SIGMOID = "return 1.0 / (1.0 + exp(-1.0 * x));",
	    SOFTPLUS = "\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n",
	    SIN = CHECK_NAN_SNIPPET$1 + "\n  return sin(x);\n",
	    COS = CHECK_NAN_SNIPPET$1 + "\n  return cos(x);\n",
	    TAN = "return tan(x);",
	    ASIN = "return asin(x);",
	    ACOS = "return acos(x);",
	    ATAN = CHECK_NAN_SNIPPET$1 + "\n  return atan(x);\n",
	    SINH = "\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n",
	    COSH = "\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n",
	    TANH = "\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n",
	    ASINH = "return log(x + sqrt(x * x + 1.0));",
	    ACOSH = "return log(x + sqrt(x * x - 1.0));",
	    ATANH = "return (log(1.0 + x) - log(1.0 - x)) / 2.0;",
	    ERF = '\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ' + ERF_P + ";\n  float a1 = " + ERF_A1 + ";\n  float a2 = " + ERF_A2 + ";\n  float a3 = " + ERF_A3 + ";\n  float a4 = " + ERF_A4 + ";\n  float a5 = " + ERF_A5 + ";\n\n  float t = 1.0 / (1.0 + p * x);\n  return 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x);\n",
	    SQUARE = "return x * x;",
	    RECIPROCAL = "return 1.0 / x;",
	    LOGICAL_NOT = "return float(!(x >= 1.0));",
	    TO_INT = "return float(int(x));",
	    BEFORE_PAGING_CONSTANT = 300,
	    SIZE_UPLOAD_UNIFORM = 32,
	    MathBackendWebGL = function () {
	  function e(e, t) {
	    if (void 0 === t && (t = !0), this.gpgpu = e, this.delayedStorage = t, this.texData = new WeakMap(), this.pendingRead = new WeakMap(), this.pendingDisposal = new WeakSet(), this.lruDataGPU = [], this.numBytesInGPU = 0, this.uploadWaitMs = 0, this.downloadWaitMs = 0, this.binaryCache = {}, this.disposed = !1, ENV.get("WEBGL_VERSION") < 1) throw new Error("WebGL is not supported on this device");ENV.get("IS_BROWSER") && (this.canvas = document.createElement("canvas")), null == e ? (this.gpgpu = new GPGPUContext(createWebGLContext(this.canvas)), this.gpgpuCreatedLocally = !0) : this.gpgpuCreatedLocally = !1, this.NUM_BYTES_BEFORE_PAGING = window.screen.height * window.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT, this.textureManager = new TextureManager(this.gpgpu);
	  }return e.prototype.register = function (e, t, n) {
	    if (this.texData.has(e)) throw new Error("Data buffer is already registered");this.texData.set(e, { shape: t, dtype: n, values: null, texture: null, texShape: null, usage: TextureUsage.RENDER });
	  }, e.prototype.fromPixels = function (e, t) {
	    if (null == e) throw new Error("MathBackendWebGL.writePixels(): pixels can not be null");var n = [e.height, e.width],
	        r = [e.height, e.width, t];if (e instanceof HTMLVideoElement) {
	      if (null == this.fromPixelsCanvas) {
	        if (!ENV.get("IS_BROWSER")) throw new Error("Can't read pixels from HTMLImageElement outside the browser.");if ("complete" !== document.readyState) throw new Error("The DOM is not ready yet. Please call tf.fromPixels() once the DOM is ready. One way to do that is to add an event listener for `DOMContentLoaded` on the document object");this.fromPixelsCanvas = document.createElement("canvas");
	      }this.fromPixelsCanvas.width = e.width, this.fromPixelsCanvas.height = e.height, this.fromPixelsCanvas.getContext("2d").drawImage(e, 0, 0, e.width, e.height), e = this.fromPixelsCanvas;
	    }var a = Tensor.make(n, {}, "int32");this.texData.get(a.dataId).usage = TextureUsage.PIXELS, this.gpgpu.uploadPixelDataToTexture(this.getTexture(a.dataId), e);var o = new FromPixelsProgram(r),
	        i = this.compileAndRun(o, [a]);return a.dispose(), i;
	  }, e.prototype.write = function (e, t) {
	    if (null == t) throw new Error("MathBackendWebGL.write(): values can not be null");this.throwIfNoData(e);var n = this.texData.get(e),
	        r = n.texture,
	        a = n.texShape,
	        o = n.usage;null != r && (this.releaseTexture(e, r, a, o), n.texture = null, n.texShape = null), n.usage = TextureUsage.UPLOAD, n.values = t, this.delayedStorage || this.uploadToGPU(e);
	  }, e.prototype.readSync = function (e) {
	    this.throwIfNoData(e);var t = this.texData.get(e),
	        n = t.shape,
	        r = t.texture,
	        a = t.values,
	        o = t.texShape,
	        i = t.dtype;if (null != a) return this.cacheOnCPU(e), a;var s,
	        u,
	        l = null != this.activeTimers;if (l && (s = performance.now()), ENV.get("WEBGL_DOWNLOAD_FLOAT_ENABLED")) u = this.gpgpu.downloadFloat32MatrixFromOutputTexture(r, o[0], o[1]);else {
	      var c = Tensor.make(n, {});this.texData.get(c.dataId).usage = TextureUsage.DOWNLOAD;var d = Tensor.make(n, { dataId: e }, i),
	          p = new EncodeFloatProgram(n),
	          h = this.compileAndRun(p, [d], c),
	          f = this.texData.get(c.dataId);u = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(f.texture, f.texShape[0], f.texShape[1]), h.dispose(), d.dispose(), c.dispose();
	    }return l && (this.downloadWaitMs += performance.now() - s), this.cacheOnCPU(e, u), t.values;
	  }, e.prototype.read = function (e) {
	    return __awaiter(this, void 0, void 0, function () {
	      var t, n, r, a, o, i, s, u;return __generator(this, function (l) {
	        switch (l.label) {case 0:
	            return this.pendingRead.has(e) ? (t = this.pendingRead.get(e), [2, new Promise(function (e) {
	              return t.push(e);
	            })]) : (this.throwIfNoData(e), n = this.texData.get(e), r = n.texture, a = n.values, o = n.texShape, null != a ? (this.cacheOnCPU(e), [2, a]) : ENV.get("WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED") ? [4, this.gpgpu.downloadMatrixFromTextureAsync(r, o[0], o[1])] : [3, 2]);case 1:
	            return i = l.sent(), this.cacheOnCPU(e, i), [2, n.values];case 2:
	            return 0 === ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") ? [2, this.readSync(e)] : (this.pendingRead.set(e, []), [4, this.gpgpu.runQuery(function () {})]);case 3:
	            return l.sent(), s = this.pendingRead.get(e), this.pendingRead.delete(e), u = this.readSync(e), s.forEach(function (e) {
	              return e(u);
	            }), this.pendingDisposal.has(e) && (this.pendingDisposal.delete(e), this.disposeData(e)), [2, u];}
	      });
	    });
	  }, e.prototype.time = function (e) {
	    return __awaiter(this, void 0, void 0, function () {
	      var t, n, r, a, o, i;return __generator(this, function (s) {
	        switch (s.label) {case 0:
	            return t = this.activeTimers, n = [], r = !1, null == this.programTimersStack ? (this.programTimersStack = n, r = !0) : this.activeTimers.push(n), this.activeTimers = n, e(), a = flatten(this.activeTimers), this.activeTimers = t, r && (this.programTimersStack = null), [4, Promise.all(a).then(function (e) {
	              var t = 0;return e.forEach(function (e) {
	                return t += e;
	              }), t;
	            })];case 1:
	            return o = s.sent(), i = { uploadWaitMs: this.uploadWaitMs, downloadWaitMs: this.downloadWaitMs, kernelMs: o, wallMs: null }, this.uploadWaitMs = 0, this.downloadWaitMs = 0, [2, i];}
	      });
	    });
	  }, e.prototype.memory = function () {
	    return { unreliable: !1, numBytesInGPU: this.numBytesInGPU };
	  }, e.prototype.startTimer = function () {
	    return ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? this.gpgpu.beginQuery() : { startMs: performance.now(), endMs: null };
	  }, e.prototype.endTimer = function (e) {
	    return ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (this.gpgpu.endQuery(), e) : (e.endMs = performance.now(), e);
	  }, e.prototype.getQueryTime = function (e) {
	    return __awaiter(this, void 0, void 0, function () {
	      var t;return __generator(this, function (n) {
	        return ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? [2, this.gpgpu.pollQueryTime(e)] : [2, (t = e).endMs - t.startMs];
	      });
	    });
	  }, e.prototype.disposeData = function (e) {
	    if (!this.pendingDisposal.has(e)) if (this.pendingRead.has(e)) this.pendingDisposal.add(e);else if (this.texData.has(e)) {
	      var t = this.texData.get(e),
	          n = t.texture,
	          r = t.texShape,
	          a = t.usage;null != n && this.releaseTexture(e, n, r, a), this.texData.delete(e);
	    }
	  }, e.prototype.getTexture = function (e) {
	    return this.uploadToGPU(e), this.texData.get(e).texture;
	  }, e.prototype.getGPGPUContext = function () {
	    return this.gpgpu;
	  }, e.prototype.getCanvas = function () {
	    return this.canvas;
	  }, e.prototype.slice = function (e, t, n) {
	    var r = new SliceProgram(n),
	        a = r.getCustomSetupFunc(t);return this.compileAndRun(r, [e], null, a);
	  }, e.prototype.stridedSlice = function (e, t, n, r, a, o) {
	    var i = getStridedSlicedInfo(e.shape, t, n, r, a, o),
	        s = i[0],
	        u = i[1];if (u.some(function (e) {
	      return 0 === e;
	    })) return tensor([], u);var l = new StridedSliceProgram(s, r, u);return this.compileAndRun(l, [e]);
	  }, e.prototype.reverse = function (e, t) {
	    var n = new ReverseProgram(e.shape, t);return this.compileAndRun(n, [e]);
	  }, e.prototype.concat = function (e, t) {
	    var n = new ConcatProgram(e.shape, t.shape);return this.compileAndRun(n, [e, t]);
	  }, e.prototype.neg = function (e) {
	    var t = new UnaryOpProgram(e.shape, NEG);return this.compileAndRun(t, [e]);
	  }, e.prototype.matMul = function (e, t, n, r) {
	    var a = new MatMulProgram(e.shape, t.shape, n, r);return this.compileAndRun(a, [e, t]);
	  }, e.prototype.multiply = function (e, t) {
	    var n = new BinaryOpProgram(MUL, e.shape, t.shape),
	        r = this.makeOutputArray(n.outputShape, upcastType(e.dtype, t.dtype));return this.compileAndRun(n, [e, t], r);
	  }, e.prototype.batchNormalization = function (e, t, n, r, a, o) {
	    var i = [e, t, n],
	        s = null;null != o && (s = o.shape, i.push(o));var u = null;null != a && (u = a.shape, i.push(a));var l = new BatchNormProgram(e.shape, t.shape, n.shape, s, u, r);return this.compileAndRun(l, i);
	  }, e.prototype.localResponseNormalization4D = function (e, t, n, r, a) {
	    var o = new LRNProgram(e.shape, t, n, r, a);return this.compileAndRun(o, [e]);
	  }, e.prototype.tile = function (e, t) {
	    var n = new TileProgram(e.shape, t);return this.compileAndRun(n, [e]);
	  }, e.prototype.pad = function (e, t, n) {
	    var r = new PadProgram(e.shape, t, n);return this.compileAndRun(r, [e]);
	  }, e.prototype.transpose = function (e, t) {
	    var n = new TransposeProgram(e.shape, t);return this.compileAndRun(n, [e]);
	  }, e.prototype.gather = function (e, t, n) {
	    var r = new GatherProgram(e.shape, t.size, n);return this.compileAndRun(r, [e, t]);
	  }, e.prototype.reduce = function (e, t, n) {
	    var r = e.shape[0],
	        a = e.shape[1],
	        o = computeOptimalWindowSize(a),
	        i = new ReduceProgram({ windowSize: o, inSize: a, batchSize: r }, t),
	        s = i.outputShape,
	        u = s[0],
	        l = s[1],
	        c = this.makeOutputArray([u, l], n);return this.compileAndRun(i, [e], c), 1 === c.shape[1] ? c : this.reduce(c, t, n);
	  }, e.prototype.argReduce = function (e, t, n) {
	    void 0 === n && (n = null);var r = e.shape[0],
	        a = e.shape[1];null != n && (r = n.shape[0], a = n.shape[1]);var o = computeOptimalWindowSize(a),
	        i = new ArgMinMaxProgram({ windowSize: o, inSize: a, batchSize: r }, t, null == n),
	        s = i.outputShape,
	        u = s[0],
	        l = s[1],
	        c = this.makeOutputArray([u, l], "int32"),
	        d = [e];return null != n && d.push(n), this.compileAndRun(i, d, c), 1 === c.shape[1] ? c : this.argReduce(e, t, c);
	  }, e.prototype.sum = function (e, t) {
	    assertAxesAreInnerMostDims("sum", t, e.rank);var n = computeOutAndReduceShapes(e.shape, t),
	        r = n[0],
	        a = sizeFromShape(n[1]),
	        o = e.as2D(-1, a),
	        i = sumOutType(e.dtype);return this.reduce(o, "sum", i).reshape(r);
	  }, e.prototype.unsortedSegmentSum = function (e, t, n) {
	    var r = 0,
	        a = getAxesPermutation([r], e.rank),
	        o = e;null != a && (o = e.transpose(a), r = getInnerMostAxes(1, e.rank)[0]);var i = computeOutShape$1(o.shape, r, n),
	        s = sizeFromShape([o.shape[r]]),
	        u = o.as2D(-1, s),
	        l = sumOutType(e.dtype),
	        c = this.segOpCompute(u, "unsortedSegmentSum", t, l, n).reshape(i);return null != a && (c = c.transpose(getUndoAxesPermutation(a))), c;
	  }, e.prototype.segOpCompute = function (e, t, n, r, a) {
	    var o = e.shape[0],
	        i = e.shape[1],
	        s = segOpComputeOptimalWindowSize(i, a),
	        u = new SegmentOpProgram({ windowSize: s, inSize: i, batchSize: o, numSegments: a }, t),
	        l = u.outputShape,
	        c = l[0],
	        d = l[1],
	        p = this.makeOutputArray([c, d], r);return this.compileAndRun(u, [e, n], p), p.shape[1] === a ? p : (n = range(0, a).tile([i / s]), this.segOpCompute(p, t, n, r, a));
	  }, e.prototype.argMin = function (e, t) {
	    var n = [t];assertAxesAreInnerMostDims("argMin", n, e.rank);var r = computeOutAndReduceShapes(e.shape, n),
	        a = r[0],
	        o = sizeFromShape(r[1]),
	        i = e.as2D(-1, o);return this.argReduce(i, "min").reshape(a);
	  }, e.prototype.argMax = function (e, t) {
	    var n = [t];assertAxesAreInnerMostDims("argMax", n, e.rank);var r = computeOutAndReduceShapes(e.shape, n),
	        a = r[0],
	        o = sizeFromShape(r[1]),
	        i = e.as2D(-1, o);return this.argReduce(i, "max").reshape(a);
	  }, e.prototype.cumsum = function (e, t, n, r) {
	    if (t !== e.rank - 1) throw new Error("WebGL cumsum shader expects an inner-most axis=" + (e.rank - 1) + " but got axis=" + t);var a = new CumSumProgram(e.shape, n, r);return this.compileAndRun(a, [e]);
	  }, e.prototype.equal = function (e, t) {
	    var n = new BinaryOpProgram(EQUAL, e.shape, t.shape),
	        r = this.makeOutputArray(n.outputShape, "bool");return this.compileAndRun(n, [e, t], r);
	  }, e.prototype.notEqual = function (e, t) {
	    var n = new BinaryOpProgram(NOT_EQUAL, e.shape, t.shape),
	        r = this.makeOutputArray(n.outputShape, "bool");return this.compileAndRun(n, [e, t], r);
	  }, e.prototype.less = function (e, t) {
	    var n = new BinaryOpProgram(LESS, e.shape, t.shape),
	        r = this.makeOutputArray(n.outputShape, "bool");return this.compileAndRun(n, [e, t], r);
	  }, e.prototype.lessEqual = function (e, t) {
	    var n = new BinaryOpProgram(LESS_EQUAL, e.shape, t.shape),
	        r = this.makeOutputArray(n.outputShape, "bool");return this.compileAndRun(n, [e, t], r);
	  }, e.prototype.greater = function (e, t) {
	    var n = new BinaryOpProgram(GREATER, e.shape, t.shape),
	        r = this.makeOutputArray(n.outputShape, "bool");return this.compileAndRun(n, [e, t], r);
	  }, e.prototype.greaterEqual = function (e, t) {
	    var n = new BinaryOpProgram(GREATER_EQUAL, e.shape, t.shape),
	        r = this.makeOutputArray(n.outputShape, "bool");return this.compileAndRun(n, [e, t], r);
	  }, e.prototype.logicalNot = function (e) {
	    var t = new UnaryOpProgram(e.shape, LOGICAL_NOT);return this.compileAndRun(t, [e]);
	  }, e.prototype.logicalAnd = function (e, t) {
	    var n = new BinaryOpProgram(LOGICAL_AND, e.shape, t.shape),
	        r = this.makeOutputArray(n.outputShape, "bool");return this.compileAndRun(n, [e, t], r);
	  }, e.prototype.logicalOr = function (e, t) {
	    var n = new BinaryOpProgram(LOGICAL_OR, e.shape, t.shape),
	        r = this.makeOutputArray(n.outputShape, "bool");return this.compileAndRun(n, [e, t], r);
	  }, e.prototype.where = function (e, t, n, r) {
	    var a = new WhereProgram(e.rank, t.shape, t.rank),
	        o = this.makeOutputArray(a.outputShape, r);return this.compileAndRun(a, [e, t, n], o);
	  }, e.prototype.topKValues = function (e, t) {
	    throw new Error("topKValues GPU not yet implemented!");
	  }, e.prototype.topKIndices = function (e, t) {
	    throw new Error("topKIndices GPU not yet implemented!");
	  }, e.prototype.min = function (e, t) {
	    assertAxesAreInnerMostDims("min", t, e.rank);var n = computeOutAndReduceShapes(e.shape, t),
	        r = n[0],
	        a = sizeFromShape(n[1]),
	        o = e.as2D(-1, a);return this.reduce(o, "min", o.dtype).reshape(r);
	  }, e.prototype.minimum = function (e, t) {
	    var n = new BinaryOpProgram(MIN, e.shape, t.shape);return this.compileAndRun(n, [e, t]);
	  }, e.prototype.mod = function (e, t) {
	    var n = new BinaryOpProgram(MOD, e.shape, t.shape);return this.compileAndRun(n, [e, t]);
	  }, e.prototype.max = function (e, t) {
	    assertAxesAreInnerMostDims("max", t, e.rank);var n = computeOutAndReduceShapes(e.shape, t),
	        r = n[0],
	        a = sizeFromShape(n[1]),
	        o = e.as2D(-1, a);return this.reduce(o, "max", o.dtype).reshape(r);
	  }, e.prototype.maximum = function (e, t) {
	    var n = new BinaryOpProgram(MAX, e.shape, t.shape);return this.compileAndRun(n, [e, t]);
	  }, e.prototype.all = function (e, t) {
	    assertAxesAreInnerMostDims("all", t, e.rank);var n = computeOutAndReduceShapes(e.shape, t),
	        r = n[0],
	        a = sizeFromShape(n[1]),
	        o = e.as2D(-1, a);return this.reduce(o, "all", o.dtype).reshape(r);
	  }, e.prototype.squaredDifference = function (e, t) {
	    var n = new BinaryOpProgram(SQUARED_DIFFERENCE, e.shape, t.shape);return this.compileAndRun(n, [e, t]);
	  }, e.prototype.realDivide = function (e, t) {
	    var n = new BinaryOpProgram(DIV, e.shape, t.shape),
	        r = this.makeOutputArray(n.outputShape, "float32");return this.compileAndRun(n, [e, t], r);
	  }, e.prototype.floorDiv = function (e, t) {
	    var n = new BinaryOpProgram(INT_DIV, e.shape, t.shape),
	        r = this.makeOutputArray(n.outputShape, "int32");return this.compileAndRun(n, [e, t], r);
	  }, e.prototype.add = function (e, t) {
	    var n = new BinaryOpProgram(ADD, e.shape, t.shape),
	        r = this.makeOutputArray(n.outputShape, upcastType(e.dtype, t.dtype));return this.compileAndRun(n, [e, t], r);
	  }, e.prototype.subtract = function (e, t) {
	    var n = new BinaryOpProgram(SUB, e.shape, t.shape),
	        r = this.makeOutputArray(n.outputShape, upcastType(e.dtype, t.dtype));return this.compileAndRun(n, [e, t], r);
	  }, e.prototype.pow = function (e, t) {
	    var n = new BinaryOpProgram(POW, e.shape, t.shape),
	        r = this.makeOutputArray(n.outputShape, upcastType(e.dtype, t.dtype));return this.compileAndRun(n, [e, t], r);
	  }, e.prototype.ceil = function (e) {
	    var t = new UnaryOpProgram(e.shape, CEIL);return this.compileAndRun(t, [e]);
	  }, e.prototype.floor = function (e) {
	    var t = new UnaryOpProgram(e.shape, FLOOR);return this.compileAndRun(t, [e]);
	  }, e.prototype.sign = function (e) {
	    var t = new UnaryOpProgram(e.shape, SIGN);return this.compileAndRun(t, [e]);
	  }, e.prototype.round = function (e) {
	    var t = new UnaryOpProgram(e.shape, ROUND);return this.compileAndRun(t, [e]);
	  }, e.prototype.exp = function (e) {
	    var t = new UnaryOpProgram(e.shape, EXP);return this.compileAndRun(t, [e]);
	  }, e.prototype.expm1 = function (e) {
	    var t = new UnaryOpProgram(e.shape, EXPM1);return this.compileAndRun(t, [e]);
	  }, e.prototype.log = function (e) {
	    var t = new UnaryOpProgram(e.shape, LOG);return this.compileAndRun(t, [e]);
	  }, e.prototype.log1p = function (e) {
	    var t = new UnaryOpProgram(e.shape, LOG1P);return this.compileAndRun(t, [e]);
	  }, e.prototype.sqrt = function (e) {
	    var t = new UnaryOpProgram(e.shape, SQRT);return this.compileAndRun(t, [e]);
	  }, e.prototype.rsqrt = function (e) {
	    var t = new UnaryOpProgram(e.shape, RSQRT);return this.compileAndRun(t, [e]);
	  }, e.prototype.square = function (e) {
	    var t = new UnaryOpProgram(e.shape, SQUARE);return this.compileAndRun(t, [e]);
	  }, e.prototype.reciprocal = function (e) {
	    var t = new UnaryOpProgram(e.shape, RECIPROCAL);return this.compileAndRun(t, [e]);
	  }, e.prototype.relu = function (e) {
	    var t = new UnaryOpProgram(e.shape, RELU);return this.compileAndRun(t, [e]);
	  }, e.prototype.elu = function (e) {
	    var t = new UnaryOpProgram(e.shape, ELU);return this.compileAndRun(t, [e]);
	  }, e.prototype.eluDer = function (e, t) {
	    var n = new BinaryOpProgram(ELU_DER, e.shape, t.shape);return this.compileAndRun(n, [e, t]);
	  }, e.prototype.selu = function (e) {
	    var t = new UnaryOpProgram(e.shape, SELU);return this.compileAndRun(t, [e]);
	  }, e.prototype.int = function (e) {
	    var t = new UnaryOpProgram(e.shape, TO_INT),
	        n = this.makeOutputArray(t.outputShape, "int32");return this.compileAndRun(t, [e], n);
	  }, e.prototype.clip = function (e, t, n) {
	    var r = new ClipProgram(e.shape, t, n);return this.compileAndRun(r, [e]);
	  }, e.prototype.abs = function (e) {
	    var t = new UnaryOpProgram(e.shape, ABS);return this.compileAndRun(t, [e]);
	  }, e.prototype.sigmoid = function (e) {
	    var t = new UnaryOpProgram(e.shape, SIGMOID);return this.compileAndRun(t, [e]);
	  }, e.prototype.softplus = function (e) {
	    var t = new UnaryOpProgram(e.shape, SOFTPLUS);return this.compileAndRun(t, [e]);
	  }, e.prototype.sin = function (e) {
	    var t = new UnaryOpProgram(e.shape, SIN);return this.compileAndRun(t, [e]);
	  }, e.prototype.cos = function (e) {
	    var t = new UnaryOpProgram(e.shape, COS);return this.compileAndRun(t, [e]);
	  }, e.prototype.tan = function (e) {
	    var t = new UnaryOpProgram(e.shape, TAN);return this.compileAndRun(t, [e]);
	  }, e.prototype.asin = function (e) {
	    var t = new UnaryOpProgram(e.shape, ASIN);return this.compileAndRun(t, [e]);
	  }, e.prototype.acos = function (e) {
	    var t = new UnaryOpProgram(e.shape, ACOS);return this.compileAndRun(t, [e]);
	  }, e.prototype.atan = function (e) {
	    var t = new UnaryOpProgram(e.shape, ATAN);return this.compileAndRun(t, [e]);
	  }, e.prototype.atan2 = function (e, t) {
	    var n = new BinaryOpProgram(ATAN2, e.shape, t.shape);return this.compileAndRun(n, [e, t]);
	  }, e.prototype.sinh = function (e) {
	    var t = new UnaryOpProgram(e.shape, SINH);return this.compileAndRun(t, [e]);
	  }, e.prototype.cosh = function (e) {
	    var t = new UnaryOpProgram(e.shape, COSH);return this.compileAndRun(t, [e]);
	  }, e.prototype.tanh = function (e) {
	    var t = new UnaryOpProgram(e.shape, TANH);return this.compileAndRun(t, [e]);
	  }, e.prototype.asinh = function (e) {
	    var t = new UnaryOpProgram(e.shape, ASINH);return this.compileAndRun(t, [e]);
	  }, e.prototype.acosh = function (e) {
	    var t = new UnaryOpProgram(e.shape, ACOSH);return this.compileAndRun(t, [e]);
	  }, e.prototype.atanh = function (e) {
	    var t = new UnaryOpProgram(e.shape, ATANH);return this.compileAndRun(t, [e]);
	  }, e.prototype.erf = function (e) {
	    var t = new UnaryOpProgram(e.shape, ERF);return this.compileAndRun(t, [e]);
	  }, e.prototype.step = function (e, t) {
	    var n = new UnaryOpProgram(e.shape, STEP(t));return this.compileAndRun(n, [e]);
	  }, e.prototype.conv2d = function (e, t, n) {
	    var r = new Conv2DProgram(n);return this.compileAndRun(r, [e, t]);
	  }, e.prototype.conv2dDerInput = function (e, t, n) {
	    var r = new Conv2DDerInputProgram(n);return this.compileAndRun(r, [e, t]);
	  }, e.prototype.conv2dDerFilter = function (e, t, n) {
	    var r = new Conv2DDerFilterProgram(n);return this.compileAndRun(r, [e, t]);
	  }, e.prototype.depthwiseConv2D = function (e, t, n) {
	    var r = new DepthwiseConv2DProgram(n);return this.compileAndRun(r, [e, t]);
	  }, e.prototype.depthwiseConv2DDerInput = function (e, t, n) {
	    var r = new DepthwiseConv2DDerInputProgram(n);return this.compileAndRun(r, [e, t]);
	  }, e.prototype.depthwiseConv2DDerFilter = function (e, t, n) {
	    var r = new DepthwiseConv2DDerFilterProgram(n);return this.compileAndRun(r, [e, t]);
	  }, e.prototype.maxPool = function (e, t) {
	    var n = new Pool2DProgram(t, "max", !1),
	        r = this.makeOutputArray(n.outputShape, e.dtype);return this.compileAndRun(n, [e], r);
	  }, e.prototype.avgPool = function (e, t) {
	    var n = new Pool2DProgram(t, "avg", !1),
	        r = this.makeOutputArray(n.outputShape, "float32");return this.compileAndRun(n, [e], r);
	  }, e.prototype.maxPoolBackprop = function (e, t, n, r) {
	    var a = new Pool2DProgram(r, "max", !0),
	        o = this.compileAndRun(a, [t]),
	        i = new MaxPool2DBackpropProgram(r),
	        s = this.makeOutputArray(i.outputShape, t.dtype),
	        u = this.compileAndRun(i, [e, o], s);return o.dispose(), u;
	  }, e.prototype.avgPoolBackprop = function (e, t, n) {
	    var r = new AvgPool2DBackpropProgram(n),
	        a = this.makeOutputArray(r.outputShape, t.dtype);return this.compileAndRun(r, [e], a);
	  }, e.prototype.cast = function (e, t) {
	    return castTensor(e, t, this);
	  }, e.prototype.reshape = function (e, t) {
	    return reshapeTensor(e, t);
	  }, e.prototype.resizeBilinear = function (e, t, n, r) {
	    var a = new ResizeBilinearProgram(e.shape, t, n, r);return this.compileAndRun(a, [e]);
	  }, e.prototype.resizeBilinearBackprop = function (e, t, n) {
	    var r = new ResizeBilinearBackpropProgram(e, t, n);return this.compileAndRun(r, [e]);
	  }, e.prototype.resizeNearestNeighbor = function (e, t, n, r) {
	    var a = new ResizeNearestNeighborProgram(e.shape, t, n, r);return this.compileAndRun(a, [e]);
	  }, e.prototype.multinomial = function (e, t, n, r) {
	    var a = t ? e : softmax(e),
	        o = a.shape[0],
	        i = a.shape[1],
	        s = new MultinomialProgram(o, i, n),
	        u = this.makeOutputArray(s.outputShape, "int32"),
	        l = s.getCustomSetupFunc(r);return this.compileAndRun(s, [a], u, l);
	  }, e.prototype.oneHot = function (e, t, n, r) {
	    var a = new OneHotProgram(e.size, t, n, r);return this.compileAndRun(a, [e]);
	  }, e.prototype.makeOutputArray = function (e, t) {
	    return Tensor.make(e, {}, t);
	  }, e.prototype.compileAndRun = function (e, t, n, r) {
	    var a = this;null == n && (n = this.makeOutputArray(e.outputShape, t[0].dtype));var o = t.map(function (e) {
	      var t = a.texData.get(e.dataId);return null == t.texture && e.size <= SIZE_UPLOAD_UNIFORM ? { tensor: e, texData: null, isUniform: !0 } : (a.uploadToGPU(e.dataId), { tensor: e, texData: t, isUniform: !1 });
	    });this.uploadToGPU(n.dataId);var i,
	        s = { tensor: n, texData: this.texData.get(n.dataId), isUniform: !1 },
	        u = makeShaderKey(e, o, s),
	        l = this.getAndSaveBinary(u, function () {
	      return compileProgram(a.gpgpu, e, o, s);
	    }),
	        c = null != this.activeTimers;if (c && (i = this.startTimer()), runProgram(l, o, s, r), this.numBytesInGPU > this.NUM_BYTES_BEFORE_PAGING) for (var d = this.numBytesInGPU - this.NUM_BYTES_BEFORE_PAGING; d > 0;) {
	      var p = this.lruDataGPU.shift(),
	          h = this.texData.get(p),
	          f = h.shape,
	          g = h.dtype;d -= this.computeBytes(f, g), this.read(p);
	    }return c && (i = this.endTimer(i), this.activeTimers.push(this.getQueryTime(i))), n;
	  }, e.prototype.getAndSaveBinary = function (e, t) {
	    return e in this.binaryCache || (this.binaryCache[e] = t()), this.binaryCache[e];
	  }, e.prototype.getTextureManager = function () {
	    return this.textureManager;
	  }, e.prototype.dispose = function () {
	    if (!this.disposed) {
	      for (var e in this.binaryCache) this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram);this.textureManager.dispose(), this.canvas.remove(), null != this.fromPixelsCanvas && this.fromPixelsCanvas.remove(), this.gpgpuCreatedLocally && this.gpgpu.dispose(), this.disposed = !0;
	    }
	  }, e.prototype.throwIfNoData = function (e) {
	    if (!this.texData.has(e)) throw new Error("WebGL backend: No data found for this tensor. Did you change your backend in the middle of the program? New backends can't use Tensors created with previous backends");
	  }, e.prototype.uploadToGPU = function (e) {
	    this.throwIfNoData(e);var t = this.texData.get(e),
	        n = t.shape,
	        r = t.values,
	        a = t.texture,
	        o = t.dtype,
	        i = t.usage;if (null != a) return this.lruDataGPU.splice(this.lruDataGPU.indexOf(e), 1), void this.lruDataGPU.push(e);var s,
	        u = null != this.activeTimers;u && (s = performance.now());var l = getTextureShapeFromLogicalShape(this.gpgpu.gl, n);t.texShape = l;var c = this.acquireTexture(e, l, i);t.texture = c, null != r && (this.gpgpu.uploadMatrixToTexture(c, l[0], l[1], typedArrayToFloat32(r, o)), t.values = null, u && (this.uploadWaitMs += performance.now() - s));
	  }, e.prototype.cacheOnCPU = function (e, t) {
	    var n = this.delayedStorage,
	        r = this.texData.get(e),
	        a = r.texture,
	        o = r.texShape,
	        i = r.dtype,
	        s = r.usage;n && null != a && (this.releaseTexture(e, a, o, s), r.texture = null, r.texShape = null), null != t && (r.values = float32ToTypedArray(t, i));
	  }, e.prototype.releaseTexture = function (e, t, n, r) {
	    var a = this.texData.get(e),
	        o = a.shape,
	        i = a.dtype,
	        s = this.lruDataGPU.indexOf(e);s >= 0 && this.lruDataGPU.splice(s, 1), this.numBytesInGPU -= this.computeBytes(o, i), this.textureManager.releaseTexture(t, n, r);
	  }, e.prototype.acquireTexture = function (e, t, n) {
	    var r = this.texData.get(e),
	        a = r.shape,
	        o = r.dtype;return this.lruDataGPU.push(e), this.numBytesInGPU += this.computeBytes(a, o), this.textureManager.acquireTexture(t, n);
	  }, e.prototype.computeBytes = function (e, t) {
	    return sizeFromShape(e) * bytesPerElement(t);
	  }, e;
	}();function float32ToTypedArray(e, t) {
	  if ("float32" === t) return e;if ("int32" === t || "bool" === t) {
	    for (var n = "int32" === t ? new Int32Array(e.length) : new Uint8Array(e.length), r = 0; r < n.length; ++r) n[r] = Math.round(e[r]);return n;
	  }throw new Error("Unknown dtype " + t);
	}function typedArrayToFloat32(e, t) {
	  return e instanceof Float32Array ? e : new Float32Array(e);
	}ENV.get("IS_BROWSER") && ENV.registerBackend("webgl", function () {
	  return new MathBackendWebGL();
	}, 2);var MathBackendCPU = function () {
	  function e() {
	    this.data = new WeakMap(), this.firstUse = !0, ENV.get("IS_BROWSER") && (this.canvas = document.createElement("canvas"));
	  }return e.prototype.register = function (e, t, n) {
	    if (this.firstUse && (this.firstUse = !1, ENV.get("IS_NODE") && console.warn("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================\n")), this.data.has(e)) throw new Error("Data buffer is already registered");this.data.set(e, null);
	  }, e.prototype.write = function (e, t) {
	    if (null == t) throw new Error("MathBackendCPU.write(): values can not be null");this.throwIfNoData(e), this.data.set(e, t);
	  }, e.prototype.fromPixels = function (e, t) {
	    if (null == e) throw new Error("MathBackendCPU.writePixels(): pixels can not be null");var n, r;if (e instanceof ImageData) n = e.data;else if (e instanceof HTMLCanvasElement) n = e.getContext("2d").getImageData(0, 0, e.width, e.height).data;else {
	      if (!(e instanceof HTMLImageElement || e instanceof HTMLVideoElement)) throw new Error("pixels is of unknown type: " + e.constructor.name);if (null == this.canvas) throw new Error("Can't read pixels from HTMLImageElement outside the browser.");this.canvas.width = e.width, this.canvas.height = e.height, this.canvas.getContext("2d").drawImage(e, 0, 0, e.width, e.height), n = this.canvas.getContext("2d").getImageData(0, 0, e.width, e.height).data;
	    }if (4 === t) r = new Int32Array(n);else {
	      var a = e.width * e.height;r = new Int32Array(a * t);for (var o = 0; o < a; o++) for (var i = 0; i < t; ++i) r[o * t + i] = n[4 * o + i];
	    }var s = [e.height, e.width, t];return tensor3d(r, s, "int32");
	  }, e.prototype.read = function (e) {
	    return __awaiter(this, void 0, void 0, function () {
	      return __generator(this, function (t) {
	        return [2, this.readSync(e)];
	      });
	    });
	  }, e.prototype.readSync = function (e) {
	    return this.throwIfNoData(e), this.data.get(e);
	  }, e.prototype.disposeData = function (e) {
	    this.data.has(e) && this.data.delete(e);
	  }, e.prototype.time = function (e) {
	    return __awaiter(this, void 0, void 0, function () {
	      var t;return __generator(this, function (n) {
	        return t = performance.now(), e(), [2, { kernelMs: performance.now() - t }];
	      });
	    });
	  }, e.prototype.memory = function () {
	    return { unreliable: !0 };
	  }, e.prototype.throwIfNoData = function (e) {
	    if (!this.data.has(e)) throw new Error("CPU backend: No data found for this tensor. Did you change your backend in the middle of the program? New backends can't use Tensors created with previous backends");
	  }, e.prototype.slice = function (e, t, n) {
	    for (var r = buffer(n, e.dtype), a = 0; a < r.size; ++a) {
	      var o = r.indexToLoc(a),
	          i = o.map(function (e, n) {
	        return e + t[n];
	      });r.set.apply(r, [e.get.apply(e, i)].concat(o));
	    }return r.toTensor();
	  }, e.prototype.stridedSlice = function (e, t, n, r, a, o) {
	    var i = getStridedSlicedInfo(e.shape, t, n, r, a, o),
	        s = i[0],
	        u = i[1];if (u.some(function (e) {
	      return 0 === e;
	    })) return tensor([], u);for (var l = buffer(u, e.dtype), c = 0; c < l.size; c++) {
	      for (var d = l.indexToLoc(c), p = new Array(d.length), h = 0; h < p.length; h++) p[h] = d[h] * r[h] + s[h];l.set.apply(l, [e.get.apply(e, p)].concat(d));
	    }return l.toTensor();
	  }, e.prototype.reverse = function (e, t) {
	    for (var n = buffer(e.shape, e.dtype), r = e.buffer(), a = function (a) {
	      var o = n.indexToLoc(a),
	          i = o.slice();t.forEach(function (t) {
	        return i[t] = e.shape[t] - 1 - i[t];
	      }), n.set.apply(n, [r.get.apply(r, i)].concat(o));
	    }, o = 0; o < n.size; o++) a(o);return n.toTensor();
	  }, e.prototype.concat = function (e, t) {
	    var n = computeOutShape(e.shape, t.shape, 1),
	        r = buffer(n, e.dtype);if (1 === e.shape[0] && 1 === t.shape[0]) {
	      var a = e.dataSync(),
	          o = t.dataSync(),
	          i = r.values;return i.set(a, 0), i.set(o, e.size), r.toTensor();
	    }for (var s = 0; s < n[0]; ++s) {
	      for (var u = 0; u < e.shape[1]; ++u) r.set(e.get(s, u), s, u);for (u = 0; u < t.shape[1]; ++u) r.set(t.get(s, u), s, u + e.shape[1]);
	    }return r.toTensor();
	  }, e.prototype.neg = function (e) {
	    return this.multiply(scalar(-1), e);
	  }, e.prototype.add = function (e, t) {
	    return this.broadcastedBinaryOp(e, t, upcastType(e.dtype, t.dtype), function (e, t) {
	      return e + t;
	    });
	  }, e.prototype.subtract = function (e, t) {
	    return this.broadcastedBinaryOp(e, t, upcastType(e.dtype, t.dtype), function (e, t) {
	      return e - t;
	    });
	  }, e.prototype.pow = function (e, t) {
	    return this.broadcastedBinaryOp(e, t, e.dtype, function (e, t) {
	      return Math.pow(e, t);
	    });
	  }, e.prototype.matMul = function (e, t, n, r) {
	    for (var a = n ? e.shape[0] : e.shape[1], o = n ? e.shape[1] : e.shape[0], i = r ? t.shape[0] : t.shape[1], s = e.dataSync(), u = t.dataSync(), l = n ? [1, e.strides[0]] : [e.strides[0], 1], c = l[0], d = l[1], p = r ? [t.strides[0], 1] : [1, t.strides[0]], h = p[0], f = p[1], g = o * c, m = i * h, v = new Float32Array(o * i), y = 0, x = 0; x < g; x += c) for (var b = 0; b < m; b += h) {
	      for (var E = x, S = b, A = 0, T = 0; T < a; ++T) A += s[E] * u[S], E += d, S += f;v[y++] = A;
	    }return tensor2d(v, [o, i]);
	  }, e.prototype.multiply = function (e, t) {
	    return this.broadcastedBinaryOp(e, t, upcastType(e.dtype, t.dtype), function (e, t) {
	      return e * t;
	    });
	  }, e.prototype.realDivide = function (e, t) {
	    return this.broadcastedBinaryOp(e, t, "float32", function (e, t) {
	      return e / t;
	    });
	  }, e.prototype.floorDiv = function (e, t) {
	    return this.broadcastedBinaryOp(e, t, "int32", function (e, t) {
	      return Math.floor(e / t);
	    });
	  }, e.prototype.sum = function (e, t) {
	    assertAxesAreInnerMostDims("sum", t, e.rank);for (var n = computeOutAndReduceShapes(e.shape, t), r = n[0], a = n[1], o = upcastType(e.dtype, "int32"), i = zeros(r, o), s = sizeFromShape(a), u = i.dataSync(), l = e.dataSync(), c = 0; c < u.length; ++c) {
	      for (var d = c * s, p = 0, h = 0; h < s; ++h) p += l[d + h];u[c] = p;
	    }return i;
	  }, e.prototype.unsortedSegmentSum = function (e, t, n) {
	    for (var r = [], a = e.rank - t.rank, o = 0; o < a; ++o) t = t.expandDims(o + 1);for (o = 0; o < n; ++o) {
	      var i = scalar(o, "int32"),
	          s = equal(i, t).asType("float32").mul(e).sum(0);r.push(s);
	    }return stack(r);
	  }, e.prototype.argMin = function (e, t) {
	    var n = [t];assertAxesAreInnerMostDims("argMin", n, e.rank);for (var r = computeOutAndReduceShapes(e.shape, n), a = r[0], o = r[1], i = zeros(a, "int32"), s = sizeFromShape(o), u = i.dataSync(), l = e.dataSync(), c = 0; c < u.length; ++c) {
	      for (var d = c * s, p = l[d], h = 0, f = 0; f < s; ++f) {
	        var g = l[d + f];g < p && (p = g, h = f);
	      }u[c] = h;
	    }return i;
	  }, e.prototype.argMax = function (e, t) {
	    var n = [t];assertAxesAreInnerMostDims("argMax", n, e.rank);for (var r = computeOutAndReduceShapes(e.shape, n), a = r[0], o = r[1], i = zeros(a, "int32"), s = sizeFromShape(o), u = i.dataSync(), l = e.dataSync(), c = 0; c < u.length; ++c) {
	      for (var d = c * s, p = l[d], h = 0, f = 0; f < s; ++f) {
	        var g = l[d + f];g > p && (p = g, h = f);
	      }u[c] = h;
	    }return i;
	  }, e.prototype.cumsum = function (e, t, n, r) {
	    if (t !== e.rank - 1) throw new Error("backend.cumsum in CPU expects an inner-most axis=" + (e.rank - 1) + " but got axis=" + t);for (var a = upcastType(e.dtype, "int32"), o = zeros(e.shape, a), i = o.dataSync(), s = e.dataSync(), u = e.shape[e.rank - 1], l = r ? function (e, t) {
	      return e + u - t - 1;
	    } : function (e, t) {
	      return e + t;
	    }, c = 0; c < s.length; c += u) for (var d = 0; d < u; d++) {
	      var p = l(c, d);if (0 === d) i[p] = n ? 0 : s[p];else {
	        var h = l(c, d - 1);i[p] = n ? s[h] + i[h] : s[p] + i[h];
	      }
	    }return o;
	  }, e.prototype.equal = function (e, t) {
	    return this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
	      return e === t ? 1 : 0;
	    });
	  }, e.prototype.notEqual = function (e, t) {
	    return this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
	      return e !== t ? 1 : 0;
	    });
	  }, e.prototype.less = function (e, t) {
	    return this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
	      return e < t ? 1 : 0;
	    });
	  }, e.prototype.lessEqual = function (e, t) {
	    return this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
	      return e <= t ? 1 : 0;
	    });
	  }, e.prototype.greater = function (e, t) {
	    return this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
	      return e > t ? 1 : 0;
	    });
	  }, e.prototype.greaterEqual = function (e, t) {
	    return this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
	      return e >= t ? 1 : 0;
	    });
	  }, e.prototype.logicalNot = function (e) {
	    for (var t = e.dataSync(), n = new Int32Array(t.length), r = 0; r < t.length; ++r) n[r] = t[r] ? 0 : 1;return Tensor.make(e.shape, { values: n }, "bool");
	  }, e.prototype.logicalAnd = function (e, t) {
	    return this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
	      return e && t;
	    });
	  }, e.prototype.logicalOr = function (e, t) {
	    return this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
	      return e || t;
	    });
	  }, e.prototype.where = function (e, t, n, r) {
	    for (var a = e.dataSync(), o = t.dataSync(), i = n.dataSync(), s = zeros(t.shape, r), u = s.dataSync(), l = 0, c = 0 === e.rank || e.rank > 1 || 1 === t.rank ? 1 : t.shape[1], d = 0; d < a.length; d++) for (var p = 0; p < c; p++) 1 === a[d] ? u[l++] = o[d] : u[l++] = i[d];return s;
	  }, e.prototype.topKValues = function (e, t) {
	    return this.topK(e, t).values;
	  }, e.prototype.topKIndices = function (e, t) {
	    return this.topK(e, t).indices;
	  }, e.prototype.topK = function (e, t) {
	    for (var n = e.dataSync(), r = [], a = 0; a < n.length; a++) r.push({ value: n[a], index: a });r.sort(function (e, t) {
	      return t.value - e.value;
	    });var o = getTypedArrayFromDType(e.dtype, t),
	        i = new Int32Array(t);for (a = 0; a < t; a++) o[a] = r[a].value, i[a] = r[a].index;return { values: tensor1d(o, e.dtype), indices: tensor1d(i, "int32") };
	  }, e.prototype.min = function (e, t) {
	    assertAxesAreInnerMostDims("min", t, e.rank);for (var n = computeOutAndReduceShapes(e.shape, t), r = n[0], a = n[1], o = zeros(r, e.dtype), i = sizeFromShape(a), s = o.dataSync(), u = e.dataSync(), l = 0; l < s.length; ++l) {
	      for (var c = l * i, d = u[c], p = 0; p < i; ++p) {
	        var h = u[c + p];h < d && (d = h);
	      }s[l] = d;
	    }return o;
	  }, e.prototype.minimum = function (e, t) {
	    return this.broadcastedBinaryOp(e, t, e.dtype, function (e, t) {
	      return Math.min(e, t);
	    });
	  }, e.prototype.mod = function (e, t) {
	    return this.broadcastedBinaryOp(e, t, e.dtype, function (e, t) {
	      var n = e % t;return e < 0 && t < 0 || e >= 0 && t >= 0 ? n : (n + t) % t;
	    });
	  }, e.prototype.max = function (e, t) {
	    assertAxesAreInnerMostDims("max", t, e.rank);for (var n = computeOutAndReduceShapes(e.shape, t), r = n[0], a = n[1], o = zeros(r, e.dtype), i = sizeFromShape(a), s = o.dataSync(), u = e.dataSync(), l = 0; l < s.length; ++l) {
	      for (var c = l * i, d = u[c], p = 0; p < i; ++p) {
	        var h = u[c + p];h > d && (d = h);
	      }s[l] = d;
	    }return o;
	  }, e.prototype.maximum = function (e, t) {
	    return this.broadcastedBinaryOp(e, t, e.dtype, function (e, t) {
	      return Math.max(e, t);
	    });
	  }, e.prototype.all = function (e, t) {
	    assertAxesAreInnerMostDims("all", t, e.rank);for (var n = computeOutAndReduceShapes(e.shape, t), r = n[0], a = n[1], o = zeros(r, e.dtype), i = sizeFromShape(a), s = o.dataSync(), u = e.dataSync(), l = 0; l < s.length; ++l) {
	      for (var c = l * i, d = u[c], p = 0; p < i; ++p) {
	        var h = u[c + p];d = d && h;
	      }s[l] = d;
	    }return o;
	  }, e.prototype.squaredDifference = function (e, t) {
	    return this.broadcastedBinaryOp(e, t, e.dtype, function (e, t) {
	      var n = e - t;return n * n;
	    });
	  }, e.prototype.ceil = function (e) {
	    for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) n[r] = Math.ceil(t[r]);return Tensor.make(e.shape, { values: n });
	  }, e.prototype.floor = function (e) {
	    for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) n[r] = Math.floor(t[r]);return Tensor.make(e.shape, { values: n });
	  }, e.prototype.sign = function (e) {
	    for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) t[r] < 0 ? n[r] = -1 : t[r] > 0 ? n[r] = 1 : n[r] = 0;return Tensor.make(e.shape, { values: n });
	  }, e.prototype.round = function (e) {
	    for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) {
	      var a = Math.floor(t[r]);t[r] - a < .5 ? n[r] = Math.floor(t[r]) : t[r] - a > .5 ? n[r] = Math.ceil(t[r]) : n[r] = a % 2 == 0 ? a : a + 1;
	    }return Tensor.make(e.shape, { values: n });
	  }, e.prototype.exp = function (e) {
	    for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) n[r] = Math.exp(t[r]);return Tensor.make(e.shape, { values: n });
	  }, e.prototype.expm1 = function (e) {
	    for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) n[r] = Math.expm1(t[r]);return Tensor.make(e.shape, { values: n });
	  }, e.prototype.log = function (e) {
	    for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) {
	      var a = t[r];n[r] = Math.log(a);
	    }return Tensor.make(e.shape, { values: n });
	  }, e.prototype.log1p = function (e) {
	    for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) {
	      var a = t[r];n[r] = Math.log1p(a);
	    }return Tensor.make(e.shape, { values: n });
	  }, e.prototype.sqrt = function (e) {
	    for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) {
	      var a = t[r];n[r] = Math.sqrt(a);
	    }return Tensor.make(e.shape, { values: n });
	  }, e.prototype.rsqrt = function (e) {
	    for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) {
	      var a = t[r];n[r] = 1 / Math.sqrt(a);
	    }return Tensor.make(e.shape, { values: n });
	  }, e.prototype.square = function (e) {
	    for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) {
	      var a = t[r];n[r] = a * a;
	    }return Tensor.make(e.shape, { values: n });
	  }, e.prototype.reciprocal = function (e) {
	    for (var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r) n[r] = 1 / t[r];return Tensor.make(e.shape, { values: n });
	  }, e.prototype.relu = function (e) {
	    for (var t = zeros(e.shape, e.dtype), n = t.dataSync(), r = e.dataSync(), a = 0; a < r.length; ++a) n[a] = Math.max(0, r[a]);return t;
	  }, e.prototype.elu = function (e) {
	    for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) {
	      var a = n[r];t[r] = a >= 0 ? a : Math.exp(a) - 1;
	    }return Tensor.make(e.shape, { values: t });
	  }, e.prototype.eluDer = function (e, t) {
	    for (var n = new Float32Array(t.size), r = t.dataSync(), a = e.dataSync(), o = 0; o < r.length; ++o) {
	      var i = r[o];n[o] = i >= 1 ? a[o] : a[o] * (i + 1);
	    }return Tensor.make(t.shape, { values: n });
	  }, e.prototype.selu = function (e) {
	    for (var t = SELU_SCALEALPHA, n = SELU_SCALE, r = new Float32Array(e.size), a = e.dataSync(), o = 0; o < a.length; ++o) {
	      var i = a[o];r[o] = i >= 0 ? n * i : t * (Math.exp(i) - 1);
	    }return Tensor.make(e.shape, { values: r });
	  }, e.prototype.clip = function (e, t, n) {
	    for (var r = new Float32Array(e.size), a = e.dataSync(), o = 0; o < a.length; ++o) r[o] = Math.min(n, Math.max(t, a[o]));return Tensor.make(e.shape, { values: r });
	  }, e.prototype.abs = function (e) {
	    for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) t[r] = Math.abs(n[r]);return Tensor.make(e.shape, { values: t });
	  }, e.prototype.int = function (e) {
	    for (var t = new Int32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) t[r] = n[r];return Tensor.make(e.shape, { values: t }, "int32");
	  }, e.prototype.sigmoid = function (e) {
	    for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) t[r] = 1 / (1 + Math.exp(-n[r]));return Tensor.make(e.shape, { values: t });
	  }, e.prototype.softplus = function (e) {
	    for (var t = Math.log(1.1920928955078125e-7) + 2, n = new Float32Array(e.size), r = e.dataSync(), a = 0; a < r.length; ++a) {
	      var o = r[a] > -t,
	          i = r[a] < t,
	          s = Math.exp(r[a]),
	          u = void 0;u = i ? s : o ? r[a] : Math.log(1 + s), n[a] = u;
	    }return Tensor.make(e.shape, { values: n });
	  }, e.prototype.sin = function (e) {
	    for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) t[r] = Math.sin(n[r]);return Tensor.make(e.shape, { values: t });
	  }, e.prototype.cos = function (e) {
	    for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) t[r] = Math.cos(n[r]);return Tensor.make(e.shape, { values: t });
	  }, e.prototype.tan = function (e) {
	    for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) t[r] = Math.tan(n[r]);return Tensor.make(e.shape, { values: t });
	  }, e.prototype.asin = function (e) {
	    for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) t[r] = Math.asin(n[r]);return Tensor.make(e.shape, { values: t });
	  }, e.prototype.acos = function (e) {
	    for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) t[r] = Math.acos(n[r]);return Tensor.make(e.shape, { values: t });
	  }, e.prototype.atan = function (e) {
	    for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) t[r] = Math.atan(n[r]);return Tensor.make(e.shape, { values: t });
	  }, e.prototype.atan2 = function (e, t) {
	    return this.broadcastedBinaryOp(e, t, e.dtype, function (e, t) {
	      return Math.atan2(e, t);
	    });
	  }, e.prototype.sinh = function (e) {
	    for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) t[r] = Math.sinh(n[r]);return Tensor.make(e.shape, { values: t });
	  }, e.prototype.cosh = function (e) {
	    for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) t[r] = Math.cosh(n[r]);return Tensor.make(e.shape, { values: t });
	  }, e.prototype.tanh = function (e) {
	    for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) t[r] = tanh(n[r]);return Tensor.make(e.shape, { values: t });
	  }, e.prototype.asinh = function (e) {
	    for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) t[r] = Math.asinh(n[r]);return Tensor.make(e.shape, { values: t });
	  }, e.prototype.acosh = function (e) {
	    for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) t[r] = Math.acosh(n[r]);return Tensor.make(e.shape, { values: t });
	  }, e.prototype.atanh = function (e) {
	    for (var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r) t[r] = Math.atanh(n[r]);return Tensor.make(e.shape, { values: t });
	  }, e.prototype.erf = function (e) {
	    for (var t = new Float32Array(e.size), n = e.dataSync(), r = ERF_P, a = ERF_A1, o = ERF_A2, i = ERF_A3, s = ERF_A4, u = ERF_A5, l = 0; l < n.length; ++l) {
	      var c = n[l],
	          d = 1 / (1 + r * c);t[l] = 1 - ((((u * d + s) * d + i) * d + o) * d + a) * d * Math.exp(-c * c);
	    }return Tensor.make(e.shape, { values: t });
	  }, e.prototype.step = function (e, t) {
	    void 0 === t && (t = 0);for (var n = new Float32Array(e.size), r = e.dataSync(), a = 0; a < r.length; ++a) {
	      var o = r[a];isNaN(o) ? n[a] = NaN : n[a] = o > 0 ? 1 : t;
	    }return Tensor.make(e.shape, { values: n });
	  }, e.prototype.conv2d = function (e, t, n) {
	    for (var r = n.filterHeight, a = n.filterWidth, o = n.dilationHeight, i = n.dilationWidth, s = n.padInfo.left, u = n.padInfo.top, l = buffer(n.outShape, e.dtype), c = 0; c < n.batchSize; ++c) for (var d = 0; d < n.outChannels; ++d) for (var p = 0; p < n.outHeight; ++p) for (var h = p * n.strideHeight - s, f = 0; f < n.outWidth; ++f) {
	      for (var g = f * n.strideWidth - u, m = 0, v = 0; v < r; v++) {
	        var y = h + v * o;if (!(y < 0 || y >= n.inHeight)) for (var x = 0; x < a; x++) {
	          var b = g + x * i;if (!(b < 0 || b >= n.inWidth)) for (var E = 0; E < n.inChannels; ++E) {
	            m += e.get(c, y, b, E) * t.get(v, x, E, d);
	          }
	        }
	      }l.set(m, c, p, f, d);
	    }return l.toTensor();
	  }, e.prototype.conv2dDerInput = function (e, t, n) {
	    for (var r = buffer(n.inShape, "float32"), a = r.values, o = r.strides, i = o[0], s = o[1], u = o[2], l = e.dataSync(), c = e.strides, d = c[0], p = c[1], h = c[2], f = t.dataSync(), g = t.strides, m = g[0], v = g[1], y = g[2], x = n.batchSize, b = n.filterHeight, E = n.filterWidth, S = n.inChannels, A = n.inHeight, T = n.inWidth, w = n.outChannels, _ = n.outHeight, R = n.outWidth, C = n.strideHeight, O = n.strideWidth, I = b - 1 - n.padInfo.top, k = E - 1 - n.padInfo.left, M = 0; M < x; ++M) for (var N = 0; N < S; ++N) for (var D = 0; D < A; ++D) for (var P = D - I, F = Math.max(0, Math.ceil(P / C)), L = Math.min(_, (b + P) / C), B = 0; B < T; ++B) {
	      for (var U = B - k, V = Math.max(0, Math.ceil(U / O)), z = Math.min(R, (E + U) / O), G = 0, W = F; W < L; ++W) for (var q = W * C - P, H = V; H < z; ++H) for (var X = d * M + p * W + h * H, j = m * (b - 1 - q) + v * (E - 1 - (H * O - U)) + y * N, K = 0; K < w; ++K) {
	        G += l[X + K] * f[j + K];
	      }a[i * M + s * D + u * B + N] = G;
	    }return r.toTensor();
	  }, e.prototype.conv2dDerFilter = function (e, t, n) {
	    for (var r = n.strideHeight, a = n.strideWidth, o = n.filterHeight, i = n.filterWidth, s = buffer(n.filterShape, "float32"), u = n.padInfo.left, l = n.padInfo.top, c = 0; c < o; ++c) for (var d = Math.max(0, Math.ceil((l - c) / r)), p = Math.min(n.outHeight, (n.inHeight + l - c) / r), h = 0; h < i; ++h) for (var f = Math.max(0, Math.ceil((u - h) / a)), g = Math.min(n.outWidth, (n.inWidth + u - h) / a), m = 0; m < n.inChannels; ++m) for (var v = 0; v < n.outChannels; ++v) {
	      for (var y = 0, x = 0; x < n.batchSize; ++x) for (var b = d; b < p; ++b) for (var E = c + b * r - l, S = f; S < g; ++S) {
	        var A = h + S * a - u;y += e.get(x, E, A, m) * t.get(x, b, S, v);
	      }s.set(y, c, h, m, v);
	    }return s.toTensor();
	  }, e.prototype.depthwiseConv2D = function (e, t, n) {
	    for (var r = n.filterHeight, a = n.filterWidth, o = n.dilationHeight, i = n.dilationWidth, s = n.padInfo.left, u = n.padInfo.top, l = n.outChannels / n.inChannels, c = buffer(n.outShape, e.dtype), d = 0; d < n.batchSize; ++d) for (var p = 0; p < n.inChannels; ++p) for (var h = 0; h < n.outHeight; ++h) for (var f = h * n.strideHeight - s, g = 0; g < n.outWidth; ++g) for (var m = g * n.strideWidth - u, v = 0; v < l; ++v) {
	      for (var y = 0, x = 0; x < r; ++x) {
	        var b = f + x * o;if (!(b < 0 || b >= n.inHeight)) for (var E = 0; E < a; ++E) {
	          var S = m + E * i;if (!(S < 0 || S >= n.inWidth)) y += e.get(d, b, S, p) * t.get(x, E, p, v);
	        }
	      }c.set(y, d, h, g, p * l + v);
	    }return c.toTensor();
	  }, e.prototype.depthwiseConv2DDerInput = function (e, t, n) {
	    for (var r = buffer(n.inShape, "float32"), a = r.values, o = r.strides, i = o[0], s = o[1], u = o[2], l = e.dataSync(), c = e.strides, d = c[0], p = c[1], h = c[2], f = t.dataSync(), g = t.strides, m = g[0], v = g[1], y = g[2], x = n.batchSize, b = n.filterHeight, E = n.filterWidth, S = n.inChannels, A = n.inHeight, T = n.inWidth, w = n.outChannels, _ = n.outHeight, R = n.outWidth, C = n.strideHeight, O = n.strideWidth, I = b - 1 - n.padInfo.top, k = E - 1 - n.padInfo.left, M = w / S, N = 0; N < x; ++N) for (var D = 0; D < S; ++D) for (var P = 0; P < A; ++P) for (var F = P - I, L = Math.max(0, Math.ceil(F / C)), B = Math.min(_, (b + F) / C), U = 0; U < T; ++U) {
	      for (var V = U - k, z = Math.max(0, Math.ceil(V / O)), G = Math.min(R, (E + V) / O), W = 0, q = L; q < B; ++q) for (var H = q * C - F, X = z; X < G; ++X) for (var j = d * N + p * q + h * X, K = m * (b - 1 - H) + v * (E - 1 - (X * O - V)) + y * D, Q = 0; Q < M; ++Q) {
	        W += l[j + (D * M + Q)] * f[K + Q];
	      }a[i * N + s * P + u * U + D] = W;
	    }return r.toTensor();
	  }, e.prototype.depthwiseConv2DDerFilter = function (e, t, n) {
	    for (var r = n.strideHeight, a = n.strideWidth, o = n.filterHeight, i = n.filterWidth, s = buffer(n.filterShape, "float32"), u = n.padInfo.left, l = n.padInfo.top, c = n.outChannels / n.inChannels, d = 0; d < o; ++d) for (var p = Math.max(0, Math.ceil((l - d) / r)), h = Math.min(n.outHeight, (n.inHeight + l - d) / r), f = 0; f < i; ++f) for (var g = Math.max(0, Math.ceil((u - f) / a)), m = Math.min(n.outWidth, (n.inWidth + u - f) / a), v = 0; v < n.outChannels; ++v) {
	      for (var y = Math.trunc(v / c), x = v % c, b = 0, E = 0; E < n.batchSize; ++E) for (var S = p; S < h; ++S) for (var A = d + S * r - l, T = g; T < m; ++T) {
	        var w = f + T * a - u;b += e.get(E, A, w, y) * t.get(E, S, T, v);
	      }s.set(b, d, f, y, x);
	    }return s.toTensor();
	  }, e.prototype.tile = function (e, t) {
	    for (var n = new Array(e.rank), r = 0; r < n.length; r++) n[r] = e.shape[r] * t[r];var a = buffer(n, e.dtype),
	        o = e.buffer();for (r = 0; r < a.values.length; ++r) {
	      for (var i = a.indexToLoc(r), s = new Array(e.rank), u = 0; u < s.length; u++) s[u] = i[u] % e.shape[u];var l = o.locToIndex(s);a.values[r] = o.values[l];
	    }return a.toTensor();
	  }, e.prototype.pad = function (e, t, n) {
	    var r = t.map(function (t, n) {
	      return t[0] + e.shape[n] + t[1];
	    }),
	        a = t.map(function (e) {
	      return e[0];
	    }),
	        o = e.buffer(),
	        i = buffer(r, e.dtype);0 !== n && i.values.fill(n);for (var s = 0; s < e.size; s++) {
	      var u = o.indexToLoc(s),
	          l = u.map(function (e, t) {
	        return e + a[t];
	      });i.set.apply(i, [e.get.apply(e, u)].concat(l));
	    }return i.toTensor();
	  }, e.prototype.transpose = function (e, t) {
	    for (var n = new Array(e.rank), r = 0; r < n.length; r++) n[r] = e.shape[t[r]];var a = e.dataSync(),
	        o = buffer(n, e.dtype),
	        i = e.buffer();for (r = 0; r < e.size; ++r) {
	      for (var s = i.indexToLoc(r), u = new Array(s.length), l = 0; l < u.length; l++) u[l] = s[t[l]];var c = o.locToIndex(u);o.values[c] = a[r];
	    }return o.toTensor();
	  }, e.prototype.gather = function (e, t, n) {
	    var r = e.shape.slice(),
	        a = t.dataSync();r[n] = a.length;for (var o = buffer(r, e.dtype), i = e.buffer(), s = 0; s < o.size; ++s) {
	      var u = o.indexToLoc(s),
	          l = u.slice();l[n] = a[u[n]];var c = i.locToIndex(l);o.values[s] = i.values[c];
	    }return o.toTensor();
	  }, e.prototype.pool = function (e, t, n) {
	    for (var r = t.strideHeight, a = t.strideWidth, o = t.filterHeight, i = t.filterWidth, s = buffer(t.outShape, "float32"), u = t.padInfo.top, l = t.padInfo.left, c = 0; c < t.batchSize; ++c) for (var d = 0; d < t.inChannels; ++d) for (var p = 0; p < t.outHeight; ++p) for (var h = p * r - u, f = Math.max(0, h), g = Math.min(t.inHeight, o + h), m = 0; m < t.outWidth; ++m) {
	      for (var v = m * a - l, y = Math.max(0, v), x = Math.min(t.inWidth, i + v), b = "max" === n ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, E = 0, S = 0, A = f; A < g; ++A) {
	        for (var T = y; T < x; ++T) {
	          var w = e.get(c, A, T, d);"max" === n && w > b ? b = w : "avg" === n && (E += w, S++);
	        }if (isNaN(b)) break;
	      }s.set("avg" === n ? E / S : b, c, p, m, d);
	    }return s.toTensor();
	  }, e.prototype.maxPool = function (e, t) {
	    return this.pool(e, t, "max");
	  }, e.prototype.maxPoolPositions = function (e, t) {
	    for (var n = buffer(t.outShape, "int32"), r = t.strideHeight, a = t.strideWidth, o = t.filterHeight, i = t.filterWidth, s = t.padInfo.top, u = t.padInfo.left, l = 0; l < t.batchSize; ++l) for (var c = 0; c < t.inChannels; ++c) for (var d = 0; d < t.outHeight; ++d) for (var p = d * r - s, h = Math.max(0, p), f = Math.min(t.inHeight, o + p), g = 0; g < t.outWidth; ++g) {
	      for (var m = g * a - u, v = Math.max(0, m), y = Math.min(t.inWidth, i + m), x = Number.NEGATIVE_INFINITY, b = -1, E = h; E < f; ++E) for (var S = E - p, A = v; A < y; ++A) {
	        var T = A - m,
	            w = e.get(l, E, A, c);w > x && (x = w, b = S * i + T);
	      }n.set(b, l, d, g, c);
	    }return n.toTensor();
	  }, e.prototype.maxPoolBackprop = function (e, t, n, r) {
	    for (var a = this.maxPoolPositions(t, r), o = r.strideHeight, i = r.strideWidth, s = r.filterHeight, u = r.filterWidth, l = u - 1 - r.padInfo.left, c = s - 1 - r.padInfo.top, d = buffer(t.shape, "float32"), p = 0; p < r.batchSize; ++p) for (var h = 0; h < r.inChannels; ++h) for (var f = 0; f < r.inHeight; ++f) for (var g = 0; g < r.inWidth; ++g) {
	      for (var m = f - c, v = g - l, y = 0, x = 0; x < s; ++x) {
	        var b = (m + x) / o;if (!(b < 0 || b >= r.outHeight || Math.floor(b) !== b)) for (var E = 0; E < u; ++E) {
	          var S = (v + E) / i;if (!(S < 0 || S >= r.outWidth || Math.floor(S) !== S)) {
	            var A = s * u - 1 - a.get(p, b, S, h) === x * u + E ? 1 : 0;if (0 !== A) y += e.get(p, b, S, h) * A;
	          }
	        }
	      }d.set(y, p, f, g, h);
	    }return d.toTensor();
	  }, e.prototype.avgPoolBackprop = function (e, t, n) {
	    for (var r = n.strideHeight, a = n.strideWidth, o = n.filterHeight, i = n.filterWidth, s = i - 1 - n.padInfo.left, u = o - 1 - n.padInfo.top, l = buffer(t.shape, "float32"), c = 1 / (o * i), d = 0; d < n.batchSize; ++d) for (var p = 0; p < n.inChannels; ++p) for (var h = 0; h < n.inHeight; ++h) for (var f = 0; f < n.inWidth; ++f) {
	      for (var g = h - u, m = f - s, v = 0, y = 0; y < o; ++y) {
	        var x = (g + y) / r;if (!(x < 0 || x >= n.outHeight || Math.floor(x) !== x)) for (var b = 0; b < i; ++b) {
	          var E = (m + b) / a;if (!(E < 0 || E >= n.outWidth || Math.floor(E) !== E)) v += e.get(d, x, E, p);
	        }
	      }l.set(v * c, d, h, f, p);
	    }return l.toTensor();
	  }, e.prototype.cast = function (e, t) {
	    return castTensor(e, t, this);
	  }, e.prototype.reshape = function (e, t) {
	    return reshapeTensor(e, t);
	  }, e.prototype.avgPool = function (e, t) {
	    return this.pool(e, t, "avg").toFloat();
	  }, e.prototype.resizeBilinear = function (e, t, n, r) {
	    for (var a = e.shape, o = a[0], i = a[1], s = a[2], u = a[3], l = buffer([o, t, n, u], e.dtype), c = [r && t > 1 ? i - 1 : i, r && n > 1 ? s - 1 : s], d = [r && t > 1 ? t - 1 : t, r && n > 1 ? n - 1 : n], p = 0; p < o; p++) for (var h = 0; h < t; h++) for (var f = 0; f < n; f++) for (var g = 0; g < u; g++) {
	      var m = c[0] * h / d[0],
	          v = c[1] * f / d[1],
	          y = Math.floor(m),
	          x = Math.min(i - 1, Math.ceil(m)),
	          b = Math.floor(v),
	          E = Math.min(s - 1, Math.ceil(v)),
	          S = e.get(p, y, b, g),
	          A = e.get(p, x, b, g),
	          T = v - b,
	          w = S + (e.get(p, y, E, g) - S) * T,
	          _ = w + (A + (e.get(p, x, E, g) - A) * T - w) * (m - y);l.set(_, p, h, f, g);
	    }return l.toTensor();
	  }, e.prototype.resizeBilinearBackprop = function (e, t, n) {
	    for (var r = t.shape, a = r[0], o = r[1], i = r[2], s = r[3], u = e.shape, l = u[1], c = u[2], d = buffer([a, o, i, s], t.dtype), p = [n && l > 1 ? o - 1 : o, n && c > 1 ? i - 1 : i], h = [n && l > 1 ? l - 1 : l, n && c > 1 ? c - 1 : c], f = p[0] / h[0], g = p[1] / h[1], m = 0; m < a; m++) for (var v = 0; v < l; v++) for (var y = v * f, x = Math.floor(y), b = Math.min(Math.ceil(y), o - 1), E = y - x, S = 1 - E, A = 0; A < c; A++) for (var T = A * g, w = Math.floor(T), _ = Math.min(Math.ceil(T), i - 1), R = T - w, C = 1 - R, O = 0; O < s; O++) {
	      var I = e.get(m, v, A, O),
	          k = d.get(m, x, w, O);k += I * S * C, d.set(k, m, x, w, O);var M = d.get(m, x, _, O);M += I * S * R, d.set(M, m, x, _, O);var N = d.get(m, b, w, O);N += I * E * C, d.set(N, m, b, w, O);var D = d.get(m, b, _, O);D += I * E * R, d.set(D, m, b, _, O);
	    }return d.toTensor();
	  }, e.prototype.resizeNearestNeighbor = function (e, t, n, r) {
	    for (var a = e.shape, o = a[0], i = a[1], s = a[2], u = a[3], l = buffer([o, t, n, u], e.dtype), c = r ? [i - 1, s - 1] : [i, s], d = r ? [t - 1, n - 1] : [t, n], p = 0; p < o; p++) for (var h = 0; h < t; h++) for (var f = 0; f < n; f++) for (var g = 0; g < u; g++) {
	      var m = c[0] * h / d[0],
	          v = c[1] * f / d[1],
	          y = Math.min(i - 1, r ? Math.round(m) : Math.floor(m)),
	          x = Math.min(s - 1, r ? Math.round(v) : Math.floor(v)),
	          b = e.get(p, y, x, g);l.set(b, p, h, f, g);
	    }return l.toTensor();
	  }, e.prototype.batchNormalization = function (e, t, n, r, a, o) {
	    for (var i = e.dataSync(), s = t.dataSync(), u = n.dataSync(), l = a ? a.dataSync() : new Float32Array([1]), c = o ? o.dataSync() : new Float32Array([0]), d = new Float32Array(i.length), p = 0; p < i.length; p++) d[p] = c[p % c.length] + (i[p] - s[p % s.length]) * l[p % l.length] / Math.sqrt(u[p % u.length] + r);return tensor4d(d, e.shape);
	  }, e.prototype.localResponseNormalization4D = function (e, t, n, r, a) {
	    var o = buffer(e.shape, "float32"),
	        i = t,
	        s = o.shape[3] - 1;function u(t, n, r, a) {
	      for (var o = 0, u = Math.max(0, a - i); u <= Math.min(a + i, s); u++) {
	        var l = e.get(t, n, r, u);o += l * l;
	      }return o;
	    }for (var l = 0; l < o.shape[0]; l++) for (var c = 0; c <= o.shape[1]; c++) for (var d = 0; d < o.shape[2]; d++) for (var p = 0; p < o.shape[3]; p++) {
	      var h = u(l, c, d, p),
	          f = e.get(l, c, d, p) * Math.pow(n + r * h, -a);o.set(f, l, c, d, p);
	    }return o.toTensor();
	  }, e.prototype.multinomial = function (e, t, n, r) {
	    for (var a = t ? e : softmax(e), o = a.shape[0], i = a.shape[1], s = zeros([o, n], "int32"), u = s.dataSync(), l = a.dataSync(), c = 0; c < o; ++c) {
	      var d = c * i,
	          p = new Float32Array(i - 1);p[0] = l[d];for (var h = 1; h < p.length; ++h) p[h] = p[h - 1] + l[d + h];for (var f = seedrandom_1(r.toString()), g = c * n, m = 0; m < n; ++m) {
	        var v = f();u[g + m] = p.length;for (var y = 0; y < p.length; y++) if (v < p[y]) {
	          u[g + m] = y;break;
	        }
	      }
	    }return s;
	  }, e.prototype.oneHot = function (e, t, n, r) {
	    var a = new Float32Array(e.size * t);a.fill(r);for (var o = 0; o < e.size; ++o) e.get(o) >= 0 && e.get(o) < t && (a[o * t + e.get(o)] = n);return tensor2d(a, [e.size, t], "int32");
	  }, e.prototype.broadcastedBinaryOp = function (e, t, n, r) {
	    for (var a = assertAndGetBroadcastShape(e.shape, t.shape), o = buffer(a, n), i = e.dataSync(), s = t.dataSync(), u = getBroadcastDims(e.shape, a), l = getBroadcastDims(t.shape, a), c = e.buffer(), d = t.buffer(), p = function (n) {
	      var a = o.indexToLoc(n),
	          p = a.slice(-e.rank);u.forEach(function (e) {
	        return p[e] = 0;
	      });var h = c.locToIndex(p),
	          f = a.slice(-t.rank);l.forEach(function (e) {
	        return f[e] = 0;
	      });var g = d.locToIndex(f);o.values[n] = r(i[h], s[g]);
	    }, h = 0; h < o.values.length; ++h) p(h);return o.toTensor();
	  }, e.prototype.dispose = function () {}, e;
	}();ENV.registerBackend("cpu", function () {
	  return new MathBackendCPU();
	}, 1);var BrowserUtil = function () {
	  function e() {}return e.nextFrame = function () {
	    return new Promise(function (e) {
	      return requestAnimationFrame(function () {
	        return e();
	      });
	    });
	  }, __decorate([doc({ heading: "Performance", subheading: "Timing" })], e, "nextFrame", null), e;
	}(),
	    DTYPE_VALUE_SIZE_MAP = { float32: 4, int32: 4, uint16: 2, uint8: 1, bool: 1 };function encodeWeights(e) {
	  return __awaiter(this, void 0, void 0, function () {
	    var t, n, r, a;return __generator(this, function (o) {
	      switch (o.label) {case 0:
	          for (r in t = [], n = [], e) {
	            if ("float32" !== (a = e[r]).dtype && "int32" !== a.dtype && "bool" !== a.dtype) throw new Error("Unsupported dtype in weight '" + r + "': " + a.dtype);t.push({ name: r, shape: a.shape, dtype: a.dtype }), n.push(a.data());
	          }return [4, Promise.all(n)];case 1:
	          return [2, { data: concatenateTypedArrays(o.sent()), specs: t }];}
	    });
	  });
	}function decodeWeights(e, t) {
	  for (var n = {}, r = 0, a = 0, o = t; a < o.length; a++) {
	    var i = o[a],
	        s = i.name,
	        u = i.dtype,
	        l = i.shape;if (null != i.quantization) throw new Error("decodeWeights does not support quantization yet, but encountered weight '" + s + " with quantization.'");var c = sizeFromShape(l),
	        d = void 0;if ("float32" === u) d = ArrayOps.tensor(new Float32Array(e, r, c), l, "float32");else if ("int32" === u) d = ArrayOps.tensor(new Int32Array(e, r, c), l, "int32");else {
	      if ("bool" !== u) throw new Error("Unsupported dtype in weight '" + s + "': " + u);d = ArrayOps.tensor(new Uint8Array(e, r, c), l, "bool");
	    }n[s] = d, r += c * DTYPE_VALUE_SIZE_MAP[u];
	  }return n;
	}function concatenateTypedArrays(e) {
	  if (null === e) throw new Error("Invalid input value: " + JSON.stringify(e));var t = 0;e.forEach(function (e) {
	    if (e instanceof Float32Array || e instanceof Int32Array) t += e.buffer.byteLength;else {
	      if (!(e instanceof Uint8Array)) throw new Error("Unsupported TypedArray subtype: " + e.constructor.name);t += e.buffer.byteLength;
	    }
	  });var n = new Uint8Array(t),
	      r = 0;return e.forEach(function (e) {
	    n.set(new Uint8Array(e.buffer), r), r += e.buffer.byteLength;
	  }), n.buffer;
	}function stringByteLength(e) {
	  return new Blob([e]).size;
	}function arrayBufferToBase64String(e) {
	  return btoa(String.fromCharCode.apply(null, new Uint8Array(e)));
	}function base64StringToArrayBuffer(e) {
	  for (var t = atob(e), n = new Uint8Array(t.length), r = 0; r < t.length; ++r) n.set([t.charCodeAt(r)], r);return n.buffer;
	}function concatenateArrayBuffers(e) {
	  var t = 0;e.forEach(function (e) {
	    t += e.byteLength;
	  });var n = new Uint8Array(t),
	      r = 0;return e.forEach(function (e) {
	    n.set(new Uint8Array(e), r), r += e.byteLength;
	  }), n.buffer;
	}function basename(e) {
	  for (e = e.trim(); e.endsWith("/");) e = e.slice(0, e.length - 1);var t = e.split("/");return t[t.length - 1];
	}function getModelArtifactsInfoForJSON(e) {
	  if (e.modelTopology instanceof ArrayBuffer) throw new Error("Expected JSON model topology, received ArrayBuffer.");return { dateSaved: new Date(), modelTopologyType: "JSON", modelTopologyBytes: null == e.modelTopology ? 0 : stringByteLength(JSON.stringify(e.modelTopology)), weightSpecsBytes: null == e.weightSpecs ? 0 : stringByteLength(JSON.stringify(e.weightSpecs)), weightDataBytes: null == e.weightData ? 0 : e.weightData.byteLength };
	}var IORouterRegistry = function () {
	  function e() {
	    this.saveRouters = [], this.loadRouters = [];
	  }return e.getInstance = function () {
	    return null == e.instance && (e.instance = new e()), e.instance;
	  }, e.registerSaveRouter = function (t) {
	    e.getInstance().saveRouters.push(t);
	  }, e.registerLoadRouter = function (t) {
	    e.getInstance().loadRouters.push(t);
	  }, e.getSaveHandlers = function (t) {
	    return e.getHandlers(t, "save");
	  }, e.getLoadHandlers = function (t) {
	    return e.getHandlers(t, "load");
	  }, e.getHandlers = function (e, t) {
	    var n = [];return ("load" === t ? this.getInstance().loadRouters : this.getInstance().saveRouters).forEach(function (t) {
	      var r = t(e);null !== r && n.push(r);
	    }), n;
	  }, e;
	}(),
	    URL_SCHEME_SUFFIX = "://",
	    ModelStoreManagerRegistry = function () {
	  function e() {
	    this.managers = {};
	  }return e.getInstance = function () {
	    return null == e.instance && (e.instance = new e()), e.instance;
	  }, e.registerManager = function (t, n) {
	    assert(null != t, "scheme must not be undefined or null."), t.endsWith(URL_SCHEME_SUFFIX) && (t = t.slice(0, t.indexOf(URL_SCHEME_SUFFIX))), assert(t.length > 0, "scheme must not be an empty string.");var r = e.getInstance();assert(null == r.managers[t], "A model store manager is already registered for scheme '" + t + "'."), r.managers[t] = n;
	  }, e.getManager = function (e) {
	    var t = this.getInstance().managers[e];if (null == t) throw new Error("Cannot find model manager for scheme '" + e + "'");return t;
	  }, e.getSchemes = function () {
	    return Object.keys(this.getInstance().managers);
	  }, e;
	}();function parseURL(e) {
	  if (-1 === e.indexOf(URL_SCHEME_SUFFIX)) throw new Error("The url string provided does not contain a scheme. Supported schemes are: " + ModelStoreManagerRegistry.getSchemes().join(","));return { scheme: e.split(URL_SCHEME_SUFFIX)[0], path: e.split(URL_SCHEME_SUFFIX)[1] };
	}function cloneModelInternal(e, t, n) {
	  return void 0 === n && (n = !1), __awaiter(this, void 0, void 0, function () {
	    var r, a, o, i, s, u, l, c, d;return __generator(this, function (p) {
	      switch (p.label) {case 0:
	          return assert(e !== t, "Old path and new path are the same: '" + e + "'"), assert((r = IORouterRegistry.getLoadHandlers(e)).length > 0, "Copying failed because no load handler is found for source URL " + e + "."), assert(r.length < 2, "Copying failed because more than one (" + r.length + ") load handlers for source URL " + e + "."), a = r[0], assert((o = IORouterRegistry.getSaveHandlers(t)).length > 0, "Copying failed because no save handler is found for destination URL " + t + "."), assert(o.length < 2, "Copying failed because more than one (" + r.length + ") save handlers for destination URL " + t + "."), i = o[0], s = parseURL(e).scheme, u = parseURL(e).path, l = s === parseURL(e).scheme, [4, a.load()];case 1:
	          return c = p.sent(), n && l ? [4, ModelStoreManagerRegistry.getManager(s).removeModel(u)] : [3, 3];case 2:
	          p.sent(), p.label = 3;case 3:
	          return [4, i.save(c)];case 4:
	          return d = p.sent(), !n || l ? [3, 6] : [4, ModelStoreManagerRegistry.getManager(s).removeModel(u)];case 5:
	          p.sent(), p.label = 6;case 6:
	          return [2, d.modelArtifactsInfo];}
	    });
	  });
	}var ModelManagement = function () {
	  function e() {}return e.listModels = function () {
	    return __awaiter(this, void 0, void 0, function () {
	      var e, t, n, r, a, o, i;return __generator(this, function (s) {
	        switch (s.label) {case 0:
	            e = ModelStoreManagerRegistry.getSchemes(), t = {}, n = 0, r = e, s.label = 1;case 1:
	            return n < r.length ? (a = r[n], [4, ModelStoreManagerRegistry.getManager(a).listModels()]) : [3, 4];case 2:
	            for (i in o = s.sent()) t[a + URL_SCHEME_SUFFIX + i] = o[i];s.label = 3;case 3:
	            return n++, [3, 1];case 4:
	            return [2, t];}
	      });
	    });
	  }, e.removeModel = function (e) {
	    return __awaiter(this, void 0, void 0, function () {
	      var t;return __generator(this, function (n) {
	        switch (n.label) {case 0:
	            return t = parseURL(e), [4, ModelStoreManagerRegistry.getManager(t.scheme).removeModel(t.path)];case 1:
	            return [2, n.sent()];}
	      });
	    });
	  }, e.copyModel = function (e, t) {
	    return __awaiter(this, void 0, void 0, function () {
	      return __generator(this, function (n) {
	        switch (n.label) {case 0:
	            return [4, cloneModelInternal(e, t, !1)];case 1:
	            return [2, n.sent()];}
	      });
	    });
	  }, e.moveModel = function (e, t) {
	    return __awaiter(this, void 0, void 0, function () {
	      return __generator(this, function (n) {
	        switch (n.label) {case 0:
	            return [4, cloneModelInternal(e, t, !0)];case 1:
	            return [2, n.sent()];}
	      });
	    });
	  }, __decorate([doc({ heading: "Models", subheading: "Management", namespace: "io" })], e, "listModels", null), __decorate([doc({ heading: "Models", subheading: "Management", namespace: "io" })], e, "removeModel", null), __decorate([doc({ heading: "Models", subheading: "Management", namespace: "io" })], e, "copyModel", null), __decorate([doc({ heading: "Models", subheading: "Management", namespace: "io" })], e, "moveModel", null), e;
	}(),
	    DATABASE_NAME = "tensorflowjs",
	    DATABASE_VERSION = 1,
	    MODEL_STORE_NAME = "models_store",
	    INFO_STORE_NAME = "model_info_store";function getIndexedDBFactory() {
	  if (!ENV.get("IS_BROWSER")) throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");var e = window,
	      t = e.indexedDB || e.mozIndexedDB || e.webkitIndexedDB || e.msIndexedDB || e.shimIndexedDB;if (null == t) throw new Error("The current browser does not appear to support IndexedDB.");return t;
	}function setUpDatabase(e) {
	  var t = e.result;t.createObjectStore(MODEL_STORE_NAME, { keyPath: "modelPath" }), t.createObjectStore(INFO_STORE_NAME, { keyPath: "modelPath" });
	}var BrowserIndexedDB = function () {
	  function e(e) {
	    if (this.indexedDB = getIndexedDBFactory(), null == e || !e) throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath = e;
	  }return e.prototype.save = function (e) {
	    return __awaiter(this, void 0, void 0, function () {
	      return __generator(this, function (t) {
	        if (e.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return [2, this.databaseAction(this.modelPath, e)];
	      });
	    });
	  }, e.prototype.load = function () {
	    return __awaiter(this, void 0, void 0, function () {
	      return __generator(this, function (e) {
	        return [2, this.databaseAction(this.modelPath)];
	      });
	    });
	  }, e.prototype.databaseAction = function (e, t) {
	    var n = this;return new Promise(function (e, r) {
	      var a = n.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);a.onupgradeneeded = function () {
	        return setUpDatabase(a);
	      }, a.onsuccess = function () {
	        var o = a.result;if (null == t) {
	          var i = o.transaction(MODEL_STORE_NAME, "readonly"),
	              s = i.objectStore(MODEL_STORE_NAME).get(n.modelPath);s.onsuccess = function () {
	            if (null == s.result) return o.close(), r(new Error("Cannot find model with path '" + n.modelPath + "' in IndexedDB."));e(s.result.modelArtifacts);
	          }, s.onerror = function (e) {
	            return o.close(), r(s.error);
	          }, i.oncomplete = function () {
	            return o.close();
	          };
	        } else {
	          var u,
	              l = getModelArtifactsInfoForJSON(t),
	              c = o.transaction(INFO_STORE_NAME, "readwrite"),
	              d = c.objectStore(INFO_STORE_NAME),
	              p = d.put({ modelPath: n.modelPath, modelArtifactsInfo: l });p.onsuccess = function () {
	            var a = (u = o.transaction(MODEL_STORE_NAME, "readwrite")).objectStore(MODEL_STORE_NAME).put({ modelPath: n.modelPath, modelArtifacts: t, modelArtifactsInfo: l });a.onsuccess = function () {
	              return e({ modelArtifactsInfo: l });
	            }, a.onerror = function (e) {
	              var t = (d = c.objectStore(INFO_STORE_NAME)).delete(n.modelPath);t.onsuccess = function () {
	                return o.close(), r(a.error);
	              }, t.onerror = function (e) {
	                return o.close(), r(a.error);
	              };
	            };
	          }, p.onerror = function (e) {
	            return o.close(), r(p.error);
	          }, c.oncomplete = function () {
	            null == u ? o.close() : u.oncomplete = function () {
	              return o.close();
	            };
	          };
	        }
	      }, a.onerror = function (e) {
	        return r(a.error);
	      };
	    });
	  }, e.URL_SCHEME = "indexeddb://", e;
	}(),
	    indexedDBRouter = function (e) {
	  return ENV.get("IS_BROWSER") && e.startsWith(BrowserIndexedDB.URL_SCHEME) ? browserIndexedDB(e.slice(BrowserIndexedDB.URL_SCHEME.length)) : null;
	};function browserIndexedDB(e) {
	  return new BrowserIndexedDB(e);
	}function maybeStripScheme(e) {
	  return e.startsWith(BrowserIndexedDB.URL_SCHEME) ? e.slice(BrowserIndexedDB.URL_SCHEME.length) : e;
	}IORouterRegistry.registerSaveRouter(indexedDBRouter), IORouterRegistry.registerLoadRouter(indexedDBRouter);var BrowserIndexedDBManager = function () {
	  function e() {
	    this.indexedDB = getIndexedDBFactory();
	  }return e.prototype.listModels = function () {
	    return __awaiter(this, void 0, void 0, function () {
	      var e = this;return __generator(this, function (t) {
	        return [2, new Promise(function (t, n) {
	          var r = e.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);r.onupgradeneeded = function () {
	            return setUpDatabase(r);
	          }, r.onsuccess = function () {
	            var e = r.result,
	                a = e.transaction(INFO_STORE_NAME, "readonly"),
	                o = a.objectStore(INFO_STORE_NAME).getAll();o.onsuccess = function () {
	              for (var e = {}, n = 0, r = o.result; n < r.length; n++) {
	                var a = r[n];e[a.modelPath] = a.modelArtifactsInfo;
	              }t(e);
	            }, o.onerror = function (t) {
	              return e.close(), n(o.error);
	            }, a.oncomplete = function () {
	              return e.close();
	            };
	          }, r.onerror = function (e) {
	            return n(r.error);
	          };
	        })];
	      });
	    });
	  }, e.prototype.removeModel = function (e) {
	    return __awaiter(this, void 0, void 0, function () {
	      var t = this;return __generator(this, function (n) {
	        return e = maybeStripScheme(e), [2, new Promise(function (n, r) {
	          var a = t.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);a.onupgradeneeded = function () {
	            return setUpDatabase(a);
	          }, a.onsuccess = function () {
	            var t,
	                o = a.result,
	                i = o.transaction(INFO_STORE_NAME, "readwrite"),
	                s = i.objectStore(INFO_STORE_NAME),
	                u = s.get(e);u.onsuccess = function () {
	              if (null == u.result) return o.close(), r(new Error("Cannot find model with path '" + e + "' in IndexedDB."));var a = s.delete(e),
	                  i = function () {
	                var a = (t = o.transaction(MODEL_STORE_NAME, "readwrite")).objectStore(MODEL_STORE_NAME).delete(e);a.onsuccess = function () {
	                  return n(u.result.modelArtifactsInfo);
	                }, a.onerror = function (e) {
	                  return r(u.error);
	                };
	              };a.onsuccess = i, a.onerror = function (e) {
	                return i(), o.close(), r(u.error);
	              };
	            }, u.onerror = function (e) {
	              return o.close(), r(u.error);
	            }, i.oncomplete = function () {
	              null == t ? o.close() : t.oncomplete = function () {
	                return o.close();
	              };
	            };
	          }, a.onerror = function (e) {
	            return r(a.error);
	          };
	        })];
	      });
	    });
	  }, e;
	}();if (ENV.get("IS_BROWSER")) try {
	  ModelStoreManagerRegistry.registerManager(BrowserIndexedDB.URL_SCHEME, new BrowserIndexedDBManager());
	} catch (e) {}var PATH_SEPARATOR = "/",
	    PATH_PREFIX = "tensorflowjs_models",
	    INFO_SUFFIX = "info",
	    MODEL_TOPOLOGY_SUFFIX = "model_topology",
	    WEIGHT_SPECS_SUFFIX = "weight_specs",
	    WEIGHT_DATA_SUFFIX = "weight_data";function getModelKeys(e) {
	  return { info: [PATH_PREFIX, e, INFO_SUFFIX].join(PATH_SEPARATOR), topology: [PATH_PREFIX, e, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR), weightSpecs: [PATH_PREFIX, e, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR), weightData: [PATH_PREFIX, e, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR) };
	}function getModelPathFromKey(e) {
	  var t = e.split(PATH_SEPARATOR);if (t.length < 3) throw new Error("Invalid key format: " + e);return t.slice(1, t.length - 1).join(PATH_SEPARATOR);
	}function maybeStripScheme$1(e) {
	  return e.startsWith(BrowserLocalStorage.URL_SCHEME) ? e.slice(BrowserLocalStorage.URL_SCHEME.length) : e;
	}var BrowserLocalStorage = function () {
	  function e(e) {
	    if (!ENV.get("IS_BROWSER") || void 0 === window.localStorage) throw new Error("The current environment does not support local storage.");if (this.LS = window.localStorage, null == e || !e) throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath = e, this.keys = getModelKeys(this.modelPath);
	  }return e.prototype.save = function (e) {
	    return __awaiter(this, void 0, void 0, function () {
	      var t, n, r, a;return __generator(this, function (o) {
	        if (e.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");t = JSON.stringify(e.modelTopology), n = JSON.stringify(e.weightSpecs), r = getModelArtifactsInfoForJSON(e);try {
	          return this.LS.setItem(this.keys.info, JSON.stringify(r)), this.LS.setItem(this.keys.topology, t), this.LS.setItem(this.keys.weightSpecs, n), this.LS.setItem(this.keys.weightData, arrayBufferToBase64String(e.weightData)), [2, { modelArtifactsInfo: r }];
	        } catch (e) {
	          for (a in this.keys) this.LS.removeItem(this.keys[a]);throw new Error("Failed to save model '" + this.modelPath + "' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=" + r.modelTopologyBytes + ", weightSpecsBytes=" + r.weightSpecsBytes + ", weightDataBytes=" + r.weightDataBytes + ".");
	        }return [2];
	      });
	    });
	  }, e.prototype.load = function () {
	    return __awaiter(this, void 0, void 0, function () {
	      var e, t, n, r, a;return __generator(this, function (o) {
	        if (null == (e = JSON.parse(this.LS.getItem(this.keys.info)))) throw new Error("In local storage, there is no model with name '" + this.modelPath + "'");if ("JSON" !== e.modelTopologyType) throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");if (t = {}, null == (n = JSON.parse(this.LS.getItem(this.keys.topology)))) throw new Error("In local storage, the topology of model '" + this.modelPath + "' is missing.");if (t.modelTopology = n, null == (r = JSON.parse(this.LS.getItem(this.keys.weightSpecs)))) throw new Error("In local storage, the weight specs of model '" + this.modelPath + "' are missing.");if (t.weightSpecs = r, null == (a = this.LS.getItem(this.keys.weightData))) throw new Error("In local storage, the binary weight values of model '" + this.modelPath + "' are missing.");return t.weightData = base64StringToArrayBuffer(a), [2, t];
	      });
	    });
	  }, e.URL_SCHEME = "localstorage://", e;
	}(),
	    localStorageRouter = function (e) {
	  return ENV.get("IS_BROWSER") && e.startsWith(BrowserLocalStorage.URL_SCHEME) ? browserLocalStorage(e.slice(BrowserLocalStorage.URL_SCHEME.length)) : null;
	};function browserLocalStorage(e) {
	  return new BrowserLocalStorage(e);
	}IORouterRegistry.registerSaveRouter(localStorageRouter), IORouterRegistry.registerLoadRouter(localStorageRouter);var BrowserLocalStorageManager = function () {
	  function e() {
	    assert(ENV.get("IS_BROWSER"), "Current environment is not a web browser"), assert(void 0 !== window.localStorage, "Current browser does not appear to support localStorage"), this.LS = window.localStorage;
	  }return e.prototype.listModels = function () {
	    return __awaiter(this, void 0, void 0, function () {
	      var e, t, n, r, a, o;return __generator(this, function (i) {
	        for (e = {}, t = PATH_PREFIX + PATH_SEPARATOR, n = PATH_SEPARATOR + INFO_SUFFIX, r = 0; r < this.LS.length; ++r) (a = this.LS.key(r)).startsWith(t) && a.endsWith(n) && (o = getModelPathFromKey(a), e[o] = JSON.parse(this.LS.getItem(a)));return [2, e];
	      });
	    });
	  }, e.prototype.removeModel = function (e) {
	    return __awaiter(this, void 0, void 0, function () {
	      var t, n;return __generator(this, function (r) {
	        if (e = maybeStripScheme$1(e), t = getModelKeys(e), null == this.LS.getItem(t.info)) throw new Error("Cannot find model at path '" + e + "'");return n = JSON.parse(this.LS.getItem(t.info)), this.LS.removeItem(t.info), this.LS.removeItem(t.topology), this.LS.removeItem(t.weightSpecs), this.LS.removeItem(t.weightData), [2, n];
	      });
	    });
	  }, e;
	}();if (ENV.get("IS_BROWSER")) try {
	  ModelStoreManagerRegistry.registerManager(BrowserLocalStorage.URL_SCHEME, new BrowserLocalStorageManager());
	} catch (e) {}var DEFAULT_FILE_NAME_PREFIX = "model",
	    DEFAULT_JSON_EXTENSION_NAME = ".json",
	    DEFAULT_WEIGHT_DATA_EXTENSION_NAME = ".weights.bin",
	    BrowserDownloads = function () {
	  function e(t) {
	    if (!ENV.get("IS_BROWSER")) throw new Error("triggerDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(e.URL_SCHEME) && (t = t.slice(e.URL_SCHEME.length)), null != t && 0 !== t.length || (t = DEFAULT_FILE_NAME_PREFIX), this.modelTopologyFileName = t + DEFAULT_JSON_EXTENSION_NAME, this.weightDataFileName = t + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;
	  }return e.prototype.save = function (e) {
	    return __awaiter(this, void 0, void 0, function () {
	      var t, n, r, a, o, i;return __generator(this, function (s) {
	        if (t = window.URL.createObjectURL(new Blob([e.weightData], { type: "application/octet-stream" })), e.modelTopology instanceof ArrayBuffer) throw new Error("DownloadTrigger.save() does not support saving model topology in binary formats yet.");return n = [{ paths: ["./" + this.weightDataFileName], weights: e.weightSpecs }], r = { modelTopology: e.modelTopology, weightsManifest: n }, a = window.URL.createObjectURL(new Blob([JSON.stringify(r)], { type: "application/json" })), (o = null == this.jsonAnchor ? document.createElement("a") : this.jsonAnchor).download = this.modelTopologyFileName, o.href = a, o.click(), null != e.weightData && ((i = null == this.weightDataAnchor ? document.createElement("a") : this.weightDataAnchor).download = this.weightDataFileName, i.href = t, i.click()), [2, { modelArtifactsInfo: getModelArtifactsInfoForJSON(e) }];
	      });
	    });
	  }, e.URL_SCHEME = "downloads://", e;
	}(),
	    BrowserFiles = function () {
	  function e(e) {
	    if (null == e || e.length < 1) throw new Error("When calling browserFiles, at least 1 file is required, but received " + e);this.files = e;
	  }return e.prototype.load = function () {
	    return __awaiter(this, void 0, void 0, function () {
	      var e,
	          t,
	          n = this;return __generator(this, function (r) {
	        return e = this.files[0], t = this.files.slice(1), [2, new Promise(function (r, a) {
	          var o = new FileReader();o.onload = function (o) {
	            var i = JSON.parse(o.target.result),
	                s = i.modelTopology;if (null != s) {
	              0 === t.length && r({ modelTopology: s });var u = i.weightsManifest;if (null != u) {
	                var l;try {
	                  l = n.checkManifestAndWeightFiles(u, t);
	                } catch (e) {
	                  return void a(e);
	                }var c = [],
	                    d = [],
	                    p = [];u.forEach(function (e) {
	                  e.paths.forEach(function (e) {
	                    d.push(e), p.push(null);
	                  }), c.push.apply(c, e.weights);
	                }), u.forEach(function (e) {
	                  e.paths.forEach(function (e) {
	                    var t = new FileReader();t.onload = function (t) {
	                      var n = t.target.result,
	                          a = d.indexOf(e);p[a] = n, -1 === p.indexOf(null) && r({ modelTopology: s, weightSpecs: c, weightData: concatenateArrayBuffers(p) });
	                    }, t.onerror = function (t) {
	                      a("Failed to weights data from file of path '" + e + "'.");
	                    }, t.readAsArrayBuffer(l[e]);
	                  });
	                });
	              } else a(new Error("weightManifest field is missing from file " + e.name));
	            } else a(new Error("modelTopology field is missing from file " + e.name));
	          }, o.onerror = function (t) {
	            a("Failed to read model topology and weights manifest JSON from file '" + e.name + "'. BrowserFiles supports loading Keras-style tf.Model artifacts only.");
	          }, o.readAsText(e);
	        })];
	      });
	    });
	  }, e.prototype.checkManifestAndWeightFiles = function (e, t) {
	    for (var n = [], r = t.map(function (e) {
	      return basename(e.name);
	    }), a = {}, o = 0, i = e; o < i.length; o++) {
	      i[o].paths.forEach(function (e) {
	        var o = basename(e);if (-1 !== n.indexOf(o)) throw new Error("Duplicate file basename found in weights manifest: '" + o + "'");if (n.push(o), -1 === r.indexOf(o)) throw new Error("Weight file with basename '" + o + "' is not provided.");a[e] = t[r.indexOf(o)];
	      });
	    }if (n.length !== t.length) throw new Error("Mismatch in the number of files in weights manifest (" + n.length + ") and the number of weight files provided (" + t.length + ").");return a;
	  }, e;
	}(),
	    browserDownloadsRouter = function (e) {
	  return ENV.get("IS_BROWSER") && e.startsWith(BrowserDownloads.URL_SCHEME) ? browserDownloads(e.slice(BrowserDownloads.URL_SCHEME.length)) : null;
	};function browserDownloads(e) {
	  return void 0 === e && (e = "model"), new BrowserDownloads(e);
	}function browserFiles(e) {
	  return new BrowserFiles(e);
	}function loadWeightsAsArrayBuffer(e, t) {
	  return __awaiter(this, void 0, void 0, function () {
	    var n, r;return __generator(this, function (a) {
	      switch (a.label) {case 0:
	          return n = e.map(function (e) {
	            return fetch(e, t);
	          }), [4, Promise.all(n)];case 1:
	          return r = a.sent(), [4, Promise.all(r.map(function (e) {
	            return e.arrayBuffer();
	          }))];case 2:
	          return [2, a.sent()];}
	    });
	  });
	}function loadWeights(e, t, n, r) {
	  return void 0 === t && (t = ""), __awaiter(this, void 0, void 0, function () {
	    var a, o, i, s, u, l, c, d, p, h;return __generator(this, function (f) {
	      switch (f.label) {case 0:
	          if (a = e.map(function () {
	            return !1;
	          }), o = {}, i = null != n ? n.map(function () {
	            return !1;
	          }) : [], s = [], e.forEach(function (e, t) {
	            var r = 0;e.weights.forEach(function (e) {
	              var u = "quantization" in e ? e.quantization.dtype : e.dtype,
	                  l = DTYPE_VALUE_SIZE_MAP[u] * sizeFromShape(e.shape),
	                  c = function () {
	                a[t] = !0, null == o[t] && (o[t] = []), o[t].push({ manifestEntry: e, groupOffset: r, sizeBytes: l });
	              };null != n ? n.forEach(function (t, n) {
	                t === e.name && (c(), i[n] = !0);
	              }) : c(), s.push(e.name), r += l;
	            });
	          }), !i.every(function (e) {
	            return e;
	          })) throw u = n.filter(function (e, t) {
	            return !i[t];
	          }), new Error("Could not find weights in manifest with names: " + u.join(", ") + ". \nManifest JSON has weights with names: " + s.join(", ") + ".");return l = a.reduce(function (e, t, n) {
	            return t && e.push(n), e;
	          }, []), c = [], l.forEach(function (n) {
	            e[n].paths.forEach(function (e) {
	              var n = t + (t.endsWith("/") ? "" : "/") + e;c.push(n);
	            });
	          }), [4, loadWeightsAsArrayBuffer(c, r)];case 1:
	          return d = f.sent(), p = {}, h = 0, l.forEach(function (t) {
	            for (var n = e[t].paths.length, r = 0, a = 0; a < n; a++) r += d[h + a].byteLength;for (var i = new ArrayBuffer(r), s = new Uint8Array(i), u = 0, l = 0; l < n; l++) {
	              var c = new Uint8Array(d[h + l]);s.set(c, u), u += c.byteLength;
	            }o[t].forEach(function (e) {
	              var t,
	                  n = i.slice(e.groupOffset, e.groupOffset + e.sizeBytes),
	                  r = e.manifestEntry.dtype;if ("quantization" in e.manifestEntry) {
	                var a = e.manifestEntry.quantization;if ("uint8" !== a.dtype && "uint16" !== a.dtype) throw new Error("Weight " + e.manifestEntry.name + " has unknown quantization dtype " + a.dtype + ".");var o = "uint8" === a.dtype ? new Uint8Array(n) : new Uint16Array(n);if ("float32" === r) t = Float32Array.from(o, function (e) {
	                  return e * a.scale + a.min;
	                });else {
	                  if ("int32" !== r) throw new Error("Weight " + e.manifestEntry.name + " has a dtype not supported by quantization: " + r);t = Int32Array.from(o, function (e) {
	                    return Math.round(e * a.scale + a.min);
	                  });
	                }
	              } else if ("float32" === r) t = new Float32Array(n);else {
	                if ("int32" !== r) throw new Error("Weight " + e.manifestEntry.name + " has unknown dtype " + r + ".");t = new Int32Array(n);
	              }var s = e.manifestEntry.name;if (null != p[s]) throw new Error("Duplicate weight with name " + s + ". Please make sure weights names are unique in the manifest JSON.");p[s] = tensor(t, e.manifestEntry.shape, e.manifestEntry.dtype);
	            }), h += n;
	          }), [2, p];}
	    });
	  });
	}IORouterRegistry.registerSaveRouter(browserDownloadsRouter);var BrowserHTTPRequest = function () {
	  function e(e, t) {
	    if (this.DEFAULT_METHOD = "POST", !ENV.get("IS_BROWSER")) throw new Error("browserHTTPRequest is not supported outside the web browser.");if (assert(null != e && e.length > 0, "URL path for browserHTTPRequest must not be null, undefined or empty."), this.path = e, null != t && null != t.body) throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit = t || {};
	  }return e.prototype.save = function (e) {
	    return __awaiter(this, void 0, void 0, function () {
	      var t, n, r, a;return __generator(this, function (o) {
	        switch (o.label) {case 0:
	            if (e.modelTopology instanceof ArrayBuffer) throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");return (t = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit)).body = new FormData(), n = [{ paths: ["./model.weights.bin"], weights: e.weightSpecs }], r = { modelTopology: e.modelTopology, weightsManifest: n }, t.body.append("model.json", new Blob([JSON.stringify(r)], { type: "application/json" }), "model.json"), null != e.weightData && t.body.append("model.weights.bin", new Blob([e.weightData], { type: "application/octet-stream" }), "model.weights.bin"), [4, fetch(this.path, t)];case 1:
	            if (200 === (a = o.sent()).status) return [2, { modelArtifactsInfo: getModelArtifactsInfoForJSON(e), responses: [a] }];throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status " + a.status + ".");}
	      });
	    });
	  }, e.prototype.load = function () {
	    return __awaiter(this, void 0, void 0, function () {
	      var e, t, n, r, a, o, i, s, u, l, c, d;return __generator(this, function (p) {
	        switch (p.label) {case 0:
	            return [4, fetch(this.path, this.requestInit)];case 1:
	            return [4, p.sent().json()];case 2:
	            if (e = p.sent(), t = e.modelTopology, n = e.weightsManifest, null == t && null == n) throw new Error("The JSON from HTTP path " + this.path + " contains neither model topology or manifest for weights.");if (null == n) return [3, 4];for (o = e.weightsManifest, r = [], i = 0, s = o; i < s.length; i++) u = s[i], r.push.apply(r, u.weights);return (l = this.path.substring(0, this.path.lastIndexOf("/"))).endsWith("/") || (l += "/"), c = [], o.forEach(function (e) {
	              e.paths.forEach(function (e) {
	                c.push(l + e);
	              });
	            }), d = concatenateArrayBuffers, [4, loadWeightsAsArrayBuffer(c, this.requestInit)];case 3:
	            a = d.apply(void 0, [p.sent()]), p.label = 4;case 4:
	            return [2, { modelTopology: t, weightSpecs: r, weightData: a }];}
	      });
	    });
	  }, e.URL_SCHEMES = ["http://", "https://"], e;
	}(),
	    httpRequestRouter = function (e) {
	  if (ENV.get("IS_BROWSER")) {
	    for (var t = 0, n = BrowserHTTPRequest.URL_SCHEMES; t < n.length; t++) {
	      var r = n[t];if (e.startsWith(r)) return browserHTTPRequest(e);
	    }return null;
	  }return null;
	};function browserHTTPRequest(e, t) {
	  return new BrowserHTTPRequest(e, t);
	}IORouterRegistry.registerSaveRouter(httpRequestRouter), IORouterRegistry.registerLoadRouter(httpRequestRouter);var registerSaveRouter = IORouterRegistry.registerSaveRouter,
	    registerLoadRouter = IORouterRegistry.registerLoadRouter,
	    getSaveHandlers = IORouterRegistry.getSaveHandlers,
	    getLoadHandlers = IORouterRegistry.getLoadHandlers,
	    copyModel = ModelManagement.copyModel,
	    listModels = ModelManagement.listModels,
	    moveModel = ModelManagement.moveModel,
	    removeModel = ModelManagement.removeModel,
	    io = Object.freeze({ browserFiles: browserFiles, browserHTTPRequest: browserHTTPRequest, concatenateArrayBuffers: concatenateArrayBuffers, copyModel: copyModel, decodeWeights: decodeWeights, encodeWeights: encodeWeights, getLoadHandlers: getLoadHandlers, getModelArtifactsInfoForJSON: getModelArtifactsInfoForJSON, getSaveHandlers: getSaveHandlers, listModels: listModels, loadWeights: loadWeights, moveModel: moveModel, registerLoadRouter: registerLoadRouter, registerSaveRouter: registerSaveRouter, removeModel: removeModel }),
	    Serializable = function () {
	  function e() {}return e.prototype.getClassName = function () {
	    return this.constructor.className;
	  }, e.fromConfig = function (e, t) {
	    return new e(t);
	  }, e;
	}(),
	    SerializationMap = function () {
	  function e() {
	    this.classNameMap = {};
	  }return e.getMap = function () {
	    return null == e.instance && (e.instance = new e()), e.instance;
	  }, e.register = function (e) {
	    this.getMap().classNameMap[e.className] = [e, e.fromConfig];
	  }, e;
	}(),
	    serialization = Object.freeze({ Serializable: Serializable, SerializationMap: SerializationMap }),
	    WEBGL_ENVS = [{ BACKEND: "test-webgl", WEBGL_RENDER_FLOAT32_ENABLED: !0, WEBGL_DOWNLOAD_FLOAT_ENABLED: !0, WEBGL_VERSION: 1 }, { BACKEND: "test-webgl", WEBGL_RENDER_FLOAT32_ENABLED: !0, WEBGL_DOWNLOAD_FLOAT_ENABLED: !0, WEBGL_VERSION: 2 }],
	    CPU_ENVS = [{ BACKEND: "test-cpu" }],
	    CHROME_CPU_ENVS = [{ BACKEND: "test-cpu", IS_CHROME: !0 }],
	    NATIVE_ENV = {},
	    BROWSER_ENVS = WEBGL_ENVS.concat(CPU_ENVS),
	    ALL_ENVS = [NATIVE_ENV].concat(BROWSER_ENVS);function expectArraysClose(e, t, n) {
	  if (null == n && (n = ENV.get("TEST_EPSILON")), e instanceof Tensor || t instanceof Tensor) {
	    if (e instanceof Tensor && t instanceof Tensor) {
	      if (e.dtype !== t.dtype) throw new Error("Arrays are of different type actual: " + e.dtype + " vs expected: " + t.dtype + ".");if (!arraysEqual(e.shape, t.shape)) throw new Error("Arrays are of different shape actual: " + e.shape + " vs expected: " + t.shape + ".");
	    }
	  } else {
	    var r = e.constructor.name,
	        a = t.constructor.name;if (r !== a) throw new Error("Arrays are of different type actual: " + r + " vs expected: " + a);
	  }var o, i;if (o = e instanceof Tensor ? e.dataSync() : e, i = t instanceof Tensor ? t.dataSync() : t, o.length !== i.length) throw new Error("Arrays have different lengths actual: " + o.length + " vs expected: " + i.length + ".\nActual:   " + o + ".\nExpected: " + i + ".");for (var s = 0; s < i.length; ++s) {
	    var u = o[s],
	        l = i[s];if (!areClose(u, Number(l), n)) throw new Error("Arrays differ: actual[" + s + "] = " + u + ", expected[" + s + "] = " + l + ".\nActual:   " + o + ".\nExpected: " + i + ".");
	  }
	}function expectPromiseToFail(e, t) {
	  e().then(function () {
	    return t.fail();
	  }, function () {
	    return t();
	  });
	}function expectArraysEqual(e, t) {
	  return expectArraysClose(e, t, 0);
	}function expectNumbersClose(e, t, n) {
	  if (null == n && (n = ENV.get("TEST_EPSILON")), !areClose(e, t, n)) throw new Error("Numbers differ: actual === " + e + ", expected === " + t);
	}function areClose(e, t, n) {
	  return !(!isNaN(e) || !isNaN(t)) || !(isNaN(e) || isNaN(t) || Math.abs(e - t) > n);
	}function expectValuesInRange(e, t, n) {
	  var r;r = e instanceof Tensor ? e.dataSync() : e;for (var a = 0; a < r.length; a++) if (r[a] < t || r[a] > n) throw new Error("Value out of range:" + r[a] + " low: " + t + ", high: " + n);
	}function expectArrayBuffersEqual(e, t) {
	  expect(new Float32Array(e)).toEqual(new Float32Array(t));
	}var test_util = Object.freeze({ WEBGL_ENVS: WEBGL_ENVS, CPU_ENVS: CPU_ENVS, CHROME_CPU_ENVS: CHROME_CPU_ENVS, NATIVE_ENV: NATIVE_ENV, BROWSER_ENVS: BROWSER_ENVS, ALL_ENVS: ALL_ENVS, expectArraysClose: expectArraysClose, expectPromiseToFail: expectPromiseToFail, expectArraysEqual: expectArraysEqual, expectNumbersClose: expectNumbersClose, expectValuesInRange: expectValuesInRange, expectArrayBuffersEqual: expectArrayBuffersEqual }),
	    version = "0.11.9",
	    webgl = Object.freeze({ gpgpu_util: gpgpu_util, webgl_util: webgl_util, MathBackendWebGL: MathBackendWebGL, GPGPUContext: GPGPUContext }),
	    Optimizer = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends(t, e), t.prototype.minimize = function (e, t, n) {
	    void 0 === t && (t = !1);var r = this.computeGradients(e, n),
	        a = r.value,
	        o = r.grads;return this.applyGradients(o), Object.keys(o).forEach(function (e) {
	      return o[e].dispose();
	    }), t ? a : (a.dispose(), null);
	  }, t.prototype.computeGradients = function (e, t) {
	    return variableGrads(e, t);
	  }, __decorate([doc({ heading: "Training", subheading: "Optimizers" })], t.prototype, "minimize", null), t = __decorate([doc({ heading: "Training", subheading: "Classes", namespace: "train" })], t);
	}(Serializable),
	    DEFAULT_FLOAT32_EPSILON = 1e-8,
	    DEFAULT_FLOAT16_EPSILON = 1e-4;function getOptimizerDefaultEpsilonValue() {
	  return ENV.get("WEBGL_RENDER_FLOAT32_ENABLED") ? DEFAULT_FLOAT32_EPSILON : DEFAULT_FLOAT16_EPSILON;
	}var AdadeltaOptimizer = function (e) {
	  function t(t, n, r) {
	    void 0 === r && (r = null);var a = e.call(this) || this;return a.learningRate = t, a.rho = n, a.epsilon = r, a.accumulatedGrads = {}, a.accumulatedUpdates = {}, a.c = keep(scalar(-t)), a.rhoScalar = keep(scalar(n)), a.oneMinusRho = keep(scalar(1 - n)), null === r && (r = getOptimizerDefaultEpsilonValue()), a.epsilonScalar = keep(scalar(r)), a;
	  }return __extends(t, e), t.prototype.applyGradients = function (e) {
	    var t = this,
	        n = function (n) {
	      var a = ENV.engine.registeredVariables[n];if (null == r.accumulatedGrads[n]) {
	        tidy(function () {
	          t.accumulatedGrads[n] = zerosLike(a).variable(!1);
	        });
	      }if (null == r.accumulatedUpdates[n]) {
	        tidy(function () {
	          t.accumulatedUpdates[n] = zerosLike(a).variable(!1);
	        });
	      }var o = e[n],
	          i = r.accumulatedGrads[n],
	          s = r.accumulatedUpdates[n];tidy(function () {
	        var e = t.rhoScalar.mul(i).add(t.oneMinusRho.mul(o.square())),
	            r = s.add(t.epsilonScalar).sqrt().div(i.add(t.epsilonScalar).sqrt()).mul(o),
	            u = t.rhoScalar.mul(s).add(t.oneMinusRho.mul(r.square()));t.accumulatedGrads[n].assign(e), t.accumulatedUpdates[n].assign(u);var l = t.c.mul(r).add(a);a.assign(l);
	      });
	    },
	        r = this;for (var a in e) n(a);
	  }, t.prototype.dispose = function () {
	    var e = this;this.c.dispose(), this.epsilonScalar.dispose(), this.rhoScalar.dispose(), this.oneMinusRho.dispose(), null != this.accumulatedUpdates && (Object.keys(this.accumulatedUpdates).forEach(function (t) {
	      return e.accumulatedUpdates[t].dispose();
	    }), Object.keys(this.accumulatedGrads).forEach(function (t) {
	      return e.accumulatedGrads[t].dispose();
	    }));
	  }, t.prototype.getConfig = function () {
	    return { learningRate: this.learningRate, rho: this.rho, epsilon: this.epsilon };
	  }, t.fromConfig = function (e, t) {
	    return new e(t.learningRate, t.rho, t.epsilon);
	  }, t.className = "AdadeltaOptimizer", t;
	}(Optimizer);SerializationMap.register(AdadeltaOptimizer);var AdagradOptimizer = function (e) {
	  function t(t, n) {
	    void 0 === n && (n = .1);var r = e.call(this) || this;r.learningRate = t, r.initialAccumulatorValue = n, r.accumulatedGrads = {}, r.c = keep(scalar(-t));var a = getOptimizerDefaultEpsilonValue();return r.epsilon = keep(scalar(a)), r;
	  }return __extends(t, e), t.prototype.applyGradients = function (e) {
	    var t = this,
	        n = function (n) {
	      var a = ENV.engine.registeredVariables[n];if (null == r.accumulatedGrads[n]) {
	        tidy(function () {
	          t.accumulatedGrads[n] = fill(a.shape, t.initialAccumulatorValue).variable(!1);
	        });
	      }var o = e[n],
	          i = r.accumulatedGrads[n];tidy(function () {
	        var e = i.add(o.square());t.accumulatedGrads[n].assign(e);var r = t.c.mul(o.div(e.add(t.epsilon).sqrt())).add(a);a.assign(r);
	      });
	    },
	        r = this;for (var a in e) n(a);
	  }, t.prototype.dispose = function () {
	    var e = this;this.epsilon.dispose(), this.c.dispose(), null != this.accumulatedGrads && Object.keys(this.accumulatedGrads).forEach(function (t) {
	      return e.accumulatedGrads[t].dispose();
	    });
	  }, t.prototype.getConfig = function () {
	    return { learningRate: this.learningRate, initialAccumulatorValue: this.initialAccumulatorValue };
	  }, t.fromConfig = function (e, t) {
	    return new e(t.learningRate, t.initialAccumulatorValue);
	  }, t.className = "AdagradOptimizer", t;
	}(Optimizer);SerializationMap.register(AdagradOptimizer);var AdamOptimizer = function (e) {
	  function t(t, n, r, a) {
	    void 0 === a && (a = null);var o = e.call(this) || this;return o.learningRate = t, o.beta1 = n, o.beta2 = r, o.epsilon = a, o.accumulatedFirstMoment = {}, o.accumulatedSecondMoment = {}, o.c = keep(scalar(-t)), o.beta1Scalar = keep(scalar(n)), o.beta2Scalar = keep(scalar(r)), tidy(function () {
	      o.accBeta1 = scalar(n).variable(), o.accBeta2 = scalar(r).variable();
	    }), o.oneMinusBeta1 = keep(scalar(1 - n)), o.oneMinusBeta2 = keep(scalar(1 - r)), o.one = keep(scalar(1)), null === a && (a = getOptimizerDefaultEpsilonValue()), o.epsScalar = keep(scalar(a)), o;
	  }return __extends(t, e), t.prototype.applyGradients = function (e) {
	    var t = this;tidy(function () {
	      var n = t.one.sub(t.accBeta1),
	          r = t.one.sub(t.accBeta2);for (var a in e) {
	        var o = ENV.engine.registeredVariables[a];if (null == t.accumulatedFirstMoment[a]) {
	          var i = !1;t.accumulatedFirstMoment[a] = zerosLike(o).variable(i);
	        }if (null == t.accumulatedSecondMoment[a]) {
	          i = !1;t.accumulatedSecondMoment[a] = zerosLike(o).variable(i);
	        }var s = e[a],
	            u = t.accumulatedFirstMoment[a],
	            l = t.accumulatedSecondMoment[a],
	            c = t.beta1Scalar.mul(u).add(t.oneMinusBeta1.mul(s)),
	            d = t.beta2Scalar.mul(l).add(t.oneMinusBeta2.mul(s.square())),
	            p = c.div(n),
	            h = d.div(r);t.accumulatedFirstMoment[a].assign(c), t.accumulatedSecondMoment[a].assign(d);var f = t.c.mul(p.div(t.epsScalar.add(h.sqrt()))).add(o);o.assign(f);
	      }t.accBeta1.assign(t.accBeta1.mul(t.beta1Scalar)), t.accBeta2.assign(t.accBeta2.mul(t.beta2Scalar));
	    });
	  }, t.prototype.dispose = function () {
	    var e = this;this.c.dispose(), this.epsScalar.dispose(), this.beta1Scalar.dispose(), this.beta2Scalar.dispose(), this.accBeta1.dispose(), this.accBeta2.dispose(), this.oneMinusBeta1.dispose(), this.oneMinusBeta2.dispose(), this.one.dispose(), null != this.accumulatedFirstMoment && Object.keys(this.accumulatedFirstMoment).forEach(function (t) {
	      return e.accumulatedFirstMoment[t].dispose();
	    }), null != this.accumulatedSecondMoment && Object.keys(this.accumulatedSecondMoment).forEach(function (t) {
	      return e.accumulatedSecondMoment[t].dispose();
	    });
	  }, t.prototype.getConfig = function () {
	    return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon };
	  }, t.fromConfig = function (e, t) {
	    return new e(t.learningRate, t.beta1, t.beta2, t.epsilon);
	  }, t.className = "AdamOptimizer", t;
	}(Optimizer);SerializationMap.register(AdamOptimizer);var AdamaxOptimizer = function (e) {
	  function t(t, n, r, a, o) {
	    void 0 === a && (a = null), void 0 === o && (o = 0);var i = e.call(this) || this;return i.learningRate = t, i.beta1 = n, i.beta2 = r, i.epsilon = a, i.decay = o, i.accumulatedFirstMoment = {}, i.accumulatedWeightedInfNorm = {}, i.c = keep(scalar(-t)), i.beta1Scalar = keep(scalar(n)), i.beta2Scalar = keep(scalar(r)), i.decayScalar = keep(scalar(o)), tidy(function () {
	      i.iteration = scalar(0).variable(), i.accBeta1 = scalar(n).variable();
	    }), i.oneMinusBeta1 = keep(scalar(1 - n)), i.one = keep(scalar(1)), null === a && (a = getOptimizerDefaultEpsilonValue()), i.epsScalar = keep(scalar(a)), i;
	  }return __extends(t, e), t.prototype.applyGradients = function (e) {
	    var t = this;tidy(function () {
	      var n = t.one.sub(t.accBeta1),
	          r = t.c.div(t.one.add(t.decayScalar.mul(t.iteration)));for (var a in e) {
	        var o = ENV.engine.registeredVariables[a];if (null == t.accumulatedFirstMoment[a]) {
	          var i = !1;t.accumulatedFirstMoment[a] = zerosLike(o).variable(i);
	        }if (null == t.accumulatedWeightedInfNorm[a]) {
	          i = !1;t.accumulatedWeightedInfNorm[a] = zerosLike(o).variable(i);
	        }var s = e[a],
	            u = t.accumulatedFirstMoment[a],
	            l = t.accumulatedWeightedInfNorm[a],
	            c = t.beta1Scalar.mul(u).add(t.oneMinusBeta1.mul(s)),
	            d = t.beta2Scalar.mul(l),
	            p = s.abs(),
	            h = d.maximum(p);t.accumulatedFirstMoment[a].assign(c), t.accumulatedWeightedInfNorm[a].assign(h);var f = r.div(n).mul(c.div(t.epsScalar.add(h))).add(o);o.assign(f);
	      }t.iteration.assign(t.iteration.add(t.one)), t.accBeta1.assign(t.accBeta1.mul(t.beta1Scalar));
	    });
	  }, t.prototype.dispose = function () {
	    var e = this;this.c.dispose(), this.epsScalar.dispose(), this.accBeta1.dispose(), this.beta1Scalar.dispose(), this.beta2Scalar.dispose(), this.oneMinusBeta1.dispose(), this.decayScalar.dispose(), this.iteration.dispose(), this.one.dispose(), null != this.accumulatedFirstMoment && Object.keys(this.accumulatedFirstMoment).forEach(function (t) {
	      return e.accumulatedFirstMoment[t].dispose();
	    }), null != this.accumulatedWeightedInfNorm && Object.keys(this.accumulatedWeightedInfNorm).forEach(function (t) {
	      return e.accumulatedWeightedInfNorm[t].dispose();
	    });
	  }, t.prototype.getConfig = function () {
	    return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon, decay: this.decay };
	  }, t.fromConfig = function (e, t) {
	    return new e(t.learningRate, t.beta1, t.beta2, t.epsilon, t.decay);
	  }, t.className = "AdamaxOptimizer", t;
	}(Optimizer);SerializationMap.register(AdamaxOptimizer);var SGDOptimizer = function (e) {
	  function t(t) {
	    var n = e.call(this) || this;return n.learningRate = t, n.setLearningRate(t), n;
	  }return __extends(t, e), t.prototype.applyGradients = function (e) {
	    var t = this;Object.keys(e).forEach(function (n) {
	      var r = e[n],
	          a = ENV.engine.registeredVariables[n];tidy(function () {
	        var e = t.c.mul(r).add(a);a.assign(e);
	      });
	    });
	  }, t.prototype.setLearningRate = function (e) {
	    this.learningRate = e, null != this.c && this.c.dispose(), this.c = keep(scalar(-e));
	  }, t.prototype.dispose = function () {
	    this.c.dispose();
	  }, t.prototype.getConfig = function () {
	    return { learningRate: this.learningRate };
	  }, t.fromConfig = function (e, t) {
	    return new e(t.learningRate);
	  }, t.className = "SGDOptimizer", t;
	}(Optimizer);SerializationMap.register(SGDOptimizer);var MomentumOptimizer = function (e) {
	  function t(t, n, r) {
	    void 0 === r && (r = !1);var a = e.call(this, t) || this;return a.learningRate = t, a.momentum = n, a.useNesterov = r, a.m = scalar(a.momentum), a.accumulations = {}, a;
	  }return __extends(t, e), t.prototype.applyGradients = function (e) {
	    var t = this,
	        n = function (n) {
	      var a = ENV.engine.registeredVariables[n];if (null == r.accumulations[n]) {
	        tidy(function () {
	          t.accumulations[n] = zerosLike(a).variable(!1);
	        });
	      }var o = r.accumulations[n],
	          i = e[n];tidy(function () {
	        var e,
	            r = t.m.mul(o).add(i);e = t.useNesterov ? t.c.mul(i.add(r.mul(t.m))).add(a) : t.c.mul(r).add(a), t.accumulations[n].assign(r), a.assign(e);
	      });
	    },
	        r = this;for (var a in e) n(a);
	  }, t.prototype.dispose = function () {
	    if (e.prototype.dispose.call(this), this.m.dispose(), null != this.accumulations) for (var t in this.accumulations) this.accumulations[t].dispose();
	  }, t.prototype.setMomentum = function (e) {
	    this.momentum = e;
	  }, t.prototype.getConfig = function () {
	    return { learningRate: this.learningRate, momentum: this.momentum, useNesterov: this.useNesterov };
	  }, t.fromConfig = function (e, t) {
	    return new e(t.learningRate, t.momentum, t.useNesterov);
	  }, t.className = "MomentumOptimizer", t;
	}(SGDOptimizer);SerializationMap.register(MomentumOptimizer);var RMSPropOptimizer = function (e) {
	  function t(t, n, r, a, o) {
	    void 0 === n && (n = .9), void 0 === r && (r = 0), void 0 === a && (a = null), void 0 === o && (o = !1);var i = e.call(this) || this;return i.learningRate = t, i.decay = n, i.momentum = r, i.epsilon = a, i.accumulatedMeanSquares = {}, i.accumulatedMeanGrads = {}, i.accumulatedMoments = {}, i.c = keep(scalar(t)), i.decayScalar = keep(scalar(n)), i.momentumScalar = keep(scalar(r)), i.oneMinusDecay = keep(scalar(1 - n)), i.centered = o, null === a && (a = getOptimizerDefaultEpsilonValue()), i.epsilonScalar = keep(scalar(a)), i;
	  }return __extends(t, e), t.prototype.applyGradients = function (e) {
	    var t = this,
	        n = function (n) {
	      var a = ENV.engine.registeredVariables[n];if (null == r.accumulatedMeanSquares[n]) {
	        tidy(function () {
	          t.accumulatedMeanSquares[n] = zerosLike(a).variable(!1);
	        });
	      }if (null == r.accumulatedMeanGrads[n] && r.centered) {
	        tidy(function () {
	          t.accumulatedMeanGrads[n] = zerosLike(a).variable(!1);
	        });
	      }if (null == r.accumulatedMoments[n]) {
	        tidy(function () {
	          t.accumulatedMoments[n] = zerosLike(a).variable(!1);
	        });
	      }var o = r.accumulatedMeanSquares[n],
	          i = r.accumulatedMeanGrads[n],
	          s = r.accumulatedMoments[n],
	          u = e[n];tidy(function () {
	        var e = t.decayScalar.mul(o).add(t.oneMinusDecay.mul(u.square()));if (t.centered) {
	          var r = t.decayScalar.mul(i).add(t.oneMinusDecay.mul(u)),
	              l = t.momentumScalar.mul(s).add(t.c.mul(u).div(e.sub(r.square().add(t.epsilonScalar)).sqrt()));t.accumulatedMeanSquares[n].assign(e), t.accumulatedMeanGrads[n].assign(r), t.accumulatedMoments[n].assign(l);var c = a.sub(l);a.assign(c);
	        } else {
	          var d = t.decayScalar.mul(o).add(t.oneMinusDecay.mul(u.square()));l = t.momentumScalar.mul(s).add(t.c.mul(u).div(d.add(t.epsilonScalar).sqrt()));t.accumulatedMeanSquares[n].assign(d), t.accumulatedMoments[n].assign(l);c = a.sub(l);a.assign(c);
	        }
	      });
	    },
	        r = this;for (var a in e) n(a);
	  }, t.prototype.dispose = function () {
	    var e = this;this.c.dispose(), this.epsilonScalar.dispose(), this.decayScalar.dispose(), this.momentumScalar.dispose(), this.oneMinusDecay.dispose(), null != this.accumulatedMeanSquares && Object.keys(this.accumulatedMeanSquares).forEach(function (t) {
	      return e.accumulatedMeanSquares[t].dispose();
	    }), null != this.accumulatedMeanGrads && this.centered && Object.keys(this.accumulatedMeanGrads).forEach(function (t) {
	      return e.accumulatedMeanGrads[t].dispose();
	    }), null != this.accumulatedMoments && Object.keys(this.accumulatedMoments).forEach(function (t) {
	      return e.accumulatedMoments[t].dispose();
	    });
	  }, t.prototype.getConfig = function () {
	    return { learningRate: this.learningRate, decay: this.decay, momentum: this.momentum, epsilon: this.epsilon, centered: this.centered };
	  }, t.fromConfig = function (e, t) {
	    return new e(t.learningRate, t.decay, t.momentum, t.epsilon, t.centered);
	  }, t.className = "RMSPropOptimizer", t;
	}(Optimizer);SerializationMap.register(RMSPropOptimizer);var OptimizerConstructors = function () {
	  function e() {}return e.sgd = function (e) {
	    return new SGDOptimizer(e);
	  }, e.momentum = function (e, t, n) {
	    return void 0 === n && (n = !1), new MomentumOptimizer(e, t, n);
	  }, e.rmsprop = function (e, t, n, r, a) {
	    return void 0 === t && (t = .9), void 0 === n && (n = 0), void 0 === r && (r = null), void 0 === a && (a = !1), new RMSPropOptimizer(e, t, n, r, a);
	  }, e.adam = function (e, t, n, r) {
	    return void 0 === e && (e = .001), void 0 === t && (t = .9), void 0 === n && (n = .999), void 0 === r && (r = null), new AdamOptimizer(e, t, n, r);
	  }, e.adadelta = function (e, t, n) {
	    return void 0 === e && (e = .001), void 0 === t && (t = .95), void 0 === n && (n = null), new AdadeltaOptimizer(e, t, n);
	  }, e.adamax = function (e, t, n, r, a) {
	    return void 0 === e && (e = .002), void 0 === t && (t = .9), void 0 === n && (n = .999), void 0 === r && (r = null), void 0 === a && (a = 0), new AdamaxOptimizer(e, t, n, r, a);
	  }, e.adagrad = function (e, t) {
	    return void 0 === t && (t = .1), new AdagradOptimizer(e, t);
	  }, __decorate([doc({ heading: "Training", subheading: "Optimizers", namespace: "train" })], e, "sgd", null), __decorate([doc({ heading: "Training", subheading: "Optimizers", namespace: "train" })], e, "momentum", null), __decorate([doc({ heading: "Training", subheading: "Optimizers", namespace: "train" })], e, "rmsprop", null), __decorate([doc({ heading: "Training", subheading: "Optimizers", namespace: "train" })], e, "adam", null), __decorate([doc({ heading: "Training", subheading: "Optimizers", namespace: "train" })], e, "adadelta", null), __decorate([doc({ heading: "Training", subheading: "Optimizers", namespace: "train" })], e, "adamax", null), __decorate([doc({ heading: "Training", subheading: "Optimizers", namespace: "train" })], e, "adagrad", null), e;
	}(),
	    train = { sgd: OptimizerConstructors.sgd, momentum: OptimizerConstructors.momentum, adadelta: OptimizerConstructors.adadelta, adagrad: OptimizerConstructors.adagrad, rmsprop: OptimizerConstructors.rmsprop, adamax: OptimizerConstructors.adamax, adam: OptimizerConstructors.adam },
	    setBackend = Environment.setBackend,
	    getBackend = Environment.getBackend,
	    disposeVariables = Environment.disposeVariables,
	    memory = Environment.memory,
	    nextFrame = BrowserUtil.nextFrame;

	/**
	 * @license
	 * Copyright 2018 Google LLC. All Rights Reserved.
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 * =============================================================================
	 */
	var extendStatics$1 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) {
	  e.__proto__ = t;
	} || function (e, t) {
	  for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n]);
	};function __extends$1(e, t) {
	  function n() {
	    this.constructor = e;
	  }extendStatics$1(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n());
	}var __assign = Object.assign || function (e) {
	  for (var t, n = 1, r = arguments.length; n < r; n++) for (var i in t = arguments[n]) Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);return e;
	};function __decorate$1(e, t, n, r) {
	  var i,
	      a = arguments.length,
	      o = a < 3 ? t : null === r ? r = Object.getOwnPropertyDescriptor(t, n) : r;if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, n, r);else for (var s = e.length - 1; s >= 0; s--) (i = e[s]) && (o = (a < 3 ? i(o) : a > 3 ? i(t, n, o) : i(t, n)) || o);return a > 3 && o && Object.defineProperty(t, n, o), o;
	}function __awaiter$1(e, t, n, r) {
	  return new (n || (n = Promise))(function (i, a) {
	    function o(e) {
	      try {
	        l(r.next(e));
	      } catch (e) {
	        a(e);
	      }
	    }function s(e) {
	      try {
	        l(r.throw(e));
	      } catch (e) {
	        a(e);
	      }
	    }function l(e) {
	      e.done ? i(e.value) : new n(function (t) {
	        t(e.value);
	      }).then(o, s);
	    }l((r = r.apply(e, t || [])).next());
	  });
	}function __generator$1(e, t) {
	  var n,
	      r,
	      i,
	      a,
	      o = { label: 0, sent: function () {
	      if (1 & i[0]) throw i[1];return i[1];
	    }, trys: [], ops: [] };return a = { next: s(0), throw: s(1), return: s(2) }, "function" == typeof Symbol && (a[Symbol.iterator] = function () {
	    return this;
	  }), a;function s(a) {
	    return function (s) {
	      return function (a) {
	        if (n) throw new TypeError("Generator is already executing.");for (; o;) try {
	          if (n = 1, r && (i = r[2 & a[0] ? "return" : a[0] ? "throw" : "next"]) && !(i = i.call(r, a[1])).done) return i;switch (r = 0, i && (a = [0, i.value]), a[0]) {case 0:case 1:
	              i = a;break;case 4:
	              return o.label++, { value: a[1], done: !1 };case 5:
	              o.label++, r = a[1], a = [0];continue;case 7:
	              a = o.ops.pop(), o.trys.pop();continue;default:
	              if (!(i = (i = o.trys).length > 0 && i[i.length - 1]) && (6 === a[0] || 2 === a[0])) {
	                o = 0;continue;
	              }if (3 === a[0] && (!i || a[1] > i[0] && a[1] < i[3])) {
	                o.label = a[1];break;
	              }if (6 === a[0] && o.label < i[1]) {
	                o.label = i[1], i = a;break;
	              }if (i && o.label < i[2]) {
	                o.label = i[2], o.ops.push(a);break;
	              }i[2] && o.ops.pop(), o.trys.pop();continue;}a = t.call(e, o);
	        } catch (e) {
	          a = [6, e], r = 0;
	        } finally {
	          n = i = 0;
	        }if (5 & a[0]) throw a[1];return { value: a[0] ? a[1] : void 0, done: !0 };
	      }([a, s]);
	    };
	  }
	}var AttributeError = function (e) {
	  function t(n) {
	    var r = e.call(this, n) || this;return Object.setPrototypeOf(r, t.prototype), r;
	  }return __extends$1(t, e), t;
	}(Error),
	    RuntimeError = function (e) {
	  function t(n) {
	    var r = e.call(this, n) || this;return Object.setPrototypeOf(r, t.prototype), r;
	  }return __extends$1(t, e), t;
	}(Error),
	    ValueError = function (e) {
	  function t(n) {
	    var r = e.call(this, n) || this;return Object.setPrototypeOf(r, t.prototype), r;
	  }return __extends$1(t, e), t;
	}(Error),
	    NotImplementedError = function (e) {
	  function t(n) {
	    var r = e.call(this, n) || this;return Object.setPrototypeOf(r, t.prototype), r;
	  }return __extends$1(t, e), t;
	}(Error),
	    AssertionError = function (e) {
	  function t(n) {
	    var r = e.call(this, n) || this;return Object.setPrototypeOf(r, t.prototype), r;
	  }return __extends$1(t, e), t;
	}(Error),
	    IndexError = function (e) {
	  function t(n) {
	    var r = e.call(this, n) || this;return Object.setPrototypeOf(r, t.prototype), r;
	  }return __extends$1(t, e), t;
	}(Error);function pyListRepeat(e, t) {
	  if (Array.isArray(e)) {
	    for (var n = [], r = 0; r < t; r++) n = n.concat(e);return n;
	  }return (n = new Array(t)).fill(e), n;
	}function assert$1(e, t) {
	  if (!e) throw new AssertionError(t);
	}function count(e, t) {
	  for (var n = 0, r = 0, i = e; r < i.length; r++) {
	    i[r] === t && n++;
	  }return n;
	}function singletonOrArray(e) {
	  return 1 === e.length ? e[0] : e;
	}function toList(e) {
	  return Array.isArray(e) ? e : [e];
	}function isArrayOfShapes(e) {
	  return Array.isArray(e) && Array.isArray(e[0]);
	}function normalizeShapeList(e) {
	  return 0 === e.length ? [] : Array.isArray(e[0]) ? e : [e];
	}function toSnakeCase(e) {
	  var t = e.replace(/(.)([A-Z][a-z0-9]+)/g, "$1_$2").replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();return "_" !== t[0] ? t : "private" + t;
	}function toCamelCase(e) {
	  return e.length <= 1 ? e : -1 === e.indexOf("_") ? e : e.replace(/[_]+(\w|$)/g, function (e, t) {
	    return t.toUpperCase();
	  });
	}var _GLOBAL_CUSTOM_OBJECTS = {};function serializeKerasObject(e) {
	  return null === e || void 0 === e ? null : { className: e.getClassName(), config: e.getConfig() };
	}function deserializeKerasObject(e, t, n, r) {
	  if (void 0 === t && (t = {}), void 0 === n && (n = {}), void 0 === r && (r = "object"), "string" == typeof e) {
	    var i = e,
	        a = void 0;if (i in n) a = n[i];else if (i in _GLOBAL_CUSTOM_OBJECTS) a = _GLOBAL_CUSTOM_OBJECTS[i];else if (null == (a = t[i])) throw new ValueError("Unknown " + r + ": " + e);return a;
	  }var o = e;if (null == o.className || null == o.config) throw new ValueError(r + ": Improper config format: " + JSON.stringify(o) + ".\n'className' and 'config' must set.");var s = o.className,
	      l = void 0,
	      u = void 0;if (s in n ? (l = (S = n.get(s))[0], u = S[1]) : s in _GLOBAL_CUSTOM_OBJECTS ? (l = (I = _GLOBAL_CUSTOM_OBJECTS.className)[0], u = I[1]) : s in t && (l = (_ = t[s])[0], u = _[1]), null == l) throw new ValueError("Unknown " + r + ": " + s);if (null != u) {
	    for (var c = {}, p = 0, h = Object.keys(_GLOBAL_CUSTOM_OBJECTS); p < h.length; p++) {
	      c[v = h[p]] = _GLOBAL_CUSTOM_OBJECTS[v];
	    }for (var d = 0, g = Object.keys(n); d < g.length; d++) {
	      c[v = g[d]] = n[v];
	    }o.config.customObjects = c;for (var f = __assign({}, _GLOBAL_CUSTOM_OBJECTS), m = 0, y = Object.keys(n); m < y.length; m++) {
	      var v = y[m];_GLOBAL_CUSTOM_OBJECTS[v] = n[v];
	    }var b = u(l, o.config);return _GLOBAL_CUSTOM_OBJECTS = __assign({}, f), b;
	  }f = __assign({}, _GLOBAL_CUSTOM_OBJECTS);for (var z = 0, w = Object.keys(n); z < w.length; z++) {
	    v = w[z];_GLOBAL_CUSTOM_OBJECTS[v] = n[v];
	  }var S, I, _;b = new l(o.config);return _GLOBAL_CUSTOM_OBJECTS = __assign({}, f), b;
	}function getExactlyOneTensor(e) {
	  var t;if (Array.isArray(e)) {
	    if (1 !== e.length) throw new ValueError("Expected Tensor length to be 1; got " + e.length);t = e[0];
	  } else t = e;return t;
	}function getExactlyOneShape(e) {
	  if (Array.isArray(e) && Array.isArray(e[0])) {
	    if (1 === e.length) return (e = e)[0];throw new ValueError("Expected exactly 1 Shape; got " + e.length);
	  }return e;
	}function numberCompare(e, t) {
	  return e < t ? -1 : e > t ? 1 : 0;
	}function reverseNumberCompare(e, t) {
	  return -1 * numberCompare(e, t);
	}function stringToDType(e) {
	  switch (e) {case "float32":
	      return "float32";default:
	      throw new ValueError("Invalid dtype: " + e);}
	}function unique(e) {
	  if (null == e) return e;for (var t = [], n = 0, r = e; n < r.length; n++) {
	    var i = r[n];-1 === t.indexOf(i) && t.push(i);
	  }return t;
	}function isObjectEmpty(e) {
	  if (null == e) throw new ValueError("Invalid value in obj: " + JSON.stringify(e));for (var t in e) if (e.hasOwnProperty(t)) return !1;return !0;
	}function checkStringTypeUnionValue(e, t, n) {
	  if (null != n && e.indexOf(n) < 0) throw new ValueError(n + " is not a valid " + t + ".  Valid values are " + e + " or null/undefined.");
	}function checkArrayTypeAndLength(e, t, n, r) {
	  return void 0 === n && (n = 0), void 0 === r && (r = 1 / 0), assert$1(n >= 0), assert$1(r >= n), Array.isArray(e) && e.length >= n && e.length <= r && e.every(function (e) {
	    return typeof e === t;
	  });
	}function countParamsInWeights(e) {
	  for (var t = 0, n = 0, r = e; n < r.length; n++) {
	    var i = r[n];0 === i.shape.length ? t += 1 : t += i.shape.reduce(function (e, t) {
	      return e * t;
	    });
	  }return t;
	}var nameMap = new Map(),
	    VALID_DATA_FORMAT_VALUES = ["channelsFirst", "channelsLast"];function checkDataFormat(e) {
	  checkStringTypeUnionValue(VALID_DATA_FORMAT_VALUES, "DataFormat", e);
	}var VALID_PADDING_MODE_VALUES = ["valid", "same", "causal"];function checkPaddingMode(e) {
	  checkStringTypeUnionValue(VALID_PADDING_MODE_VALUES, "PaddingMode", e);
	}var VALID_POOL_MODE_VALUES = ["max", "avg"];function checkPoolMode(e) {
	  checkStringTypeUnionValue(VALID_POOL_MODE_VALUES, "PoolMode", e);
	}var _nameScopeStack = [],
	    _nameScopeDivider = "/";function nameScope(e, t) {
	  _nameScopeStack.push(e);try {
	    var n = t();return _nameScopeStack.pop(), n;
	  } catch (e) {
	    throw _nameScopeStack.pop(), e;
	  }
	}function currentNameScopePrefix() {
	  return 0 === _nameScopeStack.length ? "" : _nameScopeStack.join(_nameScopeDivider) + _nameScopeDivider;
	}function getScopedTensorName(e) {
	  if (!isValidTensorName(e)) throw new Error("Not a valid tensor name: '" + e + "'");return currentNameScopePrefix() + e;
	}function getUniqueTensorName(e) {
	  if (!isValidTensorName(e)) throw new Error("Not a valid tensor name: '" + e + "'");nameMap.has(e) || nameMap.set(e, 0);var t = nameMap.get(e);if (nameMap.set(e, nameMap.get(e) + 1), t > 0) {
	    var n = e + "_" + t;return nameMap.set(n, 1), n;
	  }return e;
	}var tensorNameRegex = new RegExp(/^[A-Za-z][A-Za-z0-9\._\/]*$/);function isValidTensorName(e) {
	  return !!e.match(tensorNameRegex);
	}function isInteger(e) {
	  return e === parseInt(e.toString(), 10);
	}function arrayProd(e, t, n) {
	  null == t && (t = 0), null == n && (n = e.length);for (var r = 1, i = t; i < n; ++i) r *= e[i];return r;
	}function toArray1D(e) {
	  return e = Array.isArray(e) ? new Float32Array(e) : e, tensor1d(e);
	}function min$1(e) {
	  return min(toArray1D(e)).dataSync()[0];
	}function max$1(e) {
	  return max(toArray1D(e)).dataSync()[0];
	}function range$1(e, t) {
	  if (t < e) throw new ValueError("end (" + t + ") < begin (" + e + ") is forbidden.");for (var n = [], r = e; r < t; ++r) n.push(r);return n;
	}var _nextUniqueTensorId = 0;function getNextUniqueTensorId() {
	  return _nextUniqueTensorId++;
	}var SymbolicTensor = function () {
	  function e(e, t, n, r, i, a, o) {
	    this.dtype = e, this.shape = t, this.sourceLayer = n, this.inputs = r, this.callArgs = i, this.outputTensorIndex = o, this.id = getNextUniqueTensorId(), null != a && (this.originalName = getScopedTensorName(a), this.name = getUniqueTensorName(this.originalName)), this.rank = t.length;
	  }return e = __decorate$1([doc({ heading: "Models", subheading: "Classes" })], e);
	}(),
	    DEFAULT_VARIABLE_NAME_PREFIX = "Variable",
	    LayerVariable = function () {
	  function e(e, t, n, r, i) {
	    void 0 === t && (t = "float32"), void 0 === n && (n = DEFAULT_VARIABLE_NAME_PREFIX), void 0 === r && (r = !0), void 0 === i && (i = null), this.dtype = null == t ? "float32" : t, this.shape = e.shape, this.id = getNextUniqueTensorId(), n = null == n ? DEFAULT_VARIABLE_NAME_PREFIX : n, this.originalName = getScopedTensorName(n), this.name = getUniqueTensorName(this.originalName), this.trainable = r, this.constraint = i, this.val = variable(e, this.trainable, this.name, this.dtype);
	  }return e.prototype.read = function () {
	    return this.val;
	  }, e.prototype.write = function (e) {
	    return checkShapesMatch(this.val, e), this.val.assign(e), null != this.constraint && this.val.assign(this.constraint.apply(this.val)), this;
	  }, e;
	}();function checkShapesMatch(e, t) {
	  if (e.shape.toString() !== t.shape.toString()) throw new Error("Shape mismatch: " + JSON.stringify(e.shape) + " vs. " + JSON.stringify(t.shape));
	}function batchGetValue(e) {
	  return e.map(function (e) {
	    return e.read();
	  });
	}function batchSetValue(e) {
	  e.map(function (e) {
	    e[0].write(e[1]);
	  });
	}var _epsilon = 1e-7;function epsilon() {
	  return _epsilon;
	}function imageDataFormat() {
	  return "channelsLast";
	}var DEFAULT_DTYPE = "float32",
	    scalarCache = { float32: {}, int32: {} };function getScalar(e, t) {
	  return void 0 === t && (t = DEFAULT_DTYPE), null == scalarCache[t][e] && (scalarCache[t][e] = scalar(e, t), keep(scalarCache[t][e])), scalarCache[t][e];
	}var epsilon$1 = epsilon;function shape(e) {
	  return e.shape;
	}function intShape(e) {
	  return e.shape;
	}function dtype(e) {
	  return e instanceof Tensor ? DEFAULT_DTYPE : e.dtype;
	}function cast$1(e, t) {
	  return e.asType(t);
	}function expandDims$1(e, t) {
	  void 0 === t && (t = -1);var n = shape(e).slice();return t < 0 && (t = n.length + t + 1), n.splice(t, 0, 1), e.reshape(n);
	}function repeat(e, t) {
	  return tidy(function () {
	    if (2 !== e.shape.length) throw new ValueError("repeat() expects a rank-2 tensor, but received a rank-" + e.shape.length + " tensor.");return tile$1(expandDims$1(e, 1), [1, t, 1]);
	  });
	}function flatten$1(e) {
	  var t = [arrayProd(e.shape)];return e.reshape(t);
	}function batchFlatten(e) {
	  if (e.rank <= 1) throw new ValueError("batchFlatten requires a minimum rank of 2. Got rank: " + e.rank + ".");var t = [e.shape[0], arrayProd(e.shape, 1)];return e.reshape(t);
	}function sliceAlongFirstAxis(e, t, n) {
	  return tidy(function () {
	    switch (e.rank) {case 1:
	        return slice1d(e, t, n);case 2:
	        return slice2d(e, [t, 0], [n, e.shape[1]]);case 3:
	        return slice3d(e, [t, 0, 0], [n, e.shape[1], e.shape[2]]);case 4:
	        return slice4d(e, [t, 0, 0, 0], [n, e.shape[1], e.shape[2], e.shape[3]]);default:
	        throw new ValueError("sliceAlongFirstAxis() received an unsupported tensor rank: " + e.rank);}
	  });
	}function sliceAlongLastAxis(e, t, n) {
	  return tidy(function () {
	    switch (e.rank) {case 1:
	        return slice1d(e, t, n);case 2:
	        return slice2d(e, [0, t], [e.shape[0], n]);case 3:
	        return slice3d(e, [0, 0, t], [e.shape[0], e.shape[1], n]);case 4:
	        return slice4d(e, [0, 0, 0, t], [e.shape[0], e.shape[1], e.shape[2], n]);default:
	        throw new ValueError("sliceAlongLastAxis() received an unsupported tensor rank: " + e.rank);}
	  });
	}function sliceAlongAxis(e, t, n, r) {
	  return tidy(function () {
	    switch (e.rank) {case 1:
	        return slice1d(e, t, n);case 2:
	        switch (r) {case 1:
	            return sliceAlongFirstAxis(e, t, n);case 2:
	            return sliceAlongLastAxis(e, t, n);default:
	            throw new ValueError("The axis is not within the rank of the tensor " + r);}case 3:
	        switch (r) {case 1:
	            return sliceAlongFirstAxis(e, t, n);case 2:
	            return slice3d(e, [0, t, 0], [e.shape[0], n, e.shape[2]]);case 3:
	            return sliceAlongLastAxis(e, t, n);default:
	            throw new ValueError("The axis is not within the rank of the tensor " + r);}case 4:
	        switch (r) {case 1:
	            return sliceAlongFirstAxis(e, t, n);case 2:
	            return slice4d(e, [0, t, 0, 0], [e.shape[0], n, e.shape[2], e.shape[3]]);case 3:
	            return slice4d(e, [0, 0, t, 0], [e.shape[0], e.shape[1], n, e.shape[3]]);case 4:
	            return sliceAlongLastAxis(e, t, n);default:
	            throw new ValueError("The axis is not within the rank of the tensor " + r);}default:
	        throw new ValueError("sliceAlongLastAxis() received an unsupported tensor rank: " + e.rank);}
	  });
	}function concatenate(e, t) {
	  var n;return void 0 === t && (t = -1), t < 0 && (t = 0 !== (n = e[0].rank) ? n : 0), t === e[0].rank && (t = -1), concat(e, t);
	}function concatAlongFirstAxis(e, t) {
	  switch (e.rank) {case 1:
	      return concat1d([e, t]);case 2:
	      return concat2d([e, t], 0);case 3:
	      return concat3d([e, t], 0);case 4:
	      return concat4d([e, t], 0);default:
	      throw new ValueError("concatAlongFirstAxis() received an unsupported tensor rank: " + e.rank);}
	}function tile$1(e, t) {
	  if (Array.isArray(t) || (t = [t]), e.rank !== t.length) throw new ValueError("The length of input n (" + t.length + ") does not match the number of dimensions in input x (" + e.rank + ")");return tile(e, t);
	}function identity(e) {
	  return e.clone();
	}function scalarTimesArray(e, t) {
	  return mul(e, t);
	}function scalarPlusArray(e, t) {
	  return add(e, t);
	}function randomNormal$1(e, t, n, r, i) {
	  return void 0 === t && (t = 0), void 0 === n && (n = 1), randomNormal(e, t, n, r, i);
	}function dot$1(e, t) {
	  if (2 !== t.rank) throw new NotImplementedError("dot support for y other than rank 2 is not yet implemented: y shape = " + shape);if (2 === e.rank) return matMul(e, t);if (3 === e.rank) {
	    var n = e.shape[0],
	        r = e.shape[1],
	        i = e.shape[2];return e = e.reshape([n * r, i]), matMul(e, t).reshape([n, r, t.shape[1]]);
	  }throw new NotImplementedError("dot support for x of rank " + e.rank + " is not yet implemented: x shape = " + shape);
	}function gather$1(e, t, n) {
	  return tidy(function () {
	    return t = Array.isArray(t) ? tensor1d(t, "int32") : t.toInt(), gather(e, t, n);
	  });
	}function square$1(e) {
	  return mulStrict(e, e);
	}function biasAdd(e, t, n) {
	  return tidy(function () {
	    if (null == n && (n = imageDataFormat()), checkDataFormat(n), 1 !== t.rank && t.rank !== e.rank) throw new ValueError("Unexpected bias dimensions: " + t.rank + "; expected it to be 1 or " + e.rank);var r,
	        i = t.shape;if (5 === e.rank) "channelsFirst" === n ? r = 1 === i.length ? e.add(t.reshape([1, i[0], 1, 1, 1])) : e.add(t.reshape([1, i[3], i[0], i[1], i[2]])) : "channelsLast" === n && (r = 1 === i.length ? e.add(t.reshape([1, 1, 1, 1, i[0]])) : e.add(t.reshape([1].concat(i))));else if (4 === e.rank) "channelsFirst" === n ? r = 1 === i.length ? e.add(t.reshape([1, i[0], 1, 1])) : e.add(t.reshape([1, i[2], i[0], i[1]])) : "channelsLast" === n && (r = 1 === i.length ? e.add(t.reshape([1, 1, 1, i[0]])) : e.add(t.reshape([1].concat(i))));else if (3 === e.rank) "channelsFirst" === n ? r = 1 === i.length ? e.add(t.reshape([1, i[0], 1])) : e.add(t.reshape([1, i[1], i[0]])) : "channelsLast" === n && (r = 1 === i.length ? e.add(t.reshape([1, 1, i[0]])) : e.add(t.reshape([1].concat(i))));else {
	      if (!(e.rank < 3)) throw new ValueError("Unsupported input rank by biasAdd: " + e.rank);r = e.add(t);
	    }return r;
	  });
	}function elu$1(e, t) {
	  if (void 0 === t && (t = 1), 1 !== t) throw new NotImplementedError("Support for alpha values other than 1 (" + t + ") is not implemented yet.");return elu(e);
	}function softsign(e) {
	  return tidy(function () {
	    return div(e, add(getScalar(1), abs(e)));
	  });
	}function dropout(e, t, n, r) {
	  return tidy(function () {
	    if (null != n && !util.arraysEqual(e.shape, n)) throw new NotImplementedError("Non-default noise shape is not implemented yet: " + JSON.stringify(n));if (null != r) throw new NotImplementedError("seed is not implemented for dropout yet.");var i = step(add(neg(t), randomUniform(e.shape, 0, 1, "float32")));return i = mul(div(getScalar(1), sub(getScalar(1), t)), i), mul(e, i);
	  });
	}function nameScope$1(e, t) {
	  return nameScope(e, t);
	}function floatx() {
	  return "float32";
	}var _uidPrefixes = {};function getUid(e) {
	  return void 0 === e && (e = ""), e in _uidPrefixes || (_uidPrefixes[e] = 0), _uidPrefixes[e] += 1, e + _uidPrefixes[e].toString();
	}function hardSigmoid(e) {
	  return tidy(function () {
	    var t = scalarPlusArray(getScalar(.5), scalarTimesArray(getScalar(.2), e));return clipByValue(t, 0, 1);
	  });
	}function inTrainPhase(e, t, n) {
	  return void 0 === n && (n = !1), n ? e() : t();
	}function calcL2Norms(e, t) {
	  return tidy(function () {
	    return sqrt(sum(square$1(e), t, !0));
	  });
	}var Constraint = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t.prototype.getConfig = function () {
	    return {};
	  }, t = __decorate$1([doc({ heading: "Constraints", subheading: "Classes", namespace: "constraints" })], t);
	}(serialization.Serializable),
	    MaxNorm = function (e) {
	  function t(t) {
	    var n = e.call(this) || this;return n.defaultMaxValue = 2, n.defaultAxis = 0, n.maxValue = null != t.maxValue ? t.maxValue : n.defaultMaxValue, n.axis = null != t.axis ? t.axis : n.defaultAxis, n;
	  }return __extends$1(t, e), t.prototype.apply = function (e) {
	    var t = this;return tidy(function () {
	      var n = calcL2Norms(e, t.axis),
	          r = clipByValue(n, 0, t.maxValue);return mul(e, div(r, scalarPlusArray(getScalar(epsilon$1()), n)));
	    });
	  }, t.prototype.getConfig = function () {
	    return { maxValue: this.maxValue, axis: this.axis };
	  }, t.className = "MaxNorm", t;
	}(Constraint);serialization.SerializationMap.register(MaxNorm);var UnitNorm = function (e) {
	  function t(t) {
	    var n = e.call(this) || this;return n.defaultAxis = 0, n.axis = null != t.axis ? t.axis : n.defaultAxis, n;
	  }return __extends$1(t, e), t.prototype.apply = function (e) {
	    var t = this;return tidy(function () {
	      return div(e, scalarPlusArray(getScalar(epsilon$1()), calcL2Norms(e, t.axis)));
	    });
	  }, t.prototype.getConfig = function () {
	    return { axis: this.axis };
	  }, t.className = "UnitNorm", t;
	}(Constraint);serialization.SerializationMap.register(UnitNorm);var NonNeg = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t.prototype.apply = function (e) {
	    return relu(e);
	  }, t.className = "NonNeg", t;
	}(Constraint);serialization.SerializationMap.register(NonNeg);var MinMaxNorm = function (e) {
	  function t(t) {
	    var n = e.call(this) || this;return n.defaultMinValue = 0, n.defaultMaxValue = 1, n.defaultRate = 1, n.defaultAxis = 0, n.minValue = null != t.minValue ? t.minValue : n.defaultMinValue, n.maxValue = null != t.maxValue ? t.maxValue : n.defaultMaxValue, n.rate = null != t.rate ? t.rate : n.defaultRate, n.axis = null != t.axis ? t.axis : n.defaultAxis, n;
	  }return __extends$1(t, e), t.prototype.apply = function (e) {
	    var t = this;return tidy(function () {
	      var n = calcL2Norms(e, t.axis),
	          r = add(scalarTimesArray(getScalar(t.rate), clipByValue(n, t.minValue, t.maxValue)), scalarTimesArray(getScalar(1 - t.rate), n));return mul(e, div(r, scalarPlusArray(getScalar(epsilon$1()), n)));
	    });
	  }, t.prototype.getConfig = function () {
	    return { minValue: this.minValue, maxValue: this.maxValue, rate: this.rate, axis: this.axis };
	  }, t.className = "MinMaxNorm", t;
	}(Constraint);serialization.SerializationMap.register(MinMaxNorm);var CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = { maxNorm: "MaxNorm", minMaxNorm: "MinMaxNorm", nonNeg: "NonNeg", unitNorm: "UnitNorm" };function serializeConstraint(e) {
	  return serializeKerasObject(e);
	}function deserializeConstraint(e, t) {
	  return void 0 === t && (t = {}), deserializeKerasObject(e, serialization.SerializationMap.getMap().classNameMap, t, "constraint");
	}function getConstraint(e) {
	  return null == e ? null : "string" == typeof e ? deserializeConstraint({ className: e in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ? CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[e] : e, config: {} }) : e instanceof Constraint ? e : deserializeConstraint(e);
	}function deserialize(e, t) {
	  return void 0 === t && (t = {}), deserializeKerasObject(e, serialization.SerializationMap.getMap().classNameMap, t, "layer");
	}function isArrayItemInputOrOutputName(e, t, n) {
	  return ("inboundNodes" === e || "outputLayers" === e || "inputLayers" === e) && 0 === t && "string" == typeof n;
	}function convertPythonicToTs(e, t) {
	  if (null === e) return null;if ("string" == typeof e) return toCamelCase(e);if ("number" == typeof e || "boolean" == typeof e) return e;if (e instanceof Array) {
	    for (var n = [], r = e.length, i = 0; i < r; ++i) {
	      var a = e[i];isArrayItemInputOrOutputName(t, i, a) ? n.push(a) : n.push(convertPythonicToTs(a, t));
	    }return n;
	  }for (var o = {}, s = 0, l = Object.keys(e); s < l.length; s++) {
	    var u = l[s],
	        c = e[u];if ("name" === u && "string" == typeof c) o[u] = c;else {
	      var p = toCamelCase(u);o[p] = convertPythonicToTs(c, p);
	    }
	  }return o;
	}function convertTsToPythonic(e, t) {
	  if (null === e || void 0 === e) return null;if ("string" == typeof e) return toSnakeCase(e);if ("number" == typeof e || "boolean" == typeof e) return e;if (e instanceof Array) {
	    for (var n = [], r = e.length, i = 0; i < r; ++i) {
	      var a = e[i];isArrayItemInputOrOutputName(t, i, a) ? n.push(a) : n.push(convertTsToPythonic(a, t));
	    }return n;
	  }for (var o = {}, s = 0, l = Object.keys(e); s < l.length; s++) {
	    var u = l[s],
	        c = e[u],
	        p = toSnakeCase(u);o[p] = "name" !== u && "className" !== u || "string" != typeof c ? convertTsToPythonic(c, u) : c;
	  }return o;
	}var version$1 = "0.6.7",
	    InputSpec = function () {
	  return function (e) {
	    this.dtype = e.dtype, this.shape = e.shape, null != e.shape ? this.ndim = e.shape.length : this.ndim = e.ndim, this.maxNDim = e.maxNDim, this.minNDim = e.minNDim, this.axes = e.axes || {};
	  };
	}(),
	    _nextNodeID = 0,
	    Node = function () {
	  function e(e, t) {
	    this.callArgs = t, this.id = _nextNodeID++, this.outboundLayer = e.outboundLayer, this.inboundLayers = e.inboundLayers, this.nodeIndices = e.nodeIndices, this.tensorIndices = e.tensorIndices, this.inputTensors = e.inputTensors, this.outputTensors = e.outputTensors, this.inputMasks = e.inputMasks, this.outputMasks = e.outputMasks, this.inputShapes = e.inputShapes, this.outputShapes = e.outputShapes;for (var n = 0, r = e.inboundLayers; n < r.length; n++) {
	      var i = r[n];null != i && i.outboundNodes.push(this);
	    }e.outboundLayer.inboundNodes.push(this);
	  }return e.prototype.getConfig = function () {
	    for (var e = [], t = 0, n = this.inboundLayers; t < n.length; t++) {
	      var r = n[t];null != r ? e.push(r.name) : e.push(null);
	    }return { outboundLayer: this.outboundLayer ? this.outboundLayer.name : null, inboundLayers: e, nodeIndices: this.nodeIndices, tensorIndices: this.tensorIndices };
	  }, e;
	}(),
	    _nextLayerID = 0,
	    Layer = function (e) {
	  function t(t) {
	    var n = e.call(this) || this;n._callHook = null, n._addedWeightNames = [], n._stateful = !1, n.id = _nextLayerID++, n.activityRegularizer = null, n.inputSpec = null, n.supportsMasking = !1, n._trainableWeights = [], n._nonTrainableWeights = [], n._losses = [], n._updates = [], n._built = !1, n.inboundNodes = [], n.outboundNodes = [];var r = t.name;if (!r) {
	      var i = n.getClassName();r = toSnakeCase(i) + "_" + getUid(i);
	    }if (n.name = r, n.trainable = null == t.trainable || t.trainable, n.updatable = null == t.updatable || t.updatable, null != t.inputShape || null != t.batchInputShape) {
	      var a = void 0;if (null != t.batchInputShape) a = t.batchInputShape;else if (null != t.inputShape) {
	        var o = null;null != t.batchSize && (o = t.batchSize), a = [o].concat(t.inputShape);
	      }n.batchInputShape = a;var s = t.dtype;null == s && (s = t.inputDType), null == s && (s = floatx()), n.dtype = s;
	    }return null != t.weights ? n.initialWeights = t.weights : n.initialWeights = null, n;
	  }return __extends$1(t, e), t.nodeKey = function (e, t) {
	    return e.name + "_ib-" + t.toString();
	  }, t.prototype.getNodeAtIndex = function (e, t) {
	    if (0 === this.inboundNodes.length) throw new RuntimeError("The layer has never been called and thus has no defined " + t + ".");if (this.inboundNodes.length <= e) throw new ValueError("Asked to get " + t + " at node " + e + ", but the layer has only " + this.inboundNodes.length + " inbound nodes.");return this.inboundNodes[e];
	  }, t.prototype.getInputAt = function (e) {
	    return singletonOrArray(this.getNodeAtIndex(e, "input").inputTensors);
	  }, t.prototype.getOutputAt = function (e) {
	    return singletonOrArray(this.getNodeAtIndex(e, "output").outputTensors);
	  }, Object.defineProperty(t.prototype, "input", { get: function () {
	      if (this.inboundNodes.length > 1) throw new AttributeError("Layer " + this.name + ' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if (0 === this.inboundNodes.length) throw new AttributeError("Layer " + this.name + " is not connected, no input to return.");return singletonOrArray(this.getNodeAtIndex(0, "input").inputTensors);
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "output", { get: function () {
	      if (0 === this.inboundNodes.length) throw new AttributeError("Layer " + this.name + " has no inbound nodes.");if (this.inboundNodes.length > 1) throw new AttributeError("Layer " + this.name + ' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return singletonOrArray(this.getNodeAtIndex(0, "output").outputTensors);
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "losses", { get: function () {
	      return this._losses;
	    }, enumerable: !0, configurable: !0 }), t.prototype.calculateLosses = function () {
	    return this.losses.map(function (e) {
	      return e();
	    });
	  }, Object.defineProperty(t.prototype, "updates", { get: function () {
	      return this._updates;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "built", { get: function () {
	      return this._built;
	    }, set: function (e) {
	      this._built = e;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "trainableWeights", { get: function () {
	      return this.trainable ? this._trainableWeights : [];
	    }, set: function (e) {
	      this._trainableWeights = e;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "nonTrainableWeights", { get: function () {
	      return this.trainable ? this._nonTrainableWeights : this._trainableWeights.concat(this._nonTrainableWeights);
	    }, set: function (e) {
	      this._nonTrainableWeights = e;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "weights", { get: function () {
	      return this.trainableWeights.concat(this.nonTrainableWeights);
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "stateful", { get: function () {
	      return this._stateful;
	    }, enumerable: !0, configurable: !0 }), t.prototype.assertInputCompatibility = function (e) {
	    if (e = toList(e), null != this.inputSpec && 0 !== this.inputSpec.length) {
	      var t = toList(this.inputSpec);if (e.length !== t.length) throw new ValueError("Layer " + this.name + " expects " + t.length + " inputs, but it received " + e.length + " input tensors. Input received: " + e);for (var n = 0; n < e.length; n++) {
	        var r = e[n],
	            i = t[n];if (null != i) {
	          var a = r.rank;if (null != i.ndim && a !== i.ndim) throw new ValueError("Input " + n + " is incompatible with layer " + this.name + ": expected ndim=" + i.ndim + ", found ndim=" + a);if (null != i.maxNDim && a > i.maxNDim) throw new ValueError("Input " + n + " is incompatible with layer " + this.name + ": expected max_ndim=" + i.maxNDim + ", found ndim=" + a);if (null != i.minNDim && a < i.minNDim) throw new ValueError("Input " + n + " is incompatible with layer " + this.name + ": expected min_ndim=" + i.minNDim + ", found ndim=" + a + ".");if (null != i.dtype && dtype(r) !== i.dtype) {
	            var o = dtype(r);throw new ValueError("Input " + n + " is incompatible with layer " + this.name + " : expected dtype=" + i.dtype + ", found dtype=" + o + ".");
	          }if (i.axes) {
	            var s = intShape(r);for (var l in i.axes) {
	              var u = Number(l),
	                  c = i.axes[l],
	                  p = u >= 0 ? s[u] : s[s.length + u];if (null != c && -1 === [c, null].indexOf(p)) throw new ValueError("Input " + n + " is incompatible with layer " + this.name + ": expected axis " + u + " of input shape to have value " + c + " but got shape " + s + ".");
	            }
	          }if (null != i.shape) {
	            s = intShape(r);for (var h = 0; h < i.shape.length; ++h) {
	              var d = i.shape[h],
	                  g = s[h];if (null != d && null != g && d !== g) throw new ValueError("Input " + n + " is incompatible with layer " + this.name + ": expected shape=" + i.shape + ", found shape=${xShape}.");
	            }
	          }
	        }
	      }
	    }
	  }, t.prototype.call = function (e, t) {
	    return e;
	  }, t.prototype.invokeCallHook = function (e, t) {
	    null != this._callHook && this._callHook(e, t);
	  }, t.prototype.setCallHook = function (e) {
	    this._callHook = e;
	  }, t.prototype.clearCallHook = function () {
	    this._callHook = null;
	  }, t.prototype.apply = function (e, t) {
	    var n = this;t = t || {};for (var r = toList(e), i = !0, a = 0, o = r; a < o.length; a++) {
	      if (!(o[a] instanceof SymbolicTensor)) {
	        i = !1;break;
	      }
	    }for (var s = !0, l = 0, u = r; l < u.length; l++) {
	      if (u[l] instanceof SymbolicTensor) {
	        s = !1;break;
	      }
	    }if (i === s) throw new ValueError("Arguments to apply() must be all SymbolicTensors or all Tensors");return nameScope$1(this.name, function () {
	      if (!n.built) {
	        n.assertInputCompatibility(e);for (var i = [], a = 0, o = toList(e); a < o.length; a++) {
	          var l = o[a];i.push(intShape(l));
	        }n.build(singletonOrArray(i)), n.built = !0, n.initialWeights && n.setWeights(n.initialWeights);
	      }if (n.assertInputCompatibility(e), s) {
	        for (var u = [], c = 0, p = toList(f = n.call(e, t)); c < p.length; c++) {
	          var h = p[c];-1 !== r.indexOf(h) && (h = identity(h)), u.push(h);
	        }if (f = singletonOrArray(u), null != n.activityRegularizer) throw new NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return f;
	      }var d = collectInputShape(e),
	          g = n.computeOutputShape(d),
	          f = void 0,
	          m = guessOutputDType(e);if (f = null != g && g.length > 0 && Array.isArray(g[0]) ? g.map(function (r, i) {
	        return new SymbolicTensor(m, r, n, toList(e), t, n.name, i);
	      }) : new SymbolicTensor(m, g, n, toList(e), t, n.name), n.addInboundNode(e, f, null, null, d, g, t), null != n.activityRegularizer) throw new NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return f;
	    });
	  }, Object.defineProperty(t.prototype, "outputShape", { get: function () {
	      if (null == this.inboundNodes || 0 === this.inboundNodes.length) throw new AttributeError("The layer " + this.name + " has never been called and thus has no defined output shape.");for (var e = [], t = 0, n = this.inboundNodes; t < n.length; t++) {
	        var r = n[t],
	            i = JSON.stringify(r.outputShapes);-1 === e.indexOf(i) && e.push(i);
	      }if (1 === e.length) {
	        var a = this.inboundNodes[0].outputShapes;return Array.isArray(a) && Array.isArray(a[0]) && 1 === a.length ? a[0] : a;
	      }throw new AttributeError("The layer " + this.name + ' has multiple inbound nodes with different output shapes. Hence the notion of "outut shape" is ill-defined for the layer.');
	    }, enumerable: !0, configurable: !0 }), t.prototype.countParams = function () {
	    if (!this.built) throw new RuntimeError("You tried to call countParams() on " + this.name + ", but the layer is not built yet. Build it first by calling build(batchInputShape).");return countParamsInWeights(this.weights);
	  }, t.prototype.build = function (e) {
	    this.built = !0;
	  }, t.prototype.getWeights = function (e) {
	    return void 0 === e && (e = !1), batchGetValue(e ? this.trainableWeights : this.weights);
	  }, t.prototype.setWeights = function (e) {
	    var t = this;tidy(function () {
	      var n = t.weights;if (n.length !== e.length) throw new ValueError('You called setWeights(weights) on layer "' + t.name + '" with a weight list of length ' + e.length + ", but the layer was expecting " + n.length + " weights. Provided weights: " + e + "...");if (0 !== n.length) {
	        for (var r = [], i = batchGetValue(n), a = 0; a < i.length; ++a) {
	          var o = i[a],
	              s = n[a],
	              l = e[a];if (!util.arraysEqual(o.shape, l.shape)) throw new ValueError("Layer weight shape " + o.shape + " not compatible with provided weight shape " + l.shape);r.push([s, l]);
	        }batchSetValue(r);
	      }
	    });
	  }, t.prototype.addWeight = function (e, t, n, r, i, a, o) {
	    if (-1 !== this._addedWeightNames.indexOf(e)) throw new ValueError("Duplicate weight name " + e + " for layer " + this.name);this._addedWeightNames.push(e), null == n && (n = floatx());var s = new LayerVariable(r.apply(t, n), n, e, a, o);return null != i && this.addLoss(function () {
	      return i.apply(s.read());
	    }), null == a && (a = !0), a ? this._trainableWeights.push(s) : this._nonTrainableWeights.push(s), s;
	  }, t.prototype.addLoss = function (e) {
	    var t;null == e || Array.isArray(e) && 0 === e.length || (e = toList(e), void 0 !== this._losses && null !== this._losses && (t = this.losses).push.apply(t, e));
	  }, t.prototype.computeOutputShape = function (e) {
	    return e;
	  }, t.prototype.computeMask = function (e, t) {
	    var n = this;if (!this.supportsMasking) {
	      if (null != t) {
	        if (!Array.isArray(t)) throw new TypeError("Layer " + this.name + " does not support masking,but was passed an inputMask.");t.forEach(function (e) {
	          if (null != e) throw new TypeError("Layer " + n.name + " does not support masking,but was passed an inputMask.");
	        });
	      }return null;
	    }return t;
	  }, t.prototype.addInboundNode = function (e, t, n, r, i, a, o) {
	    void 0 === o && (o = null);var s = toList(e);t = toList(t), n = toList(n), r = toList(r), i = normalizeShapeList(i), a = normalizeShapeList(a);for (var l = [], u = [], c = [], p = 0, h = s; p < h.length; p++) {
	      var d = h[p];l.push(d.sourceLayer), u.push(d.nodeIndex), c.push(d.tensorIndex);
	    }new Node({ outboundLayer: this, inboundLayers: l, nodeIndices: u, tensorIndices: c, inputTensors: s, outputTensors: t, inputMasks: n, outputMasks: r, inputShapes: i, outputShapes: a }, o);for (var g = 0; g < t.length; g++) t[g].sourceLayer = this, t[g].nodeIndex = this.inboundNodes.length - 1, t[g].tensorIndex = g;
	  }, t.prototype.getConfig = function () {
	    var e = { name: this.name, trainable: this.trainable };return null != this.batchInputShape && (e.batchInputShape = this.batchInputShape), null != this.dtype && (e.dtype = this.dtype), e;
	  }, __decorate$1([doc({ heading: "Models", subheading: "Classes" })], t.prototype, "apply", null), t = __decorate$1([doc({ heading: "Layers", subheading: "Classes", namespace: "layers" })], t);
	}(serialization.Serializable);function collectInputShape(e) {
	  for (var t = [], n = 0, r = e = toList(e); n < r.length; n++) {
	    var i = r[n];t.push(intShape(i));
	  }return singletonOrArray(t);
	}function guessOutputDType(e) {
	  return "float32";
	}var InputLayer = function (e) {
	  function t(t) {
	    var n = e.call(this, { dtype: t.dtype, name: null != t.name ? t.name : getUid("input").toString() }) || this;if (null == t.batchSize && (t.batchSize = null), null == t.sparse && (t.sparse = !1), n.trainable = !1, n.built = !0, n.sparse = t.sparse, null != t.inputShape && null != t.batchInputShape) throw new ValueError("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");var r = t.batchInputShape;if (null == r) {
	      if (null == t.inputShape) throw new ValueError("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");r = [t.batchSize].concat(t.inputShape);
	    } else if (null != t.batchSize) throw new ValueError("Cannot specify batchSize if batchInputShape isspecified when creating an InputLayer.");var i = t.dtype || floatx();n.batchInputShape = r, n.dtype = i, n.inputSpec = [{ shape: r }];var a = new SymbolicTensor(n.dtype, n.batchInputShape, n, [], {}, n.name);return a.nodeIndex = 0, a.tensorIndex = 0, new Node({ outboundLayer: n, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: [a], outputTensors: [a], inputMasks: [null], outputMasks: [null], inputShapes: [r], outputShapes: [r] }), n;
	  }return __extends$1(t, e), t.prototype.apply = function (e, t) {
	    throw new ValueError("Cannot pass any input to an InputLayer's apply() method. InputLayer name: " + this.name);
	  }, t.prototype.getConfig = function () {
	    return { batchInputShape: this.batchInputShape, dtype: this.dtype, sparse: this.sparse, name: this.name };
	  }, t.className = "InputLayer", t;
	}(Layer);function Input(e) {
	  if (null == e.batchShape && null == e.shape) throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if (null != e.batchShape && null != e.shape) throw new ValueError("Please provide either a `shape` or `batchShape` argument to Input, but not both.");var t = e.batchShape;null != e.shape && null == t && (t = [null].concat(e.shape));var n = e.dtype;return null == n && (n = floatx()), new InputLayer({ batchInputShape: t, name: e.name, dtype: n, sparse: e.sparse }).inboundNodes[0].outputTensors[0];
	}serialization.SerializationMap.register(InputLayer);var Container = function (e) {
	  function t(n) {
	    var r = e.call(this, {}) || this;if (r.containerNodes = new Set(), r.name = n.name, null == r.name) {
	      var i = r.getClassName().toLowerCase();r.name = getUid(i);
	    }if (r.supportsMasking = !1, r.trainable = !0, r.updatable = !0, Array.isArray(n.inputs) ? r.inputs = n.inputs.slice() : r.inputs = [n.inputs], Array.isArray(n.outputs) ? r.outputs = n.outputs.slice() : r.outputs = [n.outputs], unique(r.inputs).length !== r.inputs.length) throw new ValueError("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: " + r.inputs.map(function (e) {
	      return e.name;
	    }));unique(r.outputs).length !== r.outputs.length && console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: " + r.outputs.map(function (e) {
	      return e.name;
	    })), r.inputLayers = [], r.inputLayersNodeIndices = [], r.inputLayersTensorIndices = [], r.outputLayers = [], r.outputLayersNodeIndices = [], r.outputLayersTensorIndices = [], r.layers = [];for (var a = 0, o = r.outputs; a < o.length; a++) {
	      var s = (N = o[a]).sourceLayer,
	          l = N.nodeIndex,
	          u = N.tensorIndex;r.outputLayers.push(s), r.outputLayersNodeIndices.push(l), r.outputLayersTensorIndices.push(u);
	    }for (var c = 0, p = r.inputs; c < p.length; c++) {
	      s = (N = p[c]).sourceLayer, l = N.nodeIndex, u = N.tensorIndex;assert$1(0 === l, "input layer has >1 nodes"), assert$1(0 === u, "input layer has >1 tensors"), r.inputLayers.push(s), r.inputLayersNodeIndices.push(l), r.inputLayersTensorIndices.push(u);
	    }r.inputNames = [], r.outputNames = [], r.feedInputShapes = [], r.feedInputNames = [], r.feedOutputNames = [];for (var h = 0; h < r.inputLayers.length; h++) {
	      if (!((s = r.inputLayers[h]) instanceof InputLayer)) throw new TypeError("Input layers to a Model must be InputLayer objects. Received inputs: " + n.inputs + ". Input " + h + " (0-based) originates from layer type " + s.getClassName() + ".");r.inputNames.push(s.name), r.feedInputShapes.push(s.batchInputShape), r.feedInputNames.push(s.name);
	    }for (var d = 0, g = r.outputLayers; d < g.length; d++) {
	      s = g[d];r.outputNames.push(s.name);
	    }r.internalInputShapes = r.inputs.map(function (e) {
	      return e.shape;
	    }), r.internalOutputShapes = r.outputs.map(function (e) {
	      return e.shape;
	    });for (var f = {}, m = {}, y = {}, v = {}, b = {}, z = [], w = function (e, n, i, a, o, s) {
	      null != a && null != o && null != s || (a = e.sourceLayer, o = e.nodeIndex, s = e.tensorIndex);var l = a.inboundNodes[o];if (-1 !== i.indexOf(l)) throw new RuntimeError("The tensor " + e.name + ' at layer "' + a.name + '" is part of a cycle.');if (-1 === n.indexOf(l)) {
	        r.containerNodes.add(t.nodeKey(a, o)), (a.id in b) || (b[a.id] = Object.keys(b).length), -1 === i.indexOf(l) && i.push(l);for (var u = l.inboundLayers.length, c = 0; c < u; c++) {
	          var p = l.inputTensors[c],
	              h = l.inboundLayers[c],
	              d = l.nodeIndices[c],
	              g = l.tensorIndices[c];w(p, n, i, h, d, g);
	        }for (n.push(l); i.indexOf(l) >= 0;) i.splice(i.indexOf(l), 1);z.push(l);
	      }
	    }, S = [], I = [], _ = 0, A = r.outputs; _ < A.length; _++) {
	      var N = A[_];w(N, S, I);
	    }for (var E = 0, L = z.slice().reverse(); E < L.length; E++) {
	      m[(H = L[E]).id] = H, H.id in f || (f[H.id] = 0);var C = f[H.id],
	          x = null == y[H.outboundLayer.id] ? 0 : y[H.outboundLayer.id];C = Math.max(C, x), y[H.outboundLayer.id] = C, v[H.outboundLayer.id] = H.outboundLayer, f[H.id] = C;for (h = 0; h < H.inboundLayers.length; h++) {
	        var k = H.inboundLayers[h],
	            T = (l = H.nodeIndices[h], k.inboundNodes[l]),
	            R = null == f[T.id] ? 0 : f[T.id];f[T.id] = Math.max(C + 1, R), m[T.id] = T;
	      }
	    }var D = {};for (var O in f) {
	      (C = f[O]) in D || (D[C] = []), D[C].push(m[O]);
	    }var M = {};for (var F in y) {
	      (C = y[F]) in M || (M[C] = []), M[C].push(v[F]);
	    }var P = Object.keys(M).map(function (e) {
	      return parseInt(e, 10);
	    }).sort(reverseNumberCompare);r.layers = [];for (var V = 0, B = P; V < B.length; V++) {
	      var U = M[C = B[V]];U.sort(function (e, t) {
	        var n = b[e.id],
	            r = b[t.id];return n < r ? -1 : n > r ? 1 : 0;
	      });for (var W = 0, j = U; W < j.length; W++) {
	        s = j[W];r.layers.push(s);
	      }
	    }r.layersByDepth = M, P = Object.keys(D).map(function (e) {
	      return parseInt(e, 10);
	    }).sort(reverseNumberCompare);for (var q = r.inputs.slice(), G = [], $ = 0, Z = P; $ < Z.length; $++) for (var J = 0, K = D[C = Z[$]]; J < K.length; J++) {
	      var H;if (null != (s = (H = K[J]).outboundLayer)) {
	        for (var Y = 0, X = H.inputTensors; Y < X.length; Y++) {
	          N = X[Y];if (-1 === q.indexOf(N)) throw new RuntimeError("Graph disconnected: cannot obtain value for tensor " + N + ' at layer "' + s.name + '". The following previous layers were accessed without issue: ' + G);
	        }for (var Q = 0, ee = H.outputTensors; Q < ee.length; Q++) {
	          N = ee[Q];q.push(N);
	        }G.push(s.name);
	      }
	    }r.nodesByDepth = D;for (var te = r.layers.map(function (e) {
	      return e.name;
	    }), ne = function (e) {
	      var t = te.filter(function (t) {
	        return t === e;
	      }).length;if (1 !== t) throw new RuntimeError('The name "' + e + '" is used ' + t + " times in the model. All layer names should be unique. Layer names: " + JSON.stringify(te));
	    }, re = 0, ie = te; re < ie.length; re++) {
	      ne(ie[re]);
	    }return r.outboundNodes = [], r.inboundNodes = [], new Node({ outboundLayer: r, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: r.inputs, outputTensors: r.outputs, inputMasks: r.inputs.map(function (e) {
	        return null;
	      }), outputMasks: r.outputs.map(function (e) {
	        return null;
	      }), inputShapes: r.inputs.map(function (e) {
	        return e.shape;
	      }), outputShapes: r.outputs.map(function (e) {
	        return e.shape;
	      }) }), r.built = !0, r;
	  }return __extends$1(t, e), Object.defineProperty(t.prototype, "trainableWeights", { get: function () {
	      if (this._trainableWeights.length > 0) throw new ValueError("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if (!this.trainable) return [];for (var e = [], t = 0, n = this.layers; t < n.length; t++) {
	        var r = n[t];e = e.concat(r.trainableWeights);
	      }return e;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "nonTrainableWeights", { get: function () {
	      for (var e = [], t = 0, n = this.layers; t < n.length; t++) {
	        var r = n[t];e.push.apply(e, r.nonTrainableWeights);
	      }if (!this.trainable) {
	        for (var i = [], a = 0, o = this.layers; a < o.length; a++) {
	          r = o[a];i.push.apply(i, r.trainableWeights);
	        }return i.concat(e);
	      }return e;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "weights", { get: function () {
	      return this.trainableWeights.concat(this.nonTrainableWeights);
	    }, enumerable: !0, configurable: !0 }), t.prototype.loadWeights = function (e, t, n) {
	    void 0 === t && (t = !1), void 0 === n && (n = !1), n ? loadWeightsFromNamedTensorMap(e, this.layers) : loadWeightsFromJson(e, this.layers, t);
	  }, t.prototype.updatedConfig = function () {
	    var e = this.getConfig();return { className: this.getClassName(), config: e, kerasVersion: "tfjs-layers " + version$1, backend: "TensorFlow.js" };
	  }, t.prototype.toJSON = function (e, t) {
	    void 0 === t && (t = !0);var n = convertTsToPythonic(this.updatedConfig());return t ? JSON.stringify(n) : n;
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      var r;return e = toList(e), r = "mask" in t ? toList(t.mask) : pyListRepeat(null, e.length), n.runInternalGraph(e, r)[0];
	    });
	  }, t.prototype.computeMask = function (e, t) {
	    var n = this;return tidy(function () {
	      var r;return e = toList(e), r = null == t ? pyListRepeat(null, e.length) : toList(t), n.runInternalGraph(e, r)[1];
	    });
	  }, t.prototype.computeOutputShape = function (e) {
	    var t = normalizeShapeList(e);if (t.length !== this.inputLayers.length) throw new ValueError("Invalid inputShape argument " + e + ": model has " + this.inputLayers.length + " tensor inputs.");for (var n = {}, r = 0; r < t.length; r++) {
	      var i = this.inputLayers[r],
	          a = t[r];n[I = i.name + "_0_0"] = a;
	    }var o = Object.keys(this.nodesByDepth).map(function (e) {
	      return parseInt(e, 10);
	    }).sort(reverseNumberCompare);if (o.length > 1) for (var s = 0, l = o; s < l.length; s++) for (var u = l[s], c = 0, p = this.nodesByDepth[u]; c < p.length; c++) {
	      var h = p[c];i = h.outboundLayer;if (-1 === this.inputLayers.map(function (e) {
	        return e.id;
	      }).indexOf(i.id)) {
	        for (var d = [], g = 0; g < h.inboundLayers.length; g++) {
	          var f = h.inboundLayers[g],
	              m = h.nodeIndices[g],
	              y = h.tensorIndices[g],
	              v = n[I = f.name + "_" + m + "_" + y];d.push(v);
	        }var b = normalizeShapeList(i.computeOutputShape(singletonOrArray(d))),
	            z = i.inboundNodes.indexOf(h);for (g = 0; g < b.length; g++) {
	          n[I = i.name + "_" + z + "_" + g] = b[g];
	        }
	      }
	    }var w = [],
	        S = [];for (r = 0; r < this.outputLayers.length; r++) {
	      i = this.outputLayers[r], z = this.outputLayersNodeIndices[r], y = this.outputLayersTensorIndices[r];var I = i.name + "_" + z + "_" + y;S.push(I);
	    }for (r = 0; r < S.length; r++) {
	      var _ = S[r];assert$1(_ in n), w.push(n[_]);
	    }return singletonOrArray(w);
	  }, t.prototype.runInternalGraph = function (e, t) {
	    null == t && (t = pyListRepeat(null, e.length));for (var n = {}, r = 0; r < this.inputs.length; ++r) {
	      var i = this.inputs[r],
	          a = e[r],
	          o = t[r];n[i.id] = [a, o];
	    }for (var s = 0, l = Object.keys(this.nodesByDepth).map(function (e) {
	      return parseInt(e, 10);
	    }).sort(reverseNumberCompare); s < l.length; s++) for (var u = l[s], c = 0, p = this.nodesByDepth[u]; c < p.length; c++) {
	      for (var h = p[c], d = h.outboundLayer, g = h.inputTensors, f = h.outputTensors, m = new Array(), y = 0, v = g; y < v.length; y++) {
	        (i = v[y]).id in n && m.push(n[i.id]);
	      }if (m.length === g.length) {
	        var b = {},
	            z = void 0,
	            w = void 0,
	            S = void 0,
	            I = void 0;if (null != h.callArgs && (b = h.callArgs), 1 === m.length) {
	          var _ = m[0],
	              A = _[0],
	              N = _[1];null == b.mask && (b.mask = N), S = toList(d.call(A, b)), I = toList(d.computeMask(A, N)), z = [A], w = [N];
	        } else z = m.map(function (e) {
	          return e[0];
	        }), w = m.map(function (e) {
	          return e[1];
	        }), null == b.mask && (b.mask = w), S = toList(d.call(z, b)), I = toList(d.computeMask(z, w));if (d.activityRegularizer) throw new NotImplementedError("Model invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for (r = 0; r < f.length; ++r) {
	          i = f[r], a = S[r], o = I[r];n[i.id] = [a, o];
	        }
	      }
	    }for (var E = [], L = [], C = [], x = 0, k = this.outputs; x < k.length; x++) {
	      assert$1((i = k[x]).id in n, "Could not compute output " + i.name + " : " + i.id);var T = n[i.id],
	          R = T[0];o = T[1];C.push(R.shape), E.push(R), L.push(o);
	    }return [E, L, C];
	  }, t.prototype.buildNodeConversionMap = function (e) {
	    for (var n, r = {}, i = 0, a = this.layers; i < a.length; i++) {
	      var o = a[i];n = o instanceof t ? 1 : 0;for (var s = 0; s < o.inboundNodes.length; s++) {
	        var l = t.nodeKey(o, s);l in this.containerNodes && (r[l] = n, n += 1);
	      }
	    }return r;
	  }, t.prototype.getLayer = function (e, t) {
	    if (null != t) {
	      if (this.layers.length <= t) throw new ValueError("Was asked to retrieve layer at index " + t + ", but model only has " + this.layers.length + " layer(s).");return this.layers[t];
	    }if (null == e) throw new ValueError("Provide either a layer name or layer index");for (var n = 0, r = this.layers; n < r.length; n++) {
	      var i = r[n];if (i.name === e) return i;
	    }throw new ValueError("No such layer: " + e);
	  }, t.prototype.calculateLosses = function () {
	    var e = this;return tidy(function () {
	      for (var n = [], r = 0, i = e.layers; r < i.length; r++) for (var a = i[r], o = 0; o < a.inboundNodes.length; ++o) {
	        var s = t.nodeKey(a, o);e.containerNodes.has(s) && n.push.apply(n, a.calculateLosses());
	      }return n;
	    });
	  }, t.prototype.getConfig = function () {
	    for (var e = { name: this.name }, n = this.buildNodeConversionMap(this.layers), r = [], i = 0, a = this.layers; i < a.length; i++) {
	      for (var o = (b = a[i]).getClassName(), s = b.getConfig(), l = [], u = 0; u < b.inboundNodes.length; u++) {
	        var c = b.inboundNodes[u],
	            p = t.nodeKey(b, u),
	            h = {};if (this.containerNodes.has(p)) {
	          if (c.callArgs) -1 === JSON.stringify(c.callArgs).indexOf("undefined") ? h = c.callArgs : (console.warn("Layer " + b.name + " was passed non-serializable keyword arguments: " + c.callArgs + ". They will not be included in the serialized model (and thus will be missing at deserialization time)."), h = {});if (c.inboundLayers.length > 0) {
	            for (var d = [], g = 0; g < c.inboundLayers.length; g++) {
	              var f = c.inboundLayers[g],
	                  m = c.nodeIndices[g],
	                  y = c.tensorIndices[g];null !== (w = n[t.nodeKey(f, m)]) && void 0 !== w || (w = 0), d.push([f.name, w, y, h]);
	            }l.push(d);
	          }
	        }
	      }r.push({ name: b.name, className: o, config: s, inboundNodes: l });
	    }e.layers = r;var v = [];for (g = 0; g < this.inputLayers.length; g++) {
	      var b = this.inputLayers[g];m = this.inputLayersNodeIndices[g], p = t.nodeKey(b, m);if (this.containerNodes.has(p)) {
	        null !== (w = n[p]) && void 0 !== w || (w = 0);y = this.inputLayersTensorIndices[g];v.push([b.name, w, y]);
	      }
	    }e.inputLayers = v;var z = [];for (g = 0; g < this.outputLayers.length; g++) {
	      b = this.outputLayers[g], m = this.outputLayersNodeIndices[g], p = t.nodeKey(b, m);if (this.containerNodes.has(p)) {
	        var w;null !== (w = n[p]) && void 0 !== w || (w = 0);y = this.outputLayersTensorIndices[g];z.push([b.name, w, y]);
	      }
	    }return e.outputLayers = z, e;
	  }, t.fromConfig = function (e, t) {
	    var n = {},
	        r = {};function i(e, t) {
	      e.name in r ? r[e.name].push(t) : r[e.name] = [t];
	    }function a(e, t) {
	      for (var r, a = [], o = 0, s = t; o < s.length; o++) {
	        var l = s[o],
	            u = l[0],
	            c = l[1],
	            p = l[2];if (3 === l.length) r = {};else {
	          if (4 !== l.length) throw new ValueError("Improperly formatted model config for layer " + JSON.stringify(e) + ": " + JSON.stringify(l));r = l[3];
	        }if (!(u in n)) return void i(e, t);var h = n[u];if (h.inboundNodes.length <= c) return void i(e, t);var d = h.inboundNodes[c];a.push(d.outputTensors[p]);
	      }a.length > 0 && e.apply(singletonOrArray(a), r);
	    }function o(e) {
	      var r = e.name,
	          a = deserialize(e, null != t.customObjects ? t.customObjects : {});n[r] = a;for (var o = 0, s = e.inboundNodes; o < s.length; o++) {
	        var l = s[o];if (!(l instanceof Array)) throw new ValueError("Corrupted configuration, expected array for nodeData: " + l);i(a, l);
	      }
	    }for (var s = t.name, l = t.layers, u = 0, c = l; u < c.length; u++) {
	      o(d = c[u]);
	    }for (; !isObjectEmpty(r);) for (var p = 0, h = l; p < h.length; p++) {
	      var d = h[p];if ((N = n[d.name]).name in r) {
	        for (var g = 0, f = r[N.name]; g < f.length; g++) {
	          a(N, f[g]);
	        }delete r[N.name];
	      }
	    }for (var m = [], y = [], v = 0, b = t.inputLayers; v < b.length; v++) {
	      var z = (d = b[v])[0],
	          w = d[1],
	          S = d[2];assert$1(z in n);var I = (N = n[z]).inboundNodes[w].outputTensors;m.push(I[S]);
	    }for (var _ = 0, A = t.outputLayers; _ < A.length; _++) {
	      z = (d = A[_])[0], w = d[1], S = d[2];assert$1(z in n);var N;I = (N = n[z]).inboundNodes[w].outputTensors;y.push(I[S]);
	    }return new e({ inputs: m, outputs: y, name: s });
	  }, Object.defineProperty(t.prototype, "stateful", { get: function () {
	      if (this._stateful) throw new ValueError("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for (var e = 0, t = this.layers; e < t.length; e++) {
	        if (t[e].stateful) return !0;
	      }return !1;
	    }, enumerable: !0, configurable: !0 }), __decorate$1([doc({ heading: "Layers", subheading: "Classes", namespace: "layers", subclasses: ["Model"] })], t.prototype, "getLayer", null), t;
	}(Layer);function getSourceInputs(e, t, n) {
	  if ((null == t || null != n && n > 0) && (t = e.sourceLayer, n = e.nodeIndex), 0 === t.inboundNodes.length) return [e];var r = t.inboundNodes[n];if (0 === r.inboundLayers.length) return r.inputTensors;for (var i = [], a = 0; a < r.inboundLayers.length; a++) for (var o = 0, s = getSourceInputs(r.inputTensors[a], r.inboundLayers[a], r.nodeIndices[a]); o < s.length; o++) {
	    var l = s[o];-1 === i.indexOf(l) && i.push(l);
	  }return i;
	}function loadTensor(e, t, n) {
	  var r = stringToDType(e);return Tensor.make(t, { values: 0 === t.length ? n : util.flatten(n) }, r);
	}function preprocessWeightsForLoading(e, t, n, r) {
	  if (!n.startsWith("2.")) throw new ValueError("Unsupported Keras version in weights being loaded: " + n);return t;
	}function loadWeightsFromNamedTensorMap(e, t) {
	  for (var n = {}, r = 0, i = 0, a = t; i < a.length; i++) for (var o = 0, s = a[i].weights; o < s.length; o++) {
	    var l = s[o];if (null != n[l.originalName]) throw new ValueError("Duplicate weight name: " + l.originalName);n[l.originalName] = l, r++;
	  }var u = [];for (var c in e) u.push([n[c], e[c]]), delete n[c];var p = [];for (var h in n) p.push(h);if (p.length > 0) throw new ValueError(p.length + " of " + r + " weights are not set: " + p);batchSetValue(u);
	}function loadWeightsFromJson(e, t, n) {
	  void 0 === n && (n = !1);for (var r = e.keras_version, i = e.backend, a = t.map(function (e) {
	    return e.name;
	  }), o = {}, s = 0, l = t; s < l.length; s++) {
	    null != (b = l[s]).name && (null == o[b.name] && (o[b.name] = []), o[b.name].push(b));
	  }for (var u = e.weights, c = [], p = 0; p < a.length; ++p) {
	    var h = a[p],
	        d = u[h];null == d && (d = []);for (var g = [], f = 0; f < d.length; ++f) {
	      var m = d[f];g.push(new LayerVariable(loadTensor(m.dtype, m.shape, m.value)));
	    }for (var y = 0, v = o[h]; y < v.length; y++) {
	      var b,
	          z = (b = v[y]).weights;if ((g = preprocessWeightsForLoading(b, g, r, i)).length !== z.length) {
	        if (!n) throw new ValueError("Layer #" + p + ' (named "' + b.name + '") expects ' + z.length + " weight(s), but the saved weights have " + g.length + " element(s).");console.warn("Skipping loading of weights of layer " + b.name + " due to mismatch in number of weights: (" + g.length + " vs " + z.length + ").");
	      }for (var w = 0; w < g.length; ++w) !n || util.arraysEqual(z[w].shape, g[w].shape) ? c.push([z[w], g[w].read()]) : console.warn("Skipping loading of weights for layer " + b.name + " due to mismatch in shape (" + z[w].shape + " vs " + g[w].shape + ")");
	    }
	  }batchSetValue(c);
	}var Callback = function () {
	  function e() {
	    this.validationData = null, this.model = null;
	  }return e.prototype.setParams = function (e) {
	    this.params = e;
	  }, e.prototype.setModel = function (e) {
	    this.model = e;
	  }, e.prototype.onEpochBegin = function (e, t) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      return __generator$1(this, function (e) {
	        return [2];
	      });
	    });
	  }, e.prototype.onEpochEnd = function (e, t) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      return __generator$1(this, function (e) {
	        return [2];
	      });
	    });
	  }, e.prototype.onBatchBegin = function (e, t) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      return __generator$1(this, function (e) {
	        return [2];
	      });
	    });
	  }, e.prototype.onBatchEnd = function (e, t) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      return __generator$1(this, function (e) {
	        return [2];
	      });
	    });
	  }, e.prototype.onTrainBegin = function (e) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      return __generator$1(this, function (e) {
	        return [2];
	      });
	    });
	  }, e.prototype.onTrainEnd = function (e) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      return __generator$1(this, function (e) {
	        return [2];
	      });
	    });
	  }, e;
	}(),
	    CallbackList = function () {
	  function e(e, t) {
	    void 0 === t && (t = 10), null == e && (e = []), this.callbacks = e, this.queueLength = t;
	  }return e.prototype.append = function (e) {
	    this.callbacks.push(e);
	  }, e.prototype.setParams = function (e) {
	    for (var t = 0, n = this.callbacks; t < n.length; t++) {
	      n[t].setParams(e);
	    }
	  }, e.prototype.setModel = function (e) {
	    for (var t = 0, n = this.callbacks; t < n.length; t++) {
	      n[t].setModel(e);
	    }
	  }, e.prototype.onEpochBegin = function (e, t) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      var n, r;return __generator$1(this, function (i) {
	        switch (i.label) {case 0:
	            null == t && (t = {}), n = 0, r = this.callbacks, i.label = 1;case 1:
	            return n < r.length ? [4, r[n].onEpochBegin(e, t)] : [3, 4];case 2:
	            i.sent(), i.label = 3;case 3:
	            return n++, [3, 1];case 4:
	            return [2];}
	      });
	    });
	  }, e.prototype.onEpochEnd = function (e, t) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      var n, r;return __generator$1(this, function (i) {
	        switch (i.label) {case 0:
	            null == t && (t = {}), n = 0, r = this.callbacks, i.label = 1;case 1:
	            return n < r.length ? [4, r[n].onEpochEnd(e, t)] : [3, 4];case 2:
	            i.sent(), i.label = 3;case 3:
	            return n++, [3, 1];case 4:
	            return [2];}
	      });
	    });
	  }, e.prototype.onBatchBegin = function (e, t) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      var n, r;return __generator$1(this, function (i) {
	        switch (i.label) {case 0:
	            null == t && (t = {}), n = 0, r = this.callbacks, i.label = 1;case 1:
	            return n < r.length ? [4, r[n].onBatchBegin(e, t)] : [3, 4];case 2:
	            i.sent(), i.label = 3;case 3:
	            return n++, [3, 1];case 4:
	            return [2];}
	      });
	    });
	  }, e.prototype.onBatchEnd = function (e, t) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      var n, r;return __generator$1(this, function (i) {
	        switch (i.label) {case 0:
	            null == t && (t = {}), n = 0, r = this.callbacks, i.label = 1;case 1:
	            return n < r.length ? [4, r[n].onBatchEnd(e, t)] : [3, 4];case 2:
	            i.sent(), i.label = 3;case 3:
	            return n++, [3, 1];case 4:
	            return [2];}
	      });
	    });
	  }, e.prototype.onTrainBegin = function (e) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      var t, n;return __generator$1(this, function (r) {
	        switch (r.label) {case 0:
	            null == e && (e = {}), t = 0, n = this.callbacks, r.label = 1;case 1:
	            return t < n.length ? [4, n[t].onTrainBegin(e)] : [3, 4];case 2:
	            r.sent(), r.label = 3;case 3:
	            return t++, [3, 1];case 4:
	            return [2];}
	      });
	    });
	  }, e.prototype.onTrainEnd = function (e) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      var t, n;return __generator$1(this, function (r) {
	        switch (r.label) {case 0:
	            null == e && (e = {}), t = 0, n = this.callbacks, r.label = 1;case 1:
	            return t < n.length ? [4, n[t].onTrainEnd(e)] : [3, 4];case 2:
	            r.sent(), r.label = 3;case 3:
	            return t++, [3, 1];case 4:
	            return [2];}
	      });
	    });
	  }, e;
	}(),
	    BaseLogger = function (e) {
	  function t() {
	    return e.call(this) || this;
	  }return __extends$1(t, e), t.prototype.onEpochBegin = function (e, t) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      return __generator$1(this, function (e) {
	        return this.seen = 0, this.totals = {}, [2];
	      });
	    });
	  }, t.prototype.onBatchEnd = function (e, t) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      var e,
	          n,
	          r,
	          i,
	          a = this;return __generator$1(this, function (o) {
	        for (i in null == t && (t = {}), e = null == t.size ? 0 : t.size, this.seen += e, n = function (n) {
	          var i = t[n];if ("number" == typeof i) r.totals.hasOwnProperty(n) || (r.totals[n] = 0), r.totals[n] = r.totals[n] + i * e;else {
	            var o = void 0;n in r.totals ? o = r.totals[n] : r.totals[n] = getScalar(0), r.totals[n] = tidy(function () {
	              return scalarPlusArray(a.totals[n], mul(i, getScalar(e)));
	            }), null != o && o.dispose();
	          }
	        }, r = this, t) n(i);return [2];
	      });
	    });
	  }, t.prototype.onEpochEnd = function (e, t) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      var e,
	          n,
	          r,
	          i,
	          a,
	          o = this;return __generator$1(this, function (s) {
	        if (null != t) for (e = function (e) {
	          if (null == n.totals[e]) return "continue";"number" == typeof n.totals[e] ? t[e] = n.totals[e] / n.seen : tidy(function () {
	            t[e] = scalarTimesArray(div(getScalar(1), getScalar(o.seen)), o.totals[e]), o.totals[e].dispose(), keep(t[e]);
	          });
	        }, n = this, r = 0, i = this.params.metrics; r < i.length; r++) a = i[r], e(a);return [2];
	      });
	    });
	  }, t;
	}(Callback);function resolveScalarsInLogs(e) {
	  return __awaiter$1(this, void 0, void 0, function () {
	    var t, n, r, i, a, o, s;return __generator$1(this, function (l) {
	      switch (l.label) {case 0:
	          if (null == e) return [2];for (r in t = [], n = [], e) "number" != typeof (i = e[r]) && (a = i, t.push(a.data()), n.push(r));return [4, Promise.all(t)];case 1:
	          for (o = l.sent(), s = 0; s < o.length; ++s) e[n[s]] = o[s][0];return [2];}
	    });
	  });
	}function disposeTensorsInLogs(e) {
	  if (null != e) for (var t in e) {
	    var n = e[t];"number" != typeof n && n.dispose();
	  }
	}var History = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t.prototype.onTrainBegin = function (e) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      return __generator$1(this, function (e) {
	        return this.epoch = [], this.history = {}, [2];
	      });
	    });
	  }, t.prototype.onEpochEnd = function (e, t) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      var n;return __generator$1(this, function (r) {
	        for (n in null == t && (t = {}), this.epoch.push(e), t) null == this.history[n] && (this.history[n] = []), this.history[n].push(t[n]);return [2];
	      });
	    });
	  }, t.prototype.syncData = function () {
	    return __awaiter$1(this, void 0, void 0, function () {
	      var e, t, n, r, i, a, o, s, l;return __generator$1(this, function (u) {
	        switch (u.label) {case 0:
	            for (r in e = [], t = [], n = [], this.history) for (i = this.history[r], a = 0; a < i.length; ++a) "number" != typeof i[a] && (o = i[a], e.push(o.data()), t.push(r), n.push(a));return [4, Promise.all(e)];case 1:
	            for (s = u.sent(), l = 0; l < s.length; ++l) this.history[t[l]][n[l]].dispose(), this.history[t[l]][n[l]] = s[l][0];return [2];}
	      });
	    });
	  }, t;
	}(Callback),
	    CustomCallback = function (e) {
	  function t(t) {
	    var n = e.call(this) || this;return n.trainBegin = t.onTrainBegin, n.trainEnd = t.onTrainEnd, n.epochBegin = t.onEpochBegin, n.epochEnd = t.onEpochEnd, n.batchBegin = t.onBatchBegin, n.batchEnd = t.onBatchEnd, n;
	  }return __extends$1(t, e), t.prototype.onEpochBegin = function (e, t) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      return __generator$1(this, function (n) {
	        switch (n.label) {case 0:
	            return null == this.epochBegin ? [3, 3] : [4, resolveScalarsInLogs(t)];case 1:
	            return n.sent(), [4, this.epochBegin(e, t)];case 2:
	            n.sent(), n.label = 3;case 3:
	            return [2];}
	      });
	    });
	  }, t.prototype.onEpochEnd = function (e, t) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      return __generator$1(this, function (n) {
	        switch (n.label) {case 0:
	            return null == this.epochEnd ? [3, 3] : [4, resolveScalarsInLogs(t)];case 1:
	            return n.sent(), [4, this.epochEnd(e, t)];case 2:
	            n.sent(), n.label = 3;case 3:
	            return [2];}
	      });
	    });
	  }, t.prototype.onBatchBegin = function (e, t) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      return __generator$1(this, function (n) {
	        switch (n.label) {case 0:
	            return null == this.batchBegin ? [3, 3] : [4, resolveScalarsInLogs(t)];case 1:
	            return n.sent(), [4, this.batchBegin(e, t)];case 2:
	            n.sent(), n.label = 3;case 3:
	            return [2];}
	      });
	    });
	  }, t.prototype.onBatchEnd = function (e, t) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      return __generator$1(this, function (n) {
	        switch (n.label) {case 0:
	            return null == this.batchEnd ? [3, 3] : [4, resolveScalarsInLogs(t)];case 1:
	            return n.sent(), [4, this.batchEnd(e, t)];case 2:
	            n.sent(), n.label = 3;case 3:
	            return [2];}
	      });
	    });
	  }, t.prototype.onTrainBegin = function (e) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      return __generator$1(this, function (t) {
	        switch (t.label) {case 0:
	            return null == this.trainBegin ? [3, 3] : [4, resolveScalarsInLogs(e)];case 1:
	            return t.sent(), [4, this.trainBegin(e)];case 2:
	            t.sent(), t.label = 3;case 3:
	            return [2];}
	      });
	    });
	  }, t.prototype.onTrainEnd = function (e) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      return __generator$1(this, function (t) {
	        switch (t.label) {case 0:
	            return null == this.trainEnd ? [3, 3] : [4, resolveScalarsInLogs(e)];case 1:
	            return t.sent(), [4, this.trainEnd(e)];case 2:
	            t.sent(), t.label = 3;case 3:
	            return [2];}
	      });
	    });
	  }, t;
	}(Callback);function standardizeCallbacks(e) {
	  return null == e ? null : e instanceof Callback ? [e] : Array.isArray(e) && e[0] instanceof Callback ? e : toList(e).map(function (e) {
	    return new CustomCallback(e);
	  });
	}function l2Normalize(e, t) {
	  return tidy(function () {
	    var n = sum(square$1(e), t, !0),
	        r = scalarTimesArray(scalar(epsilon$1()), onesLike(e)),
	        i = sqrt(maximum(n, r));return div(e, i);
	  });
	}function meanSquaredError(e, t) {
	  return tidy(function () {
	    return mean(square$1(sub(t, e)), -1);
	  });
	}function meanAbsoluteError(e, t) {
	  return tidy(function () {
	    return mean(abs(sub(t, e)), -1);
	  });
	}function meanAbsolutePercentageError(e, t) {
	  return tidy(function () {
	    var n = sub(e, t),
	        r = clipByValue(abs(e), epsilon$1(), Number.MAX_VALUE),
	        i = abs(div(n, r));return scalarTimesArray(getScalar(100), mean(i, -1));
	  });
	}function meanSquaredLogarithmicError(e, t) {
	  return tidy(function () {
	    var n = getScalar(1),
	        r = clipByValue(t, epsilon$1(), Number.MAX_VALUE),
	        i = log(scalarPlusArray(n, r)),
	        a = clipByValue(e, epsilon$1(), Number.MAX_VALUE),
	        o = log(scalarPlusArray(n, a));return mean(square$1(sub(i, o)), -1);
	  });
	}function squaredHinge(e, t) {
	  return tidy(function () {
	    var n = getScalar(0),
	        r = getScalar(1),
	        i = maximum(n, sub(r, mul(e, t)));return mean(square$1(i), -1);
	  });
	}function hinge(e, t) {
	  return tidy(function () {
	    var n = getScalar(0),
	        r = getScalar(1),
	        i = maximum(n, sub(r, mul(e, t)));return mean(i, -1);
	  });
	}function categoricalHinge(e, t) {
	  return tidy(function () {
	    var n = getScalar(0),
	        r = getScalar(1),
	        i = sum(mul(e, t), -1),
	        a = max(mul(sub(r, e), t), -1);return maximum(n, scalarPlusArray(r, sub(a, i)));
	  });
	}function logcosh(e, t) {
	  return tidy(function () {
	    var n = getScalar(Math.log(2)),
	        r = sub(t, e),
	        i = sub(add(r, softplus(scalarTimesArray(getScalar(-2), r))), n);return mean(i, -1);
	  });
	}function categoricalCrossentropy(e, t, n) {
	  return void 0 === n && (n = !1), tidy(function () {
	    if (n) t = softmax(t);else {
	      var r = sum(t, shape(t).length - 1, !0);t = div(t, r);
	    }return t = clipByValue(t, epsilon$1(), 1 - epsilon$1()), neg(sum(mul(e.toFloat(), log(t)), shape(t).length - 1));
	  });
	}function sparseCategoricalCrossentropy(e, t, n) {
	  return void 0 === n && (n = !1), tidy(function () {
	    var r = floor(flatten$1(e)).toInt(),
	        i = shape(t);return categoricalCrossentropy(oneHot(r, i[i.length - 1]).reshape(i), t, n);
	  });
	}function sigmoidCrossEntropyWithLogits$1(e, t) {
	  return tidy(function () {
	    var n = maximum(t, zerosLike(t)),
	        r = mul(t, e),
	        i = log(add(getScalar(1), exp(neg(abs(t)))));return add(sub(n, r), i);
	  });
	}function binaryCrossentropy(e, t) {
	  return tidy(function () {
	    var n;return n = clipByValue(t, epsilon$1(), 1 - epsilon$1()), n = log(div(n, sub(onesLike(n), n))), mean(sigmoidCrossEntropyWithLogits$1(e, n), -1);
	  });
	}function kullbackLeiblerDivergence(e, t) {
	  return tidy(function () {
	    var n = clipByValue(e, epsilon$1(), 1),
	        r = clipByValue(t, epsilon$1(), 1);return sum(mul(e, log(div(n, r))), -1);
	  });
	}function poisson(e, t) {
	  return tidy(function () {
	    var n = log(scalarPlusArray(getScalar(epsilon$1()), t));return mean(sub(t, mul(e, n)), -1);
	  });
	}function cosineProximity(e, t) {
	  return tidy(function () {
	    var n = l2Normalize(e, -1),
	        r = l2Normalize(t, -1),
	        i = mul(n, r);return neg(sum(i, -1));
	  });
	}function get(e) {
	  var t = { meanSquaredError: meanSquaredError, meanAbsoluteError: meanAbsoluteError, meanAbsolutePercentageError: meanAbsolutePercentageError, meanSquaredLogarithmicError: meanSquaredLogarithmicError, squaredHinge: squaredHinge, hinge: hinge, categoricalHinge: categoricalHinge, logcosh: logcosh, categoricalCrossentropy: categoricalCrossentropy, sparseCategoricalCrossentropy: sparseCategoricalCrossentropy, binaryCrossentropy: binaryCrossentropy, kullbackLeiblerDivergence: kullbackLeiblerDivergence, poisson: poisson, cosineProximity: cosineProximity };if ("string" == typeof e) {
	    if (e in t) return t[e];throw new ValueError("Unknown loss " + e);
	  }return e;
	}function binaryAccuracy(e, t) {
	  return tidy(function () {
	    var n = scalarTimesArray(getScalar(.5), onesLike(t)),
	        r = cast$1(greater(t, n), e.dtype);return mean(equal(e, r), -1);
	  });
	}function categoricalAccuracy(e, t) {
	  return tidy(function () {
	    return cast$1(equal(argMax(e, -1), argMax(t, -1)), "float32");
	  });
	}function binaryCrossentropy$1(e, t) {
	  return binaryCrossentropy(e, t);
	}function sparseCategoricalAccuracy(e, t) {
	  throw new NotImplementedError();
	}var mse$1 = meanSquaredError,
	    MSE$1 = meanSquaredError,
	    mae$1 = meanAbsoluteError,
	    MAE$1 = meanAbsoluteError,
	    mape$1 = meanAbsolutePercentageError,
	    MAPE$1 = meanAbsolutePercentageError,
	    categoricalCrossentropy$1 = categoricalCrossentropy,
	    cosine$1 = cosineProximity,
	    sparseCategoricalCrossentropy$1 = sparseCategoricalCrossentropy;function get$1(e) {
	  var t = { binaryAccuracy: binaryAccuracy, categoricalAccuracy: categoricalAccuracy, categoricalCrossentropy: categoricalCrossentropy$1, sparseCategoricalCrossentropy: sparseCategoricalCrossentropy$1, mse: mse$1, MSE: MSE$1, mae: mae$1, MAE: MAE$1, mape: mape$1, MAPE: MAPE$1, cosine: cosine$1 };if ("string" == typeof e && e in t) return t[e];if ("string" != typeof e && null != e) return e;throw new ValueError("Unknown metric " + e);
	}function getOptimizer(e) {
	  var t = { Adagrad: function () {
	      return train.adagrad(.01);
	    }, Adadelta: function () {
	      return train.adadelta(1, .95, epsilon$1());
	    }, Adam: function () {
	      return train.adam(.001, .9, .999, epsilon$1());
	    }, Adamax: function () {
	      return train.adamax(.002, .9, .999, epsilon$1(), 0);
	    }, RMSProp: function () {
	      return train.rmsprop(.001, .9, null, epsilon$1());
	    }, SGD: function () {
	      return train.sgd(.01);
	    } };if (t.adagrad = t.Adagrad, t.adadelta = t.Adadelta, t.adam = t.Adam, t.adamax = t.Adamax, t.rmsprop = t.RMSProp, t.sgd = t.SGD, e in t) return t[e]();throw new ValueError("Unknown Optimizer " + e);
	}function printSummary(e, t, n, r) {
	  void 0 === r && (r = console.log);var i,
	      a = isModelSequentialLike(e),
	      o = ["Layer (type)", "Output shape", "Param #"];if (a ? (t = t || 65, n = n || [.45, .85, 1]) : (t = t || 98, n = n || [.33, .55, .67, 1]), n[n.length - 1] <= 1 && (n = n.map(function (e) {
	    return Math.floor(t * e);
	  })), !a) for (var s in o.push("Receives inputs"), i = [], e.nodesByDepth) i.push.apply(i, e.nodesByDepth[s]);r("_".repeat(t)), printRow(o, n, r), r("=".repeat(t));for (var l, u = e.layers, c = 0; c < u.length; ++c) a ? printLayerSummary(u[c], n, r) : printLayerSummaryWithConnections(u[c], n, i, r), r((c === u.length - 1 ? "=" : "_").repeat(t));e.checkTrainableWeightsConsistency(), l = null != e.collectedTrainableWeights ? countParamsInWeights(e.collectedTrainableWeights) : countParamsInWeights(e.trainableWeights);var p = countParamsInWeights(e.nonTrainableWeights);r("Total params: " + (l + p)), r("Trainable params: " + l), r("Non-trainable params: " + p), r("_".repeat(t));
	}function isModelSequentialLike(e) {
	  var t = !0,
	      n = [],
	      r = [];for (var i in e.nodesByDepth) n.push(e.nodesByDepth[i]);for (var a = 0, o = n; a < o.length; a++) {
	    var s = o[a];if (s.length > 1 || 1 === s.length && s[0].inboundLayers.length > 1) {
	      t = !1;break;
	    }r.push.apply(r, s);
	  }if (t) for (var l = 0, u = e.layers; l < u.length; l++) {
	    for (var c = !1, p = 0, h = u[l].inboundNodes; p < h.length; p++) {
	      var d = h[p];if (-1 !== r.indexOf(d)) {
	        if (c) {
	          t = !1;break;
	        }c = !0;
	      }
	    }if (!t) break;
	  }return t;
	}function printRow(e, t, n) {
	  void 0 === n && (n = console.log);for (var r = "", i = 0; i < e.length; ++i) i > 0 && (r = r.slice(0, r.length - 1) + " "), r = (r += e[i]).slice(0, t[i]), r += " ".repeat(t[i] - r.length);n(r);
	}function printLayerSummary(e, t, n) {
	  var r;try {
	    r = JSON.stringify(e.outputShape);
	  } catch (e) {
	    r = "multiple";
	  }printRow([e.name + " (" + e.getClassName() + ")", r, e.countParams().toString()], t, n);
	}function printLayerSummaryWithConnections(e, t, n, r) {
	  var i;try {
	    i = JSON.stringify(e.outputShape);
	  } catch (e) {
	    i = "multiple";
	  }for (var a = [], o = 0, s = e.inboundNodes; o < s.length; o++) {
	    var l = s[o];if (!(null != n && n.length > 0 && -1 === n.indexOf(l))) for (var u = 0; u < l.inboundLayers.length; ++u) {
	      var c = l.inboundLayers[u].name,
	          p = l.nodeIndices[u],
	          h = l.tensorIndices[u];a.push(c + "[" + p + "][" + h + "]");
	    }
	  }var d = e.name,
	      g = e.getClassName(),
	      f = 0 === a.length ? "" : a[0];printRow([d + " (" + g + ")", i, e.countParams().toString(), f], t, r);for (u = 1; u < a.length; ++u) printRow(["", "", "", a[u]], t, r);
	}function assertFeedCompatibility(e, t) {
	  if (null != e.dtype && e.dtype !== t.dtype) throw new ValueError("The dtype of the feed (" + t.dtype + ") is incompatible with that of the key '" + e.name + "' (" + e.dtype + ").");if (null != e.shape) {
	    if (e.shape.length !== t.shape.length) throw new ValueError("The rank of feed (" + t.shape.length + ") does not match the rank of the key (" + e.shape.length + ").");for (var n = 0; n < e.shape.length; ++n) if (null != e.shape[n] && e.shape[n] !== t.shape[n]) throw new ValueError("The " + n + "-th dimension of the feed (" + t.shape[n] + ") is incompatible with that of the key (" + e.shape[n] + ").");
	  }
	}var ModelLoggingVerbosity,
	    FeedDict = function () {
	  function e(t) {
	    if (this.id2Value = {}, t instanceof e) for (var n in t.id2Value) this.id2Value[n] = t.id2Value[n];else {
	      if (null == t) return;for (var r = 0, i = t; r < i.length; r++) {
	        var a = i[r];this.add(a.key, a.value);
	      }
	    }
	  }return e.prototype.add = function (e, t) {
	    if (assertFeedCompatibility(e, t), null != this.id2Value[e.id]) throw new ValueError("Duplicate key: name=" + e.name + ", id=" + e.id);return this.id2Value[e.id] = t, this;
	  }, e.prototype.addFeed = function (e) {
	    this.add(e.key, e.value);
	  }, e.prototype.hasKey = function (e) {
	    return null != this.id2Value[e.id];
	  }, e.prototype.getValue = function (e) {
	    if (null == this.id2Value[e.id]) throw new ValueError("Nonexistent key: " + JSON.stringify(e));return this.id2Value[e.id];
	  }, e;
	}();function execute(e, t, n) {
	  for (var r = Array.isArray(e), i = r ? e : [e], a = [], o = new FeedDict(t), s = 0, l = i; s < l.length; s++) {
	    var u = l[s];a.push(executeInternal(u, o, n));
	  }return r ? a : a[0];
	}function executeInternal(e, t, n) {
	  if (t.hasKey(e)) return t.getValue(e);if (e.sourceLayer instanceof InputLayer) throw new ValueError("Missing a feed value for SymbolicTensor from InputLayer '" + InputLayer.name + "'");for (var r = [], i = 0, a = e.inputs; i < a.length; i++) {
	    var o = executeInternal(a[i], t, n);r.push(o);
	  }var s = e.sourceLayer.apply(r, n);Array.isArray(s) || (s = [s]);for (var l = getNodeOutputs(e), u = Array.isArray(l) ? l : [l], c = 0; c < u.length; ++c) t.add(u[c], s[c]);return 1 === s.length ? s[0] : s[e.outputTensorIndex];
	}function getNodeOutputs(e) {
	  var t;if (1 === e.sourceLayer.inboundNodes.length) t = e.sourceLayer.output;else {
	    for (var n = null, r = 0; r < e.sourceLayer.inboundNodes.length; ++r) for (var i = 0, a = e.sourceLayer.inboundNodes[r].outputTensors; i < a.length; i++) {
	      if (a[i].id === e.id) {
	        n = r;break;
	      }
	    }t = e.sourceLayer.getOutputAt(n);
	  }return t;
	}function isDataTensor(e) {
	  return e instanceof Tensor;
	}function isDataArray(e) {
	  return Array.isArray(e);
	}function isDataDict(e) {
	  return !isDataTensor(e) && !isDataArray(e);
	}function standardizeInputData(e, t, n, r, i) {
	  if (void 0 === r && (r = !0), void 0 === i && (i = ""), null == t || 0 === t.length) {
	    if (null != e) {
	      var a = !1;if (isDataArray(e) && e.length > 0) a = !0;else if (isDataDict(e)) {
	        for (var o in e) if (e.hasOwnProperty(o)) {
	          a = !0;break;
	        }
	      } else a = !0;if (a) throw new ValueError("Error when checking model " + i + " expected no data, but got " + e);
	    }return [];
	  }if (null == e) return t.map(function (e) {
	    return null;
	  });var s;if (isDataDict(e)) {
	    e = e, s = [];for (var l = 0, u = t; l < u.length; l++) {
	      var c = u[l];if (null == e[c]) throw new ValueError('No data provided for "' + c + '". Need data for each key in: ' + t);s.push(e[c]);
	    }
	  } else if (isDataArray(e)) {
	    if ((e = e).length !== t.length) throw new ValueError("Error when checking model " + i + ": the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see " + t.length + " Tensor(s), but instead got the following list of Tensor(s): " + e);s = e;
	  } else {
	    if (e = e, t.length > 1) throw new ValueError("The model " + i + " expects " + t.length + " Tensor(s), but only received one Tensor. Found: Tensor with shape " + e.shape);s = [e];
	  }for (var p = 0; p < t.length; ++p) {
	    1 === (h = s[p]).shape.length && (s[p] = expandDims$1(h, 1));
	  }if (null != n) for (p = 0; p < t.length; ++p) if (null != n[p]) {
	    var h;if ((h = s[p]).shape.length !== n[p].length) throw new ValueError("Error when checking " + i + ": expected " + t[p] + " to have " + n[p].length + " dimension(s). but got array with shape " + h.shape);for (var d = 0; d < n[p].length; ++d) if (0 !== d || r) {
	      var g = h.shape[d],
	          f = n[p][d];if (null != f && f >= 0 && g !== f) throw new ValueError("Error when checking " + i + ": expected " + t[p] + " to have shape [" + n[p] + "], but got array with shape [" + h.shape + "].");
	    }
	  }return s;
	}function checkArrayLengths(e, t, n) {
	  var r = unique(e.map(function (e) {
	    return e.shape[0];
	  }));r.sort();var i = unique(t.map(function (e) {
	    return e.shape[0];
	  }));if (i.sort(), r.length > 1) throw new ValueError("All input Tensors (x) should have the same number of samples. Got array shapes: " + JSON.stringify(e.map(function (e) {
	    return e.shape;
	  })));if (i.length > 1) throw new ValueError("All target Tensors (y) should have the same number of samples. Got array shapes: " + JSON.stringify(t.map(function (e) {
	    return e.shape;
	  })));if (r.length > 0 && i.length > 0 && !util.arraysEqual(r, i)) throw new ValueError("Input Tensors should have the same number of samples as target Tensors. Found " + r[0] + " input sample(s) and " + i[0] + " target sample(s).");
	}function checkLossAndTargetCompatibility(e, t, n) {
	  for (var r = [meanSquaredError, binaryCrossentropy, categoricalCrossentropy], i = 0; i < e.length; ++i) {
	    var a = e[i],
	        o = t[i],
	        s = n[i];if (null != o) {
	      if (o === categoricalCrossentropy && 1 === a.shape[a.shape.length - 1]) throw new ValueError("You are passing a target array of shape " + a.shape + " while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].");if (-1 !== r.indexOf(o)) for (var l = a.shape.slice(1), u = s.slice(1), c = 0; c < l.length; ++c) {
	        var p = l[c],
	            h = u[c];if (null != h && p !== h) throw new ValueError("A target Tensor with shape " + a.shape + " was passed for an output of shape " + s + ", while using a loss function that expects targets to have the same shape as the output.");
	      }
	    }
	  }
	}function makeBatches(e, t) {
	  for (var n = [], r = 0, i = null; r < e;) (i = r + t) >= e && (i = e), n.push([r, i]), r = i;return n;
	}function sliceArrays(e, t, n) {
	  return null == e ? [null] : Array.isArray(e) ? e.map(function (e) {
	    return sliceAlongFirstAxis(e, t, n - t);
	  }) : sliceAlongFirstAxis(e, t, n - t);
	}function sliceArraysByIndices(e, t) {
	  return tidy(function () {
	    return null == e ? null : Array.isArray(e) ? e.map(function (e) {
	      return sliceArraysByIndices(e, t);
	    }) : gather$1(e, "int32" === t.dtype ? t : t.toInt());
	  });
	}function checkInputData(e, t, n, r, i) {
	  var a;if (void 0 === r && (r = !0), void 0 === i && (i = ""), Array.isArray(e)) {
	    if (e.length !== t.length) throw new ValueError("Error when checking model " + i + ": the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see " + t.length + " Tensor(s), but instead got " + e.length + " Tensors(s).");a = e;
	  } else {
	    if (t.length > 1) throw new ValueError("The model expects " + t.length + " " + i + " Tensors, but only received one Tensor. Found: array with shape " + JSON.stringify(e.shape) + ".");a = [e];
	  }if (null != n) for (var o = 0; o < t.length; ++o) if (null != n[o]) {
	    var s = a[o];if (s.shape.length !== n[o].length) throw new ValueError("Error when checking " + i + ": expected " + t[o] + " to have " + n[o].length + " dimension(s), but got array with shape " + JSON.stringify(s.shape));for (var l = 0; l < n[o].length; ++l) if (0 !== l || r) {
	      var u = s.shape[l],
	          c = n[o][l];if (null != c && c !== u) throw new ValueError("Error when checking " + i + ": expected " + t[o] + " to have shape " + JSON.stringify(n[o]) + " but got array with shape " + JSON.stringify(s.shape) + ".");
	    }
	  }
	}function collectMetrics(e, t) {
	  if (null == e || Array.isArray(e) && 0 === e.length) return t.map(function (e) {
	    return [];
	  });if (Array.isArray(e)) return t.map(function (t) {
	    return e;
	  });if (null != e) {
	    for (var n = [], r = 0, i = t; r < i.length; r++) {
	      var a = i[r],
	          o = e.hasOwnProperty(a) ? e[a] : [];Array.isArray(o) || (o = [o]), n.push(o);
	    }return n;
	  }throw new TypeError("Type of metrics argument not understood. Expected an Array or Object, found: " + e);
	}!function (e) {
	  e[e.SILENT = 0] = "SILENT", e[e.VERBOSE = 1] = "VERBOSE";
	}(ModelLoggingVerbosity || (ModelLoggingVerbosity = {}));var Model = function (e) {
	  function t(t) {
	    return e.call(this, t) || this;
	  }return __extends$1(t, e), t.prototype.summary = function (e, t, n) {
	    if (void 0 === n && (n = console.log), !this.built) throw new ValueError("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");printSummary(this, e, t, n);
	  }, t.prototype.compile = function (e) {
	    var t = this;if (null == e.loss && (e.loss = []), this.loss = e.loss, "string" == typeof e.optimizer) this.optimizer = getOptimizer(e.optimizer);else {
	      if (!(e.optimizer instanceof Optimizer)) throw new ValueError("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer = e.optimizer;
	    }var n = [];if (Array.isArray(e.loss) || "string" == typeof e.loss || "function" == typeof e.loss) {
	      if (Array.isArray(e.loss)) {
	        if (e.loss.length !== this.outputs.length) throw new ValueError("When passing an Array as loss, it should have one entry per model output. The model has " + this.outputs.length + " output(s), but you passed loss=" + e.loss + ".");var r = e.loss;n = r.map(function (e) {
	          return get(e);
	        });
	      } else {
	        var i = get(e.loss);this.outputs.map(function (e) {
	          n.push(i);
	        });
	      }
	    } else {
	      for (var a in e.loss = e.loss, e.loss) if (-1 === this.outputNames.indexOf(a)) throw new ValueError('Unknown entry in loss dictionary: "' + a + '". Only expect the following keys: ' + this.outputNames);for (var o in this.outputNames) null == e.loss[o] && console.warn('Output "' + o + '" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ' + o + " during training"), n.push(get(e.loss[o]));
	    }this.lossFunctions = n, this.feedOutputNames = [], this.feedOutputShapes = [], this.feedLossFns = [];for (var s = 0; s < this.outputs.length; ++s) {
	      var l = this.internalOutputShapes[s],
	          u = this.outputNames[s];this.feedOutputNames.push(u), this.feedOutputShapes.push(l), this.feedLossFns.push(this.lossFunctions[s]);
	    }var c = [];this.metrics = e.metrics, this.metricsNames = ["loss"], this.metricsTensors = [], nameScope$1("loss", function () {
	      for (var e = 0; e < t.outputs.length; ++e) if (-1 === c.indexOf(e)) {
	        var n = t.lossFunctions[e];t.outputs.length > 1 && (t.metricsTensors.push([n, e]), t.metricsNames.push(t.outputNames[e] + "_loss"));
	      }
	    });var p = collectMetrics(e.metrics, this.outputNames);nameScope$1("metric", function () {
	      for (var e = function (e) {
	        if (-1 !== c.indexOf(e)) return "continue";!function (n) {
	          for (var r, i, a, o = function (n) {
	            if (-1 !== ["accuracy", "acc", "crossentropy", "ce"].indexOf(n)) {
	              var o = t.internalOutputShapes[e];1 === o[o.length - 1] || t.lossFunctions[e] === binaryCrossentropy ? -1 !== ["accuracy", "acc"].indexOf(n) ? i = binaryAccuracy : -1 !== ["crossentropy", "ce"].indexOf(n) && (i = binaryCrossentropy$1) : t.lossFunctions[e] === sparseCategoricalCrossentropy ? -1 !== ["accuracy", "acc"].indexOf(n) ? i = sparseCategoricalAccuracy : -1 !== ["crossentropy", "ce"].indexOf(n) && (i = sparseCategoricalCrossentropy$1) : -1 !== ["accuracy", "acc"].indexOf(n) ? i = categoricalAccuracy : -1 !== ["crossentropy", "ce"].indexOf(n) && (i = categoricalCrossentropy$1);var s = void 0;-1 !== ["accuracy", "acc"].indexOf(n) ? s = "acc" : -1 !== ["crossentropy", "ce"].indexOf(n) && (s = "ce"), a = i, r = "" + s;
	            } else {
	              var l = get$1(n);a = l, r = "" + n;
	            }var u;nameScope$1(r, function () {
	              u = a;
	            }), function (e, n, r) {
	              t.outputNames.length > 1 && (n = t.outputNames[e] + "_" + n), t.metricsNames.push(n), t.metricsTensors.push([r, e]);
	            }(e, r, u);
	          }, s = 0, l = n; s < l.length; s++) o(l[s]);
	        }(p[e]);
	      }, n = 0; n < t.outputs.length; ++n) e(n);
	    }), this.collectedTrainableWeights = this.trainableWeights;
	  }, t.prototype.checkTrainableWeightsConsistency = function () {
	    null != this.collectedTrainableWeights && this.trainableWeights.length !== this.collectedTrainableWeights.length && console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?");
	  }, t.prototype.evaluate = function (e, t, n) {
	    void 0 === n && (n = {});var r = null == n.batchSize ? 32 : n.batchSize,
	        i = this.standardizeUserData(e, t, !0, r),
	        a = i[0].concat(i[1]);this.makeTestFunction();var o = this.testFunction;return singletonOrArray(this.testLoop(o, a, r, n.verbose, n.steps));
	  }, t.prototype.checkNumSamples = function (e, t, n, r) {
	    var i;if (void 0 === r && (r = "steps"), null != n) {
	      if (i = null, null != t) throw new ValueError("If " + r + " is set, batchSize must be null or undefined.Got batchSize = " + t);
	    } else {
	      if (null == e) throw new ValueError("Either the input data should have a defined shape, or " + r + " shoud be specified.");i = Array.isArray(e) ? e[0].shape[0] : e.shape[0];
	    }return i;
	  }, t.prototype.execute = function (e, t) {
	    if (Array.isArray(t) && 0 === t.length) throw new ValueError("`outputs` is an empty Array, which is not allowed.");var n = Array.isArray(t),
	        r = n ? t : [t],
	        i = this.retrieveSymbolicTensors(r),
	        a = new FeedDict();if (e instanceof Tensor && (e = [e]), Array.isArray(e)) {
	      if (e.length !== this.inputs.length) throw new ValueError("The number of inputs provided (" + e.length + ") does not match the number of inputs of this model (" + this.inputs.length + ").");for (var o = 0; o < this.inputs.length; ++o) a.add(this.inputs[o], e[o]);
	    } else for (var s = 0, l = this.inputs; s < l.length; s++) {
	      var u = l[s],
	          c = e[u.name];if (null == c) throw new ValueError("No value is provided for the model's input " + u.name);a.add(u, c);
	    }var p = execute(i, a);return n ? p : p[0];
	  }, t.prototype.retrieveSymbolicTensors = function (e) {
	    for (var t = pyListRepeat(null, e.length), n = e.length, r = 0, i = this.layers; r < i.length; r++) {
	      for (var a = i[r], o = Array.isArray(a.output) ? a.output : [a.output], s = o.map(function (e) {
	        return e.name;
	      }), l = 0; l < e.length; ++l) {
	        var u = s.indexOf(e[l]);if (-1 !== u && (t[l] = o[u], n--), 0 === n) break;
	      }if (0 === n) break;
	    }if (n > 0) {
	      var c = [];throw t.forEach(function (t, n) {
	        null == t && c.push(e[n]);
	      }), new ValueError("Cannot find SymbolicTensors for output name(s): " + JSON.stringify(c));
	    }return t;
	  }, t.prototype.predictLoop = function (e, t, n) {
	    var r = this;void 0 === t && (t = 32), void 0 === n && (n = !1);var i = this.checkNumSamples(e);if (n) throw new NotImplementedError("Verbose predictLoop() is not implemented yet.");for (var a = makeBatches(i, t), o = [], s = function (t) {
	      var n = tidy(function () {
	        var n = a[t][0],
	            i = a[t][1],
	            o = sliceArrays(e, n, i),
	            s = [];if (Array.isArray(o)) for (var l = 0; l < o.length; ++l) s.push({ key: r.inputs[l], value: o[l] });else s.push({ key: r.inputs[0], value: o });var u = new FeedDict(s);return execute(r.outputs, u);
	      });if (0 === t) for (var i = 0, s = n; i < s.length; i++) {
	        var l = s[i];o.push(l);
	      } else for (var u = 0; u < n.length; ++u) o[u] = concatAlongFirstAxis(o[u], n[u]);
	    }, l = 0; l < a.length; ++l) s(l);return singletonOrArray(o);
	  }, t.prototype.predict = function (e, t) {
	    void 0 === t && (t = {}), checkInputData(e, this.inputNames, this.feedInputShapes, !1);var n = null == t.batchSize ? 32 : t.batchSize;return this.predictLoop(e, n);
	  }, t.prototype.predictOnBatch = function (e) {
	    return checkInputData(e, this.inputNames, this.feedInputShapes, !0), this.predictLoop(e, e.shape[0]);
	  }, t.prototype.standardizeUserData = function (e, t, n, r) {
	    if (void 0 === n && (n = !0), null == this.optimizer) throw new RuntimeError("You must compile a model before training/testing. Use Model.compile(modelCompileConfig).");for (var i = [], a = 0; a < this.feedOutputShapes.length; ++a) {
	      var o = this.feedOutputShapes[a];this.feedLossFns[a] === sparseCategoricalCrossentropy ? i.push(o.slice(0, o.length - 1).concat([1])) : i.push(o);
	    }if (checkArrayLengths(e = standardizeInputData(e, this.feedInputNames, this.feedInputShapes, !1, "input"), t = standardizeInputData(t, this.feedOutputNames, i, !1, "target"), null), checkLossAndTargetCompatibility(t, this.feedLossFns, this.feedOutputShapes), this.stateful && null != r && r > 0 && e[0].shape[0] % r != 0) throw new ValueError("In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size " + r + ". Found: " + e[0].shape[0] + " sample(s).");return [e, t, null];
	  }, t.prototype.fitLoop = function (e, t, n, r, i, a, o, s, l, u, c, p, h, d) {
	    return void 0 === p && (p = 0), __awaiter$1(this, void 0, void 0, function () {
	      var g,
	          f,
	          m,
	          y,
	          v,
	          b,
	          z,
	          w = this;return __generator$1(this, function (S) {
	        switch (S.label) {case 0:
	            if (null == r && (r = 32), null == i && (i = 1), null == u && (u = !0), null == p && (p = 0), g = !1, null != s && null != l && (g = !0), null != d && (g = !0, null == h)) throw new ValueError("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");if (null != (f = this.checkNumSamples(t, r, h, "steps_per_epoch")) && (m = range$1(0, f)), this.history = new History(), o = (o = null == o ? [new BaseLogger()] : [new BaseLogger()].concat(o)).concat([this.history]), a > 0) throw new NotImplementedError("Verbose mode is not implemented yet.");return (y = new CallbackList(o)).setModel(this), y.setParams({ epochs: i, steps: h, verbose: a, doValidation: g, metrics: c }), [4, y.onTrainBegin()];case 1:
	            S.sent(), this.stopTraining = !1, v = function (i) {
	              var a, o, c, p, d;return __generator$1(this, function (v) {
	                switch (v.label) {case 0:
	                    return [4, y.onEpochBegin(i)];case 1:
	                    if (v.sent(), a = {}, null == h) return [3, 2];throw new NotImplementedError("stepsPerEpoch mode is not implemented yet.");case 2:
	                    if ("batch" === u) throw new NotImplementedError("batch shuffling is not implemneted yet");u && util.shuffle(m), o = tensor1d(m), c = makeBatches(f, r), p = function (i) {
	                      var u;return __generator$1(this, function (p) {
	                        switch (p.label) {case 0:
	                            return u = {}, [4, y.onBatchBegin(i, u)];case 1:
	                            return p.sent(), tidy(function () {
	                              var p = c[i][0],
	                                  h = c[i][1],
	                                  d = sliceAlongFirstAxis(o, p, h - p);u.batch = i, u.size = h - p;for (var f = sliceArraysByIndices(t, d), m = e(f), y = 0; y < n.length; ++y) {
	                                var v = n[y],
	                                    b = m[y];u[v] = b, keep(b);
	                              }if (i === c.length - 1 && g) {
	                                var z = w.testLoop(s, l, r);for (y = 0; y < n.length; ++y) {
	                                  v = n[y], b = z[y];keep(b), a["val_" + v] = b;
	                                }
	                              }
	                            }), [4, y.onBatchEnd(i, u)];case 2:
	                            return p.sent(), disposeTensorsInLogs(u), b.stopTraining ? [2, "break"] : [2];}
	                      });
	                    }, d = 0, v.label = 3;case 3:
	                    return d < c.length ? [5, p(d)] : [3, 6];case 4:
	                    if ("break" === v.sent()) return [3, 6];v.label = 5;case 5:
	                    return ++d, [3, 3];case 6:
	                    o.dispose(), v.label = 7;case 7:
	                    return [4, y.onEpochEnd(i, a)];case 8:
	                    return v.sent(), b.stopTraining ? [2, "break"] : [2];}
	              });
	            }, b = this, z = p, S.label = 2;case 2:
	            return z < i ? [5, v(z)] : [3, 5];case 3:
	            if ("break" === S.sent()) return [3, 5];S.label = 4;case 4:
	            return ++z, [3, 2];case 5:
	            return [4, y.onTrainEnd()];case 6:
	            return S.sent(), [4, this.history.syncData()];case 7:
	            return S.sent(), [2, this.history];}
	      });
	    });
	  }, t.prototype.testLoop = function (e, t, n, r, i) {
	    void 0 === r && (r = 0);var a = this.checkNumSamples(t, n, i, "steps"),
	        o = [];if (1 === r) throw new NotImplementedError("Verbose mode is not implemented yet.");if (null != i) throw new NotImplementedError("steps mode in testLoop() is not implemented yet");for (var s = makeBatches(a, n), l = tensor1d(range$1(0, a)), u = 0; u < s.length; ++u) {
	      var c = s[u][0],
	          p = s[u][1],
	          h = e(sliceArraysByIndices(t, sliceAlongFirstAxis(l, c, p - c)));if (0 === u) for (var d = 0; d < h.length; ++d) o.push(getScalar(0));for (d = 0; d < h.length; ++d) {
	        var g = h[d];o[d] = add(o[d], scalarTimesArray(getScalar(p - c), g));
	      }
	    }for (d = 0; d < o.length; ++d) o[d] = div(o[d], getScalar(a));return o;
	  }, t.prototype.getDedupedMetricsNames = function () {
	    for (var e = this.metricsNames, t = [], n = 0; n < e.length; ++n) {
	      var r = e[n],
	          i = r;if (count(e, r) > 1) i += "_" + count(e.slice(0, n), r);t.push(i);
	    }return t;
	  }, t.prototype.makeTestFunction = function () {
	    var e = this;this.testFunction = function (t) {
	      return tidy(function () {
	        for (var n, r = [], i = t.slice(0, e.inputs.length), a = t.slice(e.inputs.length, e.inputs.length + e.outputs.length), o = [], s = 0; s < e.inputs.length; ++s) o.push({ key: e.inputs[s], value: i[s] });var l = new FeedDict(o),
	            u = execute(e.outputs, l);for (s = 0; s < e.lossFunctions.length; ++s) {
	          var c = e.lossFunctions[s],
	              p = mean(c(a[s], u[s]));n = 0 === s ? p : add(n, p), r.push(n);
	        }for (s = 0; s < e.metricsTensors.length; ++s) {
	          var h = e.metricsTensors[s][0],
	              d = e.metricsTensors[s][1],
	              g = mean(h(a[d], u[d]));r.push(g);
	        }return r;
	      });
	    };
	  }, t.prototype.fit = function (e, t, n) {
	    return void 0 === n && (n = {}), __awaiter$1(this, void 0, void 0, function () {
	      var r,
	          i,
	          a,
	          o,
	          s,
	          l,
	          u,
	          c,
	          p,
	          h,
	          d,
	          g,
	          f,
	          m,
	          y,
	          v,
	          b,
	          z,
	          w,
	          S = this;return __generator$1(this, function (I) {
	        switch (I.label) {case 0:
	            if (r = null == n.batchSize ? 32 : n.batchSize, i = this.standardizeUserData(e, t, !1, r), a = i[0], o = i[1], s = !1, p = !1, null != n.validationData && n.validationData.length > 0) {
	              if (s = !0, 2 !== n.validationData.length) throw 3 === n.validationData.length ? new NotImplementedError("validationData including sample weights is not supported yet.") : new ValueError("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; " + n.validationData + " is invalid.");l = n.validationData[0], u = n.validationData[1], h = this.standardizeUserData(l, u, !0, r), l = h[0], u = h[1], c = l.concat(u);
	            } else null != n.validationSplit && n.validationSplit > 0 && n.validationSplit < 1 ? (s = !0, d = Math.floor(a[0].shape[0] * (1 - n.validationSplit)), g = a[0].shape[0], l = sliceArrays(a, d, g), a = sliceArrays(a, 0, d), u = sliceArrays(o, d, g), o = sliceArrays(o, 0, d), p = !0, c = l.concat(u)) : null != n.validationSteps && (s = !0);return f = a.concat(o), this.checkTrainableWeightsConsistency(), m = function (e) {
	              var t = e.slice(0, S.inputs.length),
	                  n = e.slice(S.inputs.length, S.inputs.length + S.outputs.length),
	                  r = [],
	                  i = S.collectedTrainableWeights.map(function (e) {
	                return e.read();
	              });return [S.optimizer.minimize(function () {
	                for (var e = [], i = 0; i < S.inputs.length; ++i) e.push({ key: S.inputs[i], value: t[i] });var a,
	                    o = new FeedDict(e),
	                    s = execute(S.outputs, o, { training: !0 });for (i = 0; i < S.lossFunctions.length; ++i) {
	                  var l = (0, S.lossFunctions[i])(n[i], s[i]);mean(l), a = 0 === i ? l : add(a, l);
	                }for (i = 0; i < S.metricsTensors.length; ++i) {
	                  var u = S.metricsTensors[i][0],
	                      c = S.metricsTensors[i][1],
	                      p = mean(u(n[c], s[c]));keep(p), r.push(p);
	                }return a = mean(a), S.calculateLosses().forEach(function (e) {
	                  a = add(a, e);
	                }), a;
	              }, !0, i)].concat(r);
	            }, y = this.getDedupedMetricsNames(), s ? (this.makeTestFunction(), v = this.testFunction, b = y.slice().concat(y.map(function (e) {
	              return "val_" + e;
	            }))) : (v = null, c = [], b = y.slice()), z = standardizeCallbacks(n.callbacks), [4, this.fitLoop(m, f, y, r, n.epochs, n.verbose, z, v, c, n.shuffle, b, null, null, null)];case 1:
	            return w = I.sent(), p && (c.forEach(function (e) {
	              return e.dispose();
	            }), a.forEach(function (e) {
	              return e.dispose();
	            }), o.forEach(function (e) {
	              return e.dispose();
	            })), [2, w];}
	      });
	    });
	  }, t.prototype.getNamedWeights = function (e) {
	    for (var t = {}, n = null != e && e.trainableOnly, r = n ? this.trainableWeights : this.weights, i = this.getWeights(n), a = 0; a < r.length; ++a) n && !r[a].trainable || (t[r[a].originalName] = i[a]);return t;
	  }, t.prototype.save = function (e, t) {
	    return __awaiter$1(this, void 0, void 0, function () {
	      var n, r, i, a, o;return __generator$1(this, function (s) {
	        switch (s.label) {case 0:
	            if ("string" == typeof e) {
	              if (0 === (n = io.getSaveHandlers(e)).length) throw new ValueError("Cannot find any save handlers for URL '" + e + "'");if (n.length > 1) throw new ValueError("Found more than one (" + n.length + ") save handlers for URL '" + e + "'");e = n[0];
	            }if (null == e.save) throw new ValueError("Model.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return [4, io.encodeWeights(this.getNamedWeights(t))];case 1:
	            return r = s.sent(), i = !1, a = null, o = this.toJSON(a, i), [2, e.save({ modelTopology: o, weightData: r.data, weightSpecs: r.specs })];}
	      });
	    });
	  }, t.className = "Model", __decorate$1([doc({ heading: "Models", subheading: "Classes" })], t.prototype, "summary", null), __decorate$1([doc({ heading: "Models", subheading: "Classes", configParamIndices: [0] })], t.prototype, "compile", null), __decorate$1([doc({ heading: "Models", subheading: "Classes", configParamIndices: [2] })], t.prototype, "evaluate", null), __decorate$1([doc({ heading: "Models", subheading: "Classes", configParamIndices: [1] })], t.prototype, "predict", null), __decorate$1([doc({ heading: "Models", subheading: "Classes" })], t.prototype, "predictOnBatch", null), __decorate$1([doc({ heading: "Models", subheading: "Classes", configParamIndices: [2] })], t.prototype, "fit", null), __decorate$1([doc({ heading: "Models", subheading: "Classes", configParamIndices: [1] })], t.prototype, "save", null), t = __decorate$1([doc({ heading: "Models", subheading: "Classes" })], t);
	}(Container);serialization.SerializationMap.register(Model);var VALID_FAN_MODE_VALUES = ["fanIn", "fanOut", "fanAvg"];function checkFanMode(e) {
	  checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, "FanMode", e);
	}var VALID_DISTRIBUTION_VALUES = ["normal", "uniform"];function checkDistribution(e) {
	  checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, "Distribution", e);
	}var Initializer = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t.prototype.fromConfigUsesCustomObjects = function () {
	    return !1;
	  }, t.prototype.getConfig = function () {
	    return {};
	  }, t = __decorate$1([doc({ heading: "Initializers", subheading: "Classes", namespace: "initializers" })], t);
	}(serialization.Serializable),
	    Zeros = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t.prototype.apply = function (e, t) {
	    return zeros(e, t);
	  }, t.className = "Zeros", t;
	}(Initializer);serialization.SerializationMap.register(Zeros);var Ones = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t.prototype.apply = function (e, t) {
	    return ones(e, t);
	  }, t.className = "Ones", t;
	}(Initializer);serialization.SerializationMap.register(Ones);var Constant = function (e) {
	  function t(t) {
	    var n = e.call(this) || this;return n.value = t.value, n;
	  }return __extends$1(t, e), t.prototype.apply = function (e, t) {
	    var n = this;return tidy(function () {
	      return scalarTimesArray(scalar(n.value), ones(e, t));
	    });
	  }, t.prototype.getConfig = function () {
	    return { value: this.value };
	  }, t.className = "Constant", t;
	}(Initializer);serialization.SerializationMap.register(Constant);var RandomUniform = function (e) {
	  function t(t) {
	    var n = e.call(this) || this;return n.DEFAULT_MINVAL = -.05, n.DEFAULT_MAXVAL = .05, n.minval = t.minval || n.DEFAULT_MINVAL, n.maxval = t.maxval || n.DEFAULT_MAXVAL, n.seed = t.seed, n;
	  }return __extends$1(t, e), t.prototype.apply = function (e, t) {
	    return randomUniform(e, this.minval, this.maxval, t);
	  }, t.prototype.getConfig = function () {
	    return { minval: this.minval, maxval: this.maxval, seed: this.seed };
	  }, t.className = "RandomUniform", t;
	}(Initializer);serialization.SerializationMap.register(RandomUniform);var RandomNormal = function (e) {
	  function t(t) {
	    var n = e.call(this) || this;return n.DEFAULT_MEAN = 0, n.DEFAULT_STDDEV = .05, n.mean = t.mean || n.DEFAULT_MEAN, n.stddev = t.stddev || n.DEFAULT_STDDEV, n.seed = t.seed, n;
	  }return __extends$1(t, e), t.prototype.apply = function (e, t) {
	    if ("bool" === t) throw new NotImplementedError("randomNormal does not support dType bool.");return randomNormal$1(e, this.mean, this.stddev, t, this.seed);
	  }, t.prototype.getConfig = function () {
	    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
	  }, t.className = "RandomNormal", t;
	}(Initializer);serialization.SerializationMap.register(RandomNormal);var TruncatedNormal = function (e) {
	  function t(t) {
	    var n = e.call(this) || this;return n.DEFAULT_MEAN = 0, n.DEFAULT_STDDEV = .05, n.mean = t.mean || n.DEFAULT_MEAN, n.stddev = t.stddev || n.DEFAULT_STDDEV, n.seed = t.seed, n;
	  }return __extends$1(t, e), t.prototype.apply = function (e, t) {
	    if ("bool" === t) throw new NotImplementedError("truncatedNormal does not support dType bool.");return truncatedNormal(e, this.mean, this.stddev, t, this.seed);
	  }, t.prototype.getConfig = function () {
	    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
	  }, t.className = "TruncatedNormal", t;
	}(Initializer);serialization.SerializationMap.register(TruncatedNormal);var Identity = function (e) {
	  function t(t) {
	    var n = e.call(this) || this;return n.gain = null != t.gain ? scalar(t.gain) : getScalar(1), n;
	  }return __extends$1(t, e), t.prototype.apply = function (e, t) {
	    var n = this;return tidy(function () {
	      if (2 !== e.length || e[0] !== e[1]) throw new ValueError("Identity matrix initializer can only be used for 2D square matrices.");return scalarTimesArray(n.gain, eye(e[0]));
	    });
	  }, t.prototype.getConfig = function () {
	    return { gain: this.gain.get() };
	  }, t.className = "Identity", t;
	}(Initializer);function computeFans(e, t) {
	  var n, r;if (void 0 === t && (t = "channelsLast"), checkDataFormat(t), 2 === e.length) n = e[0], r = e[1];else if (-1 !== [3, 4, 5].indexOf(e.length)) {
	    if ("channelsFirst" === t) {
	      var i = arrayProd(e, 2);n = e[1] * i, r = e[0] * i;
	    } else if ("channelsLast" === t) {
	      i = arrayProd(e, 0, e.length - 2);n = e[e.length - 2] * i, r = e[e.length - 1] * i;
	    }
	  } else {
	    var a = arrayProd(e);n = Math.sqrt(a), r = Math.sqrt(a);
	  }return [n, r];
	}serialization.SerializationMap.register(Identity);var VarianceScaling = function (e) {
	  function t(t) {
	    var n = e.call(this) || this;if (t.scale < 0) throw new ValueError("scale must be a positive float. Got: " + t.scale);return n.scale = null == t.scale ? 1 : t.scale, n.mode = t.mode, checkFanMode(n.mode), n.distribution = t.distribution, checkDistribution(n.distribution), n.seed = t.seed, n;
	  }return __extends$1(t, e), t.prototype.apply = function (e, t) {
	    var n = computeFans(e),
	        r = n[0],
	        i = n[1],
	        a = this.scale;if ("fanIn" === this.mode ? a /= Math.max(1, r) : "fanOut" === this.mode ? a /= Math.max(1, i) : a /= Math.max(1, (r + i) / 2), "normal" === this.distribution) {
	      var o = Math.sqrt(a);if ("bool" === t) throw new NotImplementedError(this.getClassName() + " does not support dType bool.");return truncatedNormal(e, 0, o, t, this.seed);
	    }var s = Math.sqrt(3 * a);return randomUniform(e, -s, s, t);
	  }, t.prototype.getConfig = function () {
	    return { scale: this.scale, mode: this.mode, distribution: this.distribution, seed: this.seed };
	  }, t.className = "VarianceScaling", t;
	}(Initializer);serialization.SerializationMap.register(VarianceScaling);var GlorotUniform = function (e) {
	  function t(t) {
	    return e.call(this, { scale: 1, mode: "fanAvg", distribution: "uniform", seed: null == t ? null : t.seed }) || this;
	  }return __extends$1(t, e), t.prototype.getClassName = function () {
	    return VarianceScaling.className;
	  }, t;
	}(VarianceScaling),
	    GlorotNormal = function (e) {
	  function t(t) {
	    return e.call(this, { scale: 1, mode: "fanAvg", distribution: "normal", seed: null == t ? null : t.seed }) || this;
	  }return __extends$1(t, e), t.prototype.getClassName = function () {
	    return VarianceScaling.className;
	  }, t;
	}(VarianceScaling),
	    HeNormal = function (e) {
	  function t(t) {
	    return e.call(this, { scale: 2, mode: "fanIn", distribution: "normal", seed: null == t ? null : t.seed }) || this;
	  }return __extends$1(t, e), t.prototype.getClassName = function () {
	    return VarianceScaling.className;
	  }, t;
	}(VarianceScaling),
	    LeCunNormal = function (e) {
	  function t(t) {
	    return e.call(this, { scale: 1, mode: "fanIn", distribution: "normal", seed: null == t ? null : t.seed }) || this;
	  }return __extends$1(t, e), t.prototype.getClassName = function () {
	    return VarianceScaling.className;
	  }, t;
	}(VarianceScaling),
	    Orthogonal = function (e) {
	  function t(t) {
	    var n = e.call(this) || this;if (n.DEFAULT_GAIN = 1, n.gain = null == t.gain ? n.DEFAULT_GAIN : t.gain, n.seed = t.seed, null != n.seed) throw new NotImplementedError("Random seed is not implemented for Orthogonal Initializer yet.");return n;
	  }return __extends$1(t, e), t.prototype.apply = function (e, t) {
	    var n = this;return tidy(function () {
	      if (2 !== e.length) throw new NotImplementedError("The Orthogonal Initializer does not support non-2D shapes yet.");e[0] * e[1] > 2e3 && console.warn("Orthogonal initializer is being called on a matrix with more than 2000 (" + e[0] * e[1] + ") elements: Slowness may result.");var t = randomNormal$1(e[0] > e[1] ? [e[1], e[0]] : e, 0, 1, "float32"),
	          r = linalg.gramSchmidt(t);return e[0] > e[1] && (r = r.transpose()), scalarTimesArray(getScalar(n.gain), r);
	    });
	  }, t.prototype.getConfig = function () {
	    return { gain: this.gain, seed: this.seed };
	  }, t.className = "Orthogonal", t;
	}(Initializer);serialization.SerializationMap.register(Orthogonal);var INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = { constant: "Constant", glorotNormal: "GlorotNormal", glorotUniform: "GlorotUniform", heNormal: "HeNormal", identity: "Identity", leCunNormal: "LeCunNormal", ones: "Ones", orthogonal: "Orthogonal", randomNormal: "RandomNormal", randomUniform: "RandomUniform", truncatedNormal: "TruncatedNormal", varianceScaling: "VarianceScaling", zeros: "Zeros" };function deserializeInitializer(e, t) {
	  return void 0 === t && (t = {}), deserializeKerasObject(e, serialization.SerializationMap.getMap().classNameMap, t, "initializer");
	}function serializeInitializer(e) {
	  return serializeKerasObject(e);
	}function getInitializer(e) {
	  if ("string" == typeof e) {
	    var t = e in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[e] : e;return "GlorotUniform" === t ? new GlorotUniform() : "GlorotNormal" === t ? new GlorotNormal() : "HeNormal" === t ? new HeNormal() : "LeCunNormal" === t ? new LeCunNormal() : deserializeInitializer({ className: t, config: {} });
	  }return e instanceof Initializer ? e : deserializeInitializer(e);
	}var Activation = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t.prototype.getConfig = function () {
	    return {};
	  }, t;
	}(serialization.Serializable),
	    Elu = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t.prototype.apply = function (e, t) {
	    return void 0 === t && (t = 1), elu$1(e, t);
	  }, t.className = "elu", t;
	}(Activation);serialization.SerializationMap.register(Elu);var Selu = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t.prototype.apply = function (e) {
	    return selu(e);
	  }, t.className = "selu", t;
	}(Activation);serialization.SerializationMap.register(Selu);var Relu = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t.prototype.apply = function (e) {
	    return relu(e);
	  }, t.className = "relu", t;
	}(Activation);serialization.SerializationMap.register(Relu);var Relu6 = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t.prototype.apply = function (e) {
	    return tidy(function () {
	      return minimum(getScalar(6), relu(e));
	    });
	  }, t.className = "relu6", t;
	}(Activation);serialization.SerializationMap.register(Relu6);var Linear = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t.prototype.apply = function (e) {
	    return e;
	  }, t.className = "linear", t;
	}(Activation);serialization.SerializationMap.register(Linear);var Sigmoid = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t.prototype.apply = function (e) {
	    return sigmoid(e);
	  }, t.className = "sigmoid", t;
	}(Activation);serialization.SerializationMap.register(Sigmoid);var HardSigmoid = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t.prototype.apply = function (e) {
	    return hardSigmoid(e);
	  }, t.className = "hardSigmoid", t;
	}(Activation);serialization.SerializationMap.register(HardSigmoid);var Softplus = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t.prototype.apply = function (e) {
	    return softplus(e);
	  }, t.className = "softplus", t;
	}(Activation);serialization.SerializationMap.register(Softplus);var Softsign = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t.prototype.apply = function (e) {
	    return softsign(e);
	  }, t.className = "softsign", t;
	}(Activation);serialization.SerializationMap.register(Softsign);var Tanh = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t.prototype.apply = function (e) {
	    return tanh$1(e);
	  }, t.className = "tanh", t;
	}(Activation);serialization.SerializationMap.register(Tanh);var Softmax = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t.prototype.apply = function (e, t) {
	    return void 0 === t && (t = -1), softmax(e, t);
	  }, t.className = "softmax", t;
	}(Activation);function serializeActivation(e) {
	  return e.getClassName();
	}function deserializeActivation(e, t) {
	  return void 0 === t && (t = {}), deserializeKerasObject(e, serialization.SerializationMap.getMap().classNameMap, t, "activation");
	}function getActivation(e) {
	  return null == e ? deserializeActivation({ className: "linear", config: {} }) : "string" == typeof e ? deserializeActivation({ className: e, config: {} }) : e instanceof Activation ? e : deserializeActivation(e);
	}serialization.SerializationMap.register(Softmax);var LeakyReLU = function (e) {
	  function t(t) {
	    var n = e.call(this, null == t ? {} : t) || this;return n.DEFAULT_ALPHA = .3, null == t && (t = {}), n.alpha = null == t.alpha ? n.DEFAULT_ALPHA : t.alpha, n;
	  }return __extends$1(t, e), t.prototype.call = function (e, t) {
	    var n = getExactlyOneTensor(e);return leakyRelu(n, this.alpha);
	  }, t.prototype.computeOutputShape = function (e) {
	    return e;
	  }, t.prototype.getConfig = function () {
	    var t = { alpha: this.alpha },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t.className = "LeakyReLU", t;
	}(Layer);serialization.SerializationMap.register(LeakyReLU);var ELU$1 = function (e) {
	  function t(t) {
	    var n = e.call(this, null == t ? {} : t) || this;if (n.DEFAULT_ALPHA = 1, null == t && (t = {}), null != t.alpha && t.alpha !== n.DEFAULT_ALPHA) throw new NotImplementedError("Non-default alpha value (" + t.alpha + ") is not supported by the ELU layer yet.");return n.alpha = null == t.alpha ? n.DEFAULT_ALPHA : t.alpha, n;
	  }return __extends$1(t, e), t.prototype.call = function (e, t) {
	    var n = getExactlyOneTensor(e);return elu(n);
	  }, t.prototype.computeOutputShape = function (e) {
	    return e;
	  }, t.prototype.getConfig = function () {
	    var t = { alpha: this.alpha },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t.className = "ELU", t;
	}(Layer);serialization.SerializationMap.register(ELU$1);var ThresholdedReLU = function (e) {
	  function t(t) {
	    var n = e.call(this, null == t ? {} : t) || this;return n.DEFAULT_THETA = 1, null == t && (t = {}), n.theta = null == t.theta ? n.DEFAULT_THETA : t.theta, n.thetaTensor = getScalar(n.theta), n;
	  }return __extends$1(t, e), t.prototype.call = function (e, t) {
	    var n = getExactlyOneTensor(e);return n.mul(cast$1(n.greater(this.thetaTensor), "float32"));
	  }, t.prototype.computeOutputShape = function (e) {
	    return e;
	  }, t.prototype.getConfig = function () {
	    var t = { theta: this.theta },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t.className = "ThresholdedReLU", t;
	}(Layer);serialization.SerializationMap.register(ThresholdedReLU);var Softmax$1 = function (e) {
	  function t(t) {
	    var n = e.call(this, null == t ? {} : t) || this;return n.DEFAULT_AXIS = 1, null == t && (t = {}), n.softmax = new Softmax().apply, n.axis = null == t.axis ? n.DEFAULT_AXIS : t.axis, n;
	  }return __extends$1(t, e), t.prototype.call = function (e, t) {
	    var n = getExactlyOneTensor(e);return this.softmax(n, this.axis);
	  }, t.prototype.computeOutputShape = function (e) {
	    return e;
	  }, t.prototype.getConfig = function () {
	    var t = { axis: this.axis },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t.className = "Softmax", t;
	}(Layer);serialization.SerializationMap.register(Softmax$1);var Regularizer = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t;
	}(serialization.Serializable),
	    L1L2 = function (e) {
	  function t(t) {
	    var n = e.call(this) || this,
	        r = null == t || null == t.l1 ? .01 : t.l1,
	        i = null == t || null == t.l2 ? .01 : t.l2;return n.hasL1 = 0 !== r, n.hasL2 = 0 !== i, n.l1 = getScalar(r), n.l2 = getScalar(i), n;
	  }return __extends$1(t, e), t.prototype.apply = function (e) {
	    var t = this;return tidy(function () {
	      var n = zeros([1]);return t.hasL1 && (n = add(n, sum(scalarTimesArray(t.l1, abs(e))))), t.hasL2 && (n = add(n, sum(scalarTimesArray(t.l2, square$1(e))))), n.asScalar();
	    });
	  }, t.prototype.getConfig = function () {
	    return { l1: this.l1.dataSync()[0], l2: this.l2.dataSync()[0] };
	  }, t.fromConfig = function (e, t) {
	    return new e({ l1: t.l1, l2: t.l2 });
	  }, t.className = "L1L2", t = __decorate$1([doc({ heading: "Regularizers", namespace: "regularizers" })], t);
	}(Regularizer);function l1(e) {
	  return new L1L2({ l1: null != e ? e.l1 : null, l2: 0 });
	}function l2(e) {
	  return new L1L2({ l2: null != e ? e.l2 : null, l1: 0 });
	}serialization.SerializationMap.register(L1L2);var REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = { l1l2: "L1L2" };function serializeRegularizer(e) {
	  return serializeKerasObject(e);
	}function deserializeRegularizer(e, t) {
	  return void 0 === t && (t = {}), deserializeKerasObject(e, serialization.SerializationMap.getMap().classNameMap, t, "regularizer");
	}function getRegularizer(e) {
	  return null == e ? null : "string" == typeof e ? deserializeRegularizer({ className: e in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[e] : e, config: {} }) : e instanceof Regularizer ? e : deserializeRegularizer(e);
	}function normalizeArray(e, t, n) {
	  if ("number" == typeof e) return pyListRepeat(e, t);if (e.length !== t) throw new ValueError("The " + n + " argument must be a tuple of " + t + " integers. Received: " + e.length + " elements.");for (var r = 0; r < t; ++r) {
	    var i = e[r];if (!isInteger(i)) throw new ValueError("The " + n + " argument must be a tuple of " + t + " integers. Received: " + JSON.stringify(e) + " including a non-integer number " + i);
	  }return e;
	}function convOutputLength(e, t, n, r, i) {
	  return void 0 === i && (i = 1), null == e ? e : (a = "same" === n ? e : e - (t + (t - 1) * (i - 1)) + 1, Math.floor((a + r - 1) / r));var a;
	}function deconvLength(e, t, n, r) {
	  if (null == e) return null;if ("valid" === r) e = e * t + max$1([n - t, 0]);else {
	    if ("same" !== r) throw new ValueError("Unsupport padding mode: " + r + ".");e *= t;
	  }return e;
	}function preprocessConv2DInput(e, t) {
	  return tidy(function () {
	    return checkDataFormat(t), "channelsFirst" === t ? transpose(e, [0, 2, 3, 1]) : e;
	  });
	}function conv1dWithBias(e, t, n, r, i, a, o) {
	  return void 0 === r && (r = 1), void 0 === i && (i = "valid"), void 0 === o && (o = 1), tidy(function () {
	    if (null == a && (a = imageDataFormat()), checkDataFormat(a), 3 !== e.shape.length) throw new ValueError("The input of a conv1dWithBias operation should be 3, but is " + e.shape.length + " instead.");if (3 !== t.shape.length) throw new ValueError("The kernel for a conv1dWithBias operation should be 3, but is " + t.shape.length + " instead");if (null != n && 1 !== n.shape.length) throw new ValueError("The bias for a conv1dWithBias operation should be 1, but is " + t.shape.length + " instead");if ("channelsFirst" === a && (e = transpose(e, [0, 2, 1])), "causal" === i) throw new NotImplementedError("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");var s = conv1d(e, t, r, "same" === i ? "same" : "valid", "NWC", o);return null != n && (s = biasAdd(s, n)), s;
	  });
	}function conv2dWithBias(e, t, n, r, i, a, o) {
	  return void 0 === r && (r = [1, 1]), void 0 === i && (i = "valid"), tidy(function () {
	    if (null == a && (a = imageDataFormat()), checkDataFormat(a), 3 !== e.rank && 4 !== e.rank) throw new ValueError("conv2dWithBias expects input to be of rank 3 or 4, but received " + e.rank + ".");if (3 !== t.rank && 4 !== t.rank) throw new ValueError("conv2dWithBias expects kernel to be of rank 3 or 4, but received " + e.rank + ".");var s = preprocessConv2DInput(e, a);if ("causal" === i) throw new NotImplementedError("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return s = conv2d(s, t, r, "same" === i ? "same" : "valid", "NHWC", o), null != n && (s = biasAdd(s, n)), "channelsFirst" === a && (s = transpose(s, [0, 3, 1, 2])), s;
	  });
	}var BaseConv = function (e) {
	  function t(n, r) {
	    var i = e.call(this, r) || this;if (i.bias = null, i.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", i.DEFAULT_BIAS_INITIALIZER = "zeros", t.verifyConfig(r), i.rank = n, 1 !== i.rank && 2 !== i.rank) throw new NotImplementedError("Convolution layer for rank other than 1 or 2 (" + i.rank + ") is not implemented yet.");if (i.kernelSize = normalizeArray(r.kernelSize, n, "kernelSize"), i.strides = normalizeArray(null == r.strides ? 1 : r.strides, n, "strides"), i.padding = null == r.padding ? "valid" : r.padding, checkPaddingMode(i.padding), i.dataFormat = null == r.dataFormat ? "channelsLast" : r.dataFormat, checkDataFormat(i.dataFormat), i.activation = getActivation(r.activation), i.useBias = null == r.useBias || r.useBias, i.biasInitializer = getInitializer(r.biasInitializer || i.DEFAULT_BIAS_INITIALIZER), i.biasConstraint = getConstraint(r.biasConstraint), i.biasRegularizer = getRegularizer(r.biasRegularizer), i.activityRegularizer = getRegularizer(r.activityRegularizer), i.dilationRate = null == r.dilationRate ? 1 : r.dilationRate, 1 === i.rank && Array.isArray(i.dilationRate) && 1 !== i.dilationRate.length) throw new ValueError("dilationRate must be a number or an array of a single number for 1D convolution, but received " + JSON.stringify(i.dilationRate));if (2 === i.rank) if ("number" == typeof i.dilationRate) i.dilationRate = [i.dilationRate, i.dilationRate];else if (2 !== i.dilationRate.length) throw new ValueError("dilationRate must be a number or array of two numbers for 2D convolution, but received " + JSON.stringify(i.dilationRate));return i;
	  }return __extends$1(t, e), t.verifyConfig = function (e) {
	    if (assert$1("kernelSize" in e, "required key 'kernelSize' not in config"), "number" != typeof e.kernelSize && !checkArrayTypeAndLength(e.kernelSize, "number", 1, 2)) throw new ValueError("BaseConv expects config.kernelSize to be number or number[] with length 1 or 2, but received " + JSON.stringify(e.kernelSize) + ".");
	  }, t;
	}(Layer),
	    Conv = function (e) {
	  function t(n, r) {
	    var i = e.call(this, n, r) || this;return i.kernel = null, t.verifyConfig(r), i.filters = r.filters, i.kernelInitializer = getInitializer(r.kernelInitializer || i.DEFAULT_KERNEL_INITIALIZER), i.kernelConstraint = getConstraint(r.kernelConstraint), i.kernelRegularizer = getRegularizer(r.kernelRegularizer), i;
	  }return __extends$1(t, e), t.prototype.build = function (e) {
	    e = getExactlyOneShape(e);var t = "channelsFirst" === this.dataFormat ? 1 : e.length - 1;if (null == e[t]) throw new ValueError("The channel dimension of the input should be defined. Found " + e[t]);var n,
	        r = e[t],
	        i = this.kernelSize.concat([r, this.filters]);this.kernel = this.addWeight("kernel", i, null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [{ ndim: this.rank + 2, axes: (n = {}, n[t] = r, n) }], this.built = !0;
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      var t;e = getExactlyOneTensor(e);var r = null == n.bias ? null : n.bias.read();if (1 === n.rank) t = conv1dWithBias(e, n.kernel.read(), r, n.strides[0], n.padding, n.dataFormat, n.dilationRate);else if (2 === n.rank) t = conv2dWithBias(e, n.kernel.read(), r, n.strides, n.padding, n.dataFormat, n.dilationRate);else if (3 === n.rank) throw new NotImplementedError("3D convolution is not implemented yet.");return null != n.activation && (t = n.activation.apply(t)), t;
	    });
	  }, t.prototype.computeOutputShape = function (e) {
	    e = getExactlyOneShape(e);for (var t = [], n = "channelsLast" === this.dataFormat ? e.slice(1, e.length - 1) : e.slice(2), r = 0; r < n.length; ++r) {
	      var i = convOutputLength(n[r], this.kernelSize[r], this.padding, this.strides[r], "number" == typeof this.dilationRate ? this.dilationRate : this.dilationRate[r]);t.push(i);
	    }var a = [e[0]];return "channelsLast" === this.dataFormat ? (a = a.concat(t)).push(this.filters) : (a.push(this.filters), a = a.concat(t)), a;
	  }, t.prototype.getConfig = function () {
	    var t = { rank: this.rank, filters: this.filters, kernelSize: this.kernelSize, strides: this.strides, padding: this.padding, dataFormat: this.dataFormat, dilationRate: this.dilationRate, activation: serializeActivation(this.activation), useBias: this.useBias, kernelInitializer: serializeInitializer(this.kernelInitializer), biasInitializer: serializeInitializer(this.biasInitializer), kernelRegularizer: serializeRegularizer(this.kernelRegularizer), biasRegularizer: serializeRegularizer(this.biasRegularizer), activityRegularizer: serializeRegularizer(this.activityRegularizer), kernelConstraint: serializeConstraint(this.kernelConstraint), biasConstraint: serializeConstraint(this.biasConstraint) },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t.verifyConfig = function (e) {
	    if (!("filters" in e) || "number" != typeof e.filters || e.filters < 1) throw new ValueError("Convolution layer expected config.filters to be a 'number' > 0 but got " + JSON.stringify(e.filters));
	  }, t;
	}(BaseConv),
	    Conv2D = function (e) {
	  function t(n) {
	    var r = e.call(this, 2, n) || this;return t.verifyConfig(n), r;
	  }return __extends$1(t, e), t.prototype.getConfig = function () {
	    var t = e.prototype.getConfig.call(this);return delete t.rank, t;
	  }, t.verifyConfig = function (e) {
	    if ("number" != typeof e.kernelSize && !checkArrayTypeAndLength(e.kernelSize, "number", 1, 2)) throw new ValueError("Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received " + JSON.stringify(e.kernelSize) + ".");
	  }, t.className = "Conv2D", t;
	}(Conv);serialization.SerializationMap.register(Conv2D);var Conv2DTranspose = function (e) {
	  function t(t) {
	    var n = e.call(this, t) || this;if (n.inputSpec = [new InputSpec({ ndim: 4 })], "same" !== n.padding && "valid" !== n.padding) throw new ValueError("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode " + n.padding);return n;
	  }return __extends$1(t, e), t.prototype.build = function (e) {
	    if (4 !== (e = getExactlyOneShape(e)).length) throw new ValueError("Input should have rank 4; Received input shape: " + JSON.stringify(e));var t = "channelsFirst" === this.dataFormat ? 1 : e.length - 1;if (null == e[t]) throw new ValueError("The channel dimension of the inputs should be defined. Found `None`.");var n,
	        r = e[t],
	        i = this.kernelSize.concat([this.filters, r]);this.kernel = this.addWeight("kernel", i, "float32", this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [new InputSpec({ ndim: 4, axes: (n = {}, n[t] = r, n) })], this.built = !0;
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      var t = getExactlyOneTensor(e);if (4 !== t.shape.length) throw new ValueError("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-" + t.shape.length);var r,
	          i,
	          a = t.shape,
	          o = a[0];"channelsFirst" === n.dataFormat ? (r = 2, i = 3) : (r = 1, i = 2);var s = a[r],
	          l = a[i],
	          u = n.kernelSize[0],
	          c = n.kernelSize[1],
	          p = n.strides[0],
	          h = n.strides[1],
	          d = [o, deconvLength(s, p, u, n.padding), deconvLength(l, h, c, n.padding), n.filters];"channelsLast" !== n.dataFormat && (t = transpose(t, [0, 2, 3, 1]));var g = conv2dTranspose(t, n.kernel.read(), d, n.strides, n.padding);return "channelsLast" !== n.dataFormat && (g = transpose(g, [0, 3, 1, 2])), null != n.bias && (g = biasAdd(g, n.bias.read(), n.dataFormat)), null != n.activation && (g = n.activation.apply(g)), g;
	    });
	  }, t.prototype.computeOutputShape = function (e) {
	    var t,
	        n,
	        r,
	        i = (e = getExactlyOneShape(e)).slice();"channelsFirst" === this.dataFormat ? (t = 1, n = 2, r = 3) : (t = 3, n = 1, r = 2);var a = this.kernelSize[0],
	        o = this.kernelSize[1],
	        s = this.strides[0],
	        l = this.strides[1];return i[t] = this.filters, i[n] = deconvLength(i[n], s, a, this.padding), i[r] = deconvLength(i[r], l, o, this.padding), i;
	  }, t.prototype.getConfig = function () {
	    var t = e.prototype.getConfig.call(this);return delete t.dilationRate, t;
	  }, t.className = "Conv2DTranspose", t;
	}(Conv2D);serialization.SerializationMap.register(Conv2DTranspose);var SeparableConv = function (e) {
	  function t(t, n) {
	    var r = e.call(this, t, n) || this;if (r.DEFAULT_DEPTHWISE_INITIALIZER = "glorotUniform", r.DEFAULT_POINTWISE_INITIALIZER = "glorotUniform", r.depthwiseKernel = null, r.pointwiseKernel = null, null == n.filters) throw new ValueError("The `filters` configuration field is required by SeparableConv, but is unspecified.");if (null != n.kernelInitializer || null != n.kernelRegularizer || null != n.kernelConstraint) throw new ValueError("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if (null != n.padding && "same" !== n.padding && "valid" !== n.padding) throw new ValueError("SeparableConv" + r.rank + "D supports only padding modes: 'same' and 'valid', but received " + JSON.stringify(n.padding));return r.depthMultiplier = null == n.depthMultiplier ? 1 : n.depthMultiplier, r.depthwiseInitializer = getInitializer(n.depthwiseInitializer || r.DEFAULT_DEPTHWISE_INITIALIZER), r.depthwiseRegularizer = getRegularizer(n.depthwiseRegularizer), r.depthwiseConstraint = getConstraint(n.depthwiseConstraint), r.pointwiseInitializer = getInitializer(n.depthwiseInitializer || r.DEFAULT_POINTWISE_INITIALIZER), r.pointwiseRegularizer = getRegularizer(n.pointwiseRegularizer), r.pointwiseConstraint = getConstraint(n.pointwiseConstraint), r;
	  }return __extends$1(t, e), t.prototype.build = function (e) {
	    if ((e = getExactlyOneShape(e)).length < this.rank + 2) throw new ValueError("Inputs to SeparableConv" + this.rank + "D should have rank " + (this.rank + 2) + ", but received input shape: " + JSON.stringify(e));var t = "channelsFirst" === this.dataFormat ? 1 : e.length - 1;if (null == e[t] || e[t] < 0) throw new ValueError("The channel dimension of the inputs should be defined, but found " + JSON.stringify(e[t]));for (var n = e[t], r = this.kernelSize.concat([n, this.depthMultiplier]), i = [], a = 0; a < this.rank; ++a) i.push(1);i.push(n * this.depthMultiplier, this.filters);var o;this.depthwiseKernel = this.addWeight("depthwise_kernel", r, "float32", this.depthwiseInitializer, this.depthwiseRegularizer, !0, this.depthwiseConstraint), this.pointwiseKernel = this.addWeight("pointwise_kernel", i, "float32", this.pointwiseInitializer, this.pointwiseRegularizer, !0, this.pointwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.inputSpec = [new InputSpec({ ndim: this.rank + 2, axes: (o = {}, o[t] = n, o) })], this.built = !0;
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      var t;if (e = getExactlyOneTensor(e), 1 === n.rank) throw new NotImplementedError("1D separable convolution is not implemented yet.");return 2 === n.rank && ("channelsFirst" === n.dataFormat && (e = transpose(e, [0, 2, 3, 1])), t = separableConv2d(e, n.depthwiseKernel.read(), n.pointwiseKernel.read(), n.strides, n.padding, n.dilationRate, "NHWC")), n.useBias && (t = biasAdd(t, n.bias.read(), n.dataFormat)), null != n.activation && (t = n.activation.apply(t)), "channelsFirst" === n.dataFormat && (t = transpose(t, [0, 3, 1, 2])), t;
	    });
	  }, t.prototype.getConfig = function () {
	    var t = e.prototype.getConfig.call(this);return delete t.rank, delete t.kernelInitializer, delete t.kernelRegularizer, delete t.kernelConstraint, t.depthwiseInitializer = serializeInitializer(this.depthwiseInitializer), t.pointwiseInitializer = serializeInitializer(this.pointwiseInitializer), t.depthwiseRegularizer = serializeRegularizer(this.depthwiseRegularizer), t.pointwiseRegularizer = serializeRegularizer(this.pointwiseRegularizer), t.depthwiseConstraint = serializeConstraint(this.depthwiseConstraint), t.pointwiseConstraint = serializeConstraint(this.pointwiseConstraint), t;
	  }, t.className = "SeparableConv", t;
	}(Conv),
	    SeparableConv2D = function (e) {
	  function t(t) {
	    return e.call(this, 2, t) || this;
	  }return __extends$1(t, e), t.className = "SeparableConv2D", t;
	}(SeparableConv);serialization.SerializationMap.register(SeparableConv2D);var Conv1D = function (e) {
	  function t(n) {
	    var r = e.call(this, 1, n) || this;return t.verifyConfig(n), r.inputSpec = [{ ndim: 3 }], r;
	  }return __extends$1(t, e), t.prototype.getConfig = function () {
	    var t = e.prototype.getConfig.call(this);return delete t.rank, delete t.dataFormat, t;
	  }, t.verifyConfig = function (e) {
	    if ("number" != typeof e.kernelSize && !checkArrayTypeAndLength(e.kernelSize, "number", 1, 1)) throw new ValueError("Conv1D expects config.kernelSize to be number or number[] with length 1, but received " + JSON.stringify(e.kernelSize) + ".");
	  }, t.className = "Conv1D", t;
	}(Conv);serialization.SerializationMap.register(Conv1D);var Cropping2D = function (e) {
	  function t(t) {
	    var n = e.call(this, t) || this;return "number" == typeof t.cropping ? n.cropping = [[t.cropping, t.cropping], [t.cropping, t.cropping]] : "number" == typeof t.cropping[0] ? n.cropping = [[t.cropping[0], t.cropping[0]], [t.cropping[1], t.cropping[1]]] : n.cropping = t.cropping, n.dataFormat = void 0 === t.dataFormat ? "channelsLast" : t.dataFormat, n.inputSpec = [{ ndim: 4 }], n;
	  }return __extends$1(t, e), t.prototype.computeOutputShape = function (e) {
	    return "channelsFirst" === this.dataFormat ? [e[0], e[1], e[2] - this.cropping[0][0] - this.cropping[0][1], e[2] - this.cropping[1][0] - this.cropping[1][1]] : [e[0], e[1] - this.cropping[0][0] - this.cropping[0][1], e[2] - this.cropping[1][0] - this.cropping[1][1], e[3]];
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      return e = getExactlyOneTensor(e), "channelsLast" === n.dataFormat ? sliceAlongAxis(sliceAlongAxis(e, n.cropping[0][0], e.shape[1] - n.cropping[0][0] - n.cropping[0][1], 2), n.cropping[1][0], e.shape[2] - n.cropping[1][1] - n.cropping[1][0], 3) : sliceAlongAxis(sliceAlongAxis(e, n.cropping[0][0], e.shape[2] - n.cropping[0][0] - n.cropping[0][1], 3), n.cropping[1][0], e.shape[3] - n.cropping[1][1] - n.cropping[1][0], 4);
	    });
	  }, t.prototype.getConfig = function () {
	    var t = { cropping: this.cropping, dataFormat: this.dataFormat },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t.className = "Cropping2D", t;
	}(Layer);serialization.SerializationMap.register(Cropping2D);var UpSampling2D = function (e) {
	  function t(t) {
	    var n = e.call(this, t) || this;return n.DEFAULT_SIZE = [2, 2], n.inputSpec = [{ ndim: 4 }], n.size = void 0 === t.size ? n.DEFAULT_SIZE : t.size, n.dataFormat = void 0 === t.dataFormat ? "channelsLast" : t.dataFormat, n;
	  }return __extends$1(t, e), t.prototype.computeOutputShape = function (e) {
	    if ("channelsFirst" === this.dataFormat) {
	      var t = this.size[0] * e[2],
	          n = this.size[1] * e[3];return [e[0], e[1], t, n];
	    }t = this.size[0] * e[1], n = this.size[1] * e[2];return [e[0], t, n, e[3]];
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      var t = getExactlyOneTensor(e),
	          r = t.shape;if ("channelsFirst" === n.dataFormat) {
	        t = transpose(t, [0, 2, 3, 1]);var i = n.size[0] * r[2],
	            a = n.size[1] * r[3],
	            o = t.resizeNearestNeighbor([i, a]);return transpose(o, [0, 3, 1, 2]);
	      }i = n.size[0] * r[1], a = n.size[1] * r[2];return t.resizeNearestNeighbor([i, a]);
	    });
	  }, t.prototype.getConfig = function () {
	    var t = { size: this.size, dataFormat: this.dataFormat },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t.className = "UpSampling2D", t;
	}(Layer);function depthwiseConv2d$1(e, t, n, r, i, a) {
	  return void 0 === n && (n = [1, 1]), void 0 === r && (r = "valid"), tidy(function () {
	    null == i && (i = imageDataFormat()), checkDataFormat(i);var o = preprocessConv2DInput(e, i);if (4 !== e.rank) throw new ValueError("Input for depthwiseConv2d is required to be 4-D, but is instead " + e.rank + "-D");if (4 !== t.rank) throw new ValueError("depthwiseKernel is required to be 4-D, but is instead " + t.rank + "-D");return o = depthwiseConv2d(o, t, n, "same" === r ? "same" : "valid", "NHWC", a), "channelsFirst" === i && (o = transpose(o, [0, 3, 1, 2])), o;
	  });
	}serialization.SerializationMap.register(UpSampling2D);var DepthwiseConv2D = function (e) {
	  function t(t) {
	    var n = e.call(this, 2, t) || this;return n.depthwiseKernel = null, n.depthMultiplier = null == t.depthMultiplier ? 1 : t.depthMultiplier, n.depthwiseInitializer = getInitializer(t.depthwiseInitializer || n.DEFAULT_KERNEL_INITIALIZER), n.depthwiseConstraint = getConstraint(t.depthwiseConstraint), n.depthwiseRegularizer = getRegularizer(t.depthwiseRegularizer), n;
	  }return __extends$1(t, e), t.prototype.build = function (e) {
	    if ((e = getExactlyOneShape(e)).length < 4) throw new ValueError("Inputs to DepthwiseConv2D should have rank 4. Received input shape: " + JSON.stringify(e) + ".");var t = "channelsFirst" === this.dataFormat ? 1 : 3;if (null == e[t] || e[t] < 0) throw new ValueError("The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (" + e[t] + ").");var n = e[t],
	        r = [this.kernelSize[0], this.kernelSize[1], n, this.depthMultiplier];this.depthwiseKernel = this.addWeight("depthwise_kernel", r, null, this.depthwiseInitializer, this.depthwiseRegularizer, !0, this.depthwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [n * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      var t = depthwiseConv2d$1(e = getExactlyOneTensor(e), n.depthwiseKernel.read(), n.strides, n.padding, n.dataFormat, null);return n.useBias && (t = biasAdd(t, n.bias.read(), n.dataFormat)), null != n.activation && (t = n.activation.apply(t)), t;
	    });
	  }, t.prototype.computeOutputShape = function (e) {
	    e = getExactlyOneShape(e);var t = "channelsFirst" === this.dataFormat ? e[2] : e[1],
	        n = "channelsFirst" === this.dataFormat ? e[3] : e[2],
	        r = "channelsFirst" === this.dataFormat ? e[1] * this.depthMultiplier : e[3] * this.depthMultiplier,
	        i = convOutputLength(t, this.kernelSize[0], this.padding, this.strides[0]),
	        a = convOutputLength(n, this.kernelSize[1], this.padding, this.strides[1]);return "channelsFirst" === this.dataFormat ? [e[0], r, i, a] : [e[0], i, a, r];
	  }, t.className = "DepthwiseConv2D", t;
	}(BaseConv);serialization.SerializationMap.register(DepthwiseConv2D);var Dropout = function (e) {
	  function t(t) {
	    var n = e.call(this, t) || this;if (n.rate = Math.max(Math.min(t.rate, 1), 0), n.rateScalar = getScalar(n.rate), n.noiseShape = t.noiseShape, n.seed = t.seed, null != n.seed) throw new NotImplementedError("Non-default seed is not implemented in Dropout layer yet: " + n.seed);return n.supportsMasking = !0, n;
	  }return __extends$1(t, e), t.prototype.getNoiseShape = function (e) {
	    if (null == this.noiseShape) return this.noiseShape;for (var t = e.shape, n = [], r = 0; r < this.noiseShape.length; ++r) n.push(null == this.noiseShape[r] ? t[r] : this.noiseShape[r]);return n;
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      n.invokeCallHook(e, t);var r = getExactlyOneTensor(e);if (null != n.noiseShape && !util.arraysEqual(r.shape, n.noiseShape)) throw new NotImplementedError("Non-default noise shape is not implemented in Dropout layer yet: " + JSON.stringify(n.noiseShape));if (0 < n.rate && n.rate < 1) {
	        var i = null != t.training && t.training,
	            a = n.getNoiseShape(r);return inTrainPhase(function () {
	          return dropout(r, n.rateScalar, a, n.seed);
	        }, function () {
	          return r;
	        }, i);
	      }return e;
	    });
	  }, t.prototype.getConfig = function () {
	    var t = { rate: this.rate, noiseShape: this.noiseShape, seed: this.seed },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t.className = "Dropout", t;
	}(Layer);serialization.SerializationMap.register(Dropout);var Dense = function (e) {
	  function t(t) {
	    var n = e.call(this, t) || this;if (n.activation = null, n.useBias = !0, n.kernel = null, n.bias = null, n.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", n.DEFAULT_BIAS_INITIALIZER = "zeros", null == t.batchInputShape && null == t.inputShape && null != t.inputDim) {
	      var r = null;null != t.batchSize && (r = t.batchSize), n.batchInputShape = [r, t.inputDim];
	    }return n.units = t.units, n.activation = getActivation(t.activation), null != t.useBias && (n.useBias = t.useBias), n.kernelInitializer = getInitializer(t.kernelInitializer || n.DEFAULT_KERNEL_INITIALIZER), n.biasInitializer = getInitializer(t.biasInitializer || n.DEFAULT_BIAS_INITIALIZER), n.kernelConstraint = getConstraint(t.kernelConstraint), n.biasConstraint = getConstraint(t.biasConstraint), n.kernelRegularizer = getRegularizer(t.kernelRegularizer), n.biasRegularizer = getRegularizer(t.biasRegularizer), n.activityRegularizer = getRegularizer(t.activityRegularizer), n.inputSpec = [{ minNDim: 2 }], n;
	  }return __extends$1(t, e), t.prototype.build = function (e) {
	    var t,
	        n = (e = getExactlyOneShape(e))[e.length - 1];null == this.kernel && (this.kernel = this.addWeight("kernel", [n, this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint))), this.inputSpec = [{ minNDim: 2, axes: (t = {}, t[-1] = n, t) }], this.built = !0;
	  }, t.prototype.computeOutputShape = function (e) {
	    var t = (e = getExactlyOneShape(e)).slice();return t[t.length - 1] = this.units, t;
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      n.invokeCallHook(e, t);var r = dot$1(getExactlyOneTensor(e), n.kernel.read());return null != n.bias && (r = biasAdd(r, n.bias.read())), null != n.activation && (r = n.activation.apply(r)), r;
	    });
	  }, t.prototype.getConfig = function () {
	    var t = { units: this.units, activation: serializeActivation(this.activation), useBias: this.useBias, kernelInitializer: serializeInitializer(this.kernelInitializer), biasInitializer: serializeInitializer(this.biasInitializer), kernelRegularizer: serializeRegularizer(this.kernelRegularizer), biasRegularizer: serializeRegularizer(this.biasRegularizer), activityRegularizer: serializeRegularizer(this.activityRegularizer), kernelConstraint: serializeConstraint(this.kernelConstraint), biasConstraint: serializeConstraint(this.biasConstraint) },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t.className = "Dense", t;
	}(Layer);serialization.SerializationMap.register(Dense);var Flatten = function (e) {
	  function t(t) {
	    var n = e.call(this, t || {}) || this;return n.inputSpec = [{ minNDim: 3 }], n;
	  }return __extends$1(t, e), t.prototype.computeOutputShape = function (e) {
	    for (var t = 0, n = (e = getExactlyOneShape(e)).slice(1); t < n.length; t++) {
	      if (null == n[t]) throw new ValueError('The shape of the input to "Flatten" is not fully defined (got ' + e.slice(1) + '). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.');
	    }return [e[0], arrayProd(e, 1)];
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      return n.invokeCallHook(e, t), batchFlatten(getExactlyOneTensor(e));
	    });
	  }, t.className = "Flatten", t;
	}(Layer);serialization.SerializationMap.register(Flatten);var Activation$1 = function (e) {
	  function t(t) {
	    var n = e.call(this, t) || this;return n.supportsMasking = !0, n.activation = getActivation(t.activation), n;
	  }return __extends$1(t, e), t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      n.invokeCallHook(e, t);var r = getExactlyOneTensor(e);return n.activation.apply(r);
	    });
	  }, t.prototype.getConfig = function () {
	    var t = { activation: serializeActivation(this.activation) },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t.className = "Activation", t;
	}(Layer);serialization.SerializationMap.register(Activation$1);var RepeatVector = function (e) {
	  function t(t) {
	    var n = e.call(this, t) || this;return n.n = t.n, n.inputSpec = [{ ndim: 2 }], n;
	  }return __extends$1(t, e), t.prototype.computeOutputShape = function (e) {
	    return [e[0], this.n, e[1]];
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      return repeat(e = getExactlyOneTensor(e), n.n);
	    });
	  }, t.prototype.getConfig = function () {
	    var t = { n: this.n },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t.className = "RepeatVector", t;
	}(Layer);serialization.SerializationMap.register(RepeatVector);var Reshape = function (e) {
	  function t(t) {
	    var n = e.call(this, t) || this;n.targetShape = t.targetShape;for (var r = 0; r < n.targetShape.length; ++r) n.isUnknown(n.targetShape[r]) && (n.targetShape[r] = null);return n;
	  }return __extends$1(t, e), t.prototype.isUnknown = function (e) {
	    return e < 0 || null == e;
	  }, t.prototype.fixUnknownDimension = function (e, t) {
	    for (var n = "Total size of new array must be unchanged.", r = t.slice(), i = 1, a = null, o = 0; o < r.length; ++o) {
	      var s = r[o];if (this.isUnknown(s)) {
	        if (null !== a) throw new ValueError("Can only specifiy one unknown dimension.");a = o;
	      } else i *= s;
	    }var l = arrayProd(e);if (null !== a) {
	      if (0 === i || l % i != 0) throw new ValueError(n);r[a] = l / i;
	    } else if (l !== i) throw new ValueError(n);return r;
	  }, t.prototype.computeOutputShape = function (e) {
	    for (var t = !1, n = 0; n < e.length; ++n) if (this.isUnknown(e[n])) {
	      t = !0;break;
	    }return t ? e.slice(0, 1).concat(this.targetShape) : e.slice(0, 1).concat(this.fixUnknownDimension(e.slice(1), this.targetShape));
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      n.invokeCallHook(e, t);var r = getExactlyOneTensor(e),
	          i = shape(r),
	          a = i.slice(0, 1).concat(n.fixUnknownDimension(i.slice(1), n.targetShape));return r.reshape(a);
	    });
	  }, t.prototype.getConfig = function () {
	    var t = { targetShape: this.targetShape },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t.className = "Reshape", t;
	}(Layer);serialization.SerializationMap.register(Reshape);var Embedding = function (e) {
	  function t(t) {
	    var n = e.call(this, t) || this;if (n.embeddings = null, n.DEFAULT_EMBEDDINGS_INITIALIZER = "randomUniform", null == t.batchInputShape && null == t.inputShape) {
	      var r = null;null != t.batchSize && (r = t.batchSize), null == t.inputLength ? n.batchInputShape = [r, null] : n.batchInputShape = [r].concat(toList(t.inputLength));
	    }return n.inputDim = t.inputDim, n.outputDim = t.outputDim, n.embeddingsInitializer = getInitializer(t.embeddingsInitializer || n.DEFAULT_EMBEDDINGS_INITIALIZER), n.embeddingsRegularizer = getRegularizer(t.embeddingsRegularizer), n.activityRegularizer = getRegularizer(t.activityRegularizer), n.embeddingsConstraint = getConstraint(t.embeddingsConstraint), n.maskZero = t.maskZero, n.inputLength = t.inputLength, n;
	  }return __extends$1(t, e), t.prototype.build = function (e) {
	    this.embeddings = this.addWeight("embeddings", [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, !0, this.embeddingsConstraint), this.built = !0;
	  }, t.prototype.computeMask = function (e, t) {
	    throw new NotImplementedError("computeMask has not been implemented for Embedding yet");
	  }, t.prototype.computeOutputShape = function (e) {
	    if (e = getExactlyOneShape(e), null == this.inputLength) return e.concat([this.outputDim]);var t = toList(this.inputLength);if (t.length !== e.length - 1) throw new ValueError('"inputLength" is ' + this.inputLength + ", but received input shape has shape " + e);for (var n = 0, r = 0; r < t.length; ++r) {
	      var i = t[r],
	          a = e[r + 1];if (null != i && null != a && i !== a) throw new ValueError('"inputLength" is ' + this.inputLength + ", but received input shape has shape " + e);null == i && (t[n] = a), n++;
	    }return [e[0]].concat(t, [this.outputDim]);
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      n.invokeCallHook(e, t);var r = getExactlyOneTensor(e);return "int32" !== dtype(r) && (r = cast$1(r, "int32")), gather$1(n.embeddings.read(), r.as1D()).reshape(getExactlyOneShape(n.computeOutputShape(r.shape)));
	    });
	  }, t.prototype.getConfig = function () {
	    var t = { inputDim: this.inputDim, outputDim: this.outputDim, embeddingsInitializer: serializeInitializer(this.embeddingsInitializer), embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer), activityRegularizer: serializeRegularizer(this.activityRegularizer), embeddingsConstraint: serializeConstraint(this.embeddingsConstraint), maskZero: this.maskZero, inputLength: this.inputLength },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t.className = "Embedding", t;
	}(Layer);serialization.SerializationMap.register(Embedding);var Merge = function (e) {
	  function t(t) {
	    var n = e.call(this, t || {}) || this;return n.supportsMasking = !0, n;
	  }return __extends$1(t, e), t.prototype.mergeFunction = function (e) {
	    throw new NotImplementedError();
	  }, t.prototype.computeElementwiseOpOutputShape = function (e, t) {
	    if (null == e || null == t) return null;if (e.length < t.length) return this.computeElementwiseOpOutputShape(t, e);if (0 === t.length) return e;for (var n = e.slice(0, e.length - t.length), r = 0; r < t.length; ++r) {
	      var i = e[e.length - t.length + r],
	          a = t[r];if (null == i || null == a || i < 0 || a < 0) n.push(null);else if (1 === i) n.push(a);else if (1 === a) n.push(i);else {
	        if (i !== a) throw new ValueError("Operands could not be broadcast together with shapes " + JSON.stringify(e) + " " + JSON.stringify(t));n.push(i);
	      }
	    }return n;
	  }, t.prototype.build = function (e) {
	    if (Array.isArray(e) && !Array.isArray(e[0]) && (e = [getExactlyOneShape(e)]), (e = e).length < 2) throw new ValueError("A merge layer should be called on an Array of at least 2 inputs. Got " + e.length + " input(s).");for (var t = [], n = 0, r = e; n < r.length; n++) {
	      null != (o = r[n]) && null !== o[0] && t.push(o[0]);
	    }if ((t = unique(t)).length > 1) throw new ValueError("Can not merge tensors with different batch sizes. Got tensors with shapes: " + JSON.stringify(e) + ".");for (var i = null == e[0] ? null : e[0].slice(1), a = 1; a < e.length; ++a) {
	      var o = null == e[a] ? null : e[a].slice(1);i = this.computeElementwiseOpOutputShape(i, o);
	    }var s = e.map(function (e) {
	      return e.length;
	    });-1 === e.indexOf(null) && 1 === unique(s).length ? this.reshapeRequired = !1 : this.reshapeRequired = !0;
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      if (e = e, n.reshapeRequired) {
	        var t = [],
	            r = e.map(function (e) {
	          return e.rank;
	        });if (-1 === r.indexOf(null)) {
	          for (var i = max$1(r), a = 0, o = e; a < o.length; a++) {
	            for (var s = (h = o[a]).rank, l = 0; l < i - s; ++l) h = expandDims$1(h, 1);t.push(h);
	          }return n.mergeFunction(t);
	        }for (var u = !1, c = 0, p = e; c < p.length; c++) {
	          var h;if (null == (s = (h = p[c]).rank)) {
	            var d = shape(h),
	                g = d[0],
	                f = d.slice(1).concat([g]),
	                m = h.reshape([g].concat(arrayProd(d.slice(1))));m = (m = transpose(m, [1, 0])).reshape(f), t.push(m), u = !0;
	          } else if (s > 1) {
	            var y = range$1(1, s).concat([0]);t.push(transpose(h, y)), u = !0;
	          } else t.push(h);
	        }var v = n.mergeFunction(t),
	            b = v.rank;if (u) if (null == b) {
	          var z = shape(v);f = [g = z[z.length - 1]].concat(z.slice(0, z.length - 1));v = transpose(v.reshape([-1, g]), [1, 0]).reshape(f);
	        } else if (b > 1) {
	          y = [b - 1].concat(range$1(0, b - 1));v = transpose(v, y);
	        }return v;
	      }return n.mergeFunction(e);
	    });
	  }, t.prototype.computeOutputShape = function (e) {
	    var t;t = null == (e = e)[0] ? null : e[0].slice(1);for (var n = 1; n < e.length; ++n) {
	      var r = null == e[n] ? null : e[n].slice(1);t = this.computeElementwiseOpOutputShape(t, r);
	    }for (var i = [], a = 0, o = e; a < o.length; a++) {
	      null != (r = o[a]) && null !== r[0] && i.push(r[0]);
	    }return t = 1 === (i = unique(i)).length ? i.concat(t) : [null].concat(t);
	  }, t;
	}(Layer),
	    Add = function (e) {
	  function t(t) {
	    return e.call(this, t) || this;
	  }return __extends$1(t, e), t.prototype.mergeFunction = function (e) {
	    return tidy(function () {
	      for (var t = zeros(e[0].shape), n = 0, r = e; n < r.length; n++) {
	        var i = r[n];t = add(t, i);
	      }return t;
	    });
	  }, t.className = "Add", t;
	}(Merge);serialization.SerializationMap.register(Add);var Multiply = function (e) {
	  function t(t) {
	    return e.call(this, t) || this;
	  }return __extends$1(t, e), t.prototype.mergeFunction = function (e) {
	    return tidy(function () {
	      for (var t = ones(e[0].shape), n = 0, r = e; n < r.length; n++) {
	        var i = r[n];t = mul(t, i);
	      }return t;
	    });
	  }, t.className = "Multiply", t;
	}(Merge);serialization.SerializationMap.register(Multiply);var Average = function (e) {
	  function t(t) {
	    return e.call(this, t) || this;
	  }return __extends$1(t, e), t.prototype.mergeFunction = function (e) {
	    return tidy(function () {
	      for (var t = zeros(e[0].shape), n = 0, r = e; n < r.length; n++) {
	        var i = r[n];t = add(t, i);
	      }return scalarTimesArray(getScalar(1 / e.length), t);
	    });
	  }, t.className = "Average", t;
	}(Merge);serialization.SerializationMap.register(Average);var Maximum = function (e) {
	  function t(t) {
	    return e.call(this, t) || this;
	  }return __extends$1(t, e), t.prototype.mergeFunction = function (e) {
	    return tidy(function () {
	      for (var t = e[0], n = 1; n < e.length; ++n) t = maximum(t, e[n]);return t;
	    });
	  }, t.className = "Maximum", t;
	}(Merge);serialization.SerializationMap.register(Maximum);var Minimum = function (e) {
	  function t(t) {
	    return e.call(this, t) || this;
	  }return __extends$1(t, e), t.prototype.mergeFunction = function (e) {
	    return tidy(function () {
	      for (var t = e[0], n = 1; n < e.length; ++n) t = minimum(t, e[n]);return t;
	    });
	  }, t.className = "Minimum", t;
	}(Merge);serialization.SerializationMap.register(Minimum);var Concatenate = function (e) {
	  function t(t) {
	    var n = e.call(this, t) || this;return n.DEFAULT_AXIS = -1, null == t && (t = {}), n.axis = null == t.axis ? n.DEFAULT_AXIS : t.axis, n.supportsMasking = !0, n.reshapeRequired = !1, n;
	  }return __extends$1(t, e), t.prototype.build = function (e) {
	    if (!Array.isArray(e) || !Array.isArray(e[0]) || 1 === e.length) throw new ValueError("A `Concatenate` layer should be called on a list of at least 2 inputs");for (var t = !0, n = 0, r = e = e; n < r.length; n++) {
	      if (null != (c = r[n])) {
	        t = !1;break;
	      }
	    }if (!t) {
	      for (var i = [], a = 0; a < e.length; ++a) {
	        var o = e[a].slice();o.splice(this.axis, 1);for (var s = !1, l = 0, u = i; l < u.length; l++) {
	          var c = u[l];if (util.arraysEqual(c, o)) {
	            s = !0;break;
	          }
	        }s || i.push(o);
	      }if (i.length > 1) throw new ValueError("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: " + JSON.stringify(e));
	    }
	  }, t.prototype.mergeFunction = function (e) {
	    var t = this;return tidy(function () {
	      return concatenate(e, t.axis);
	    });
	  }, t.prototype.computeOutputShape = function (e) {
	    if (!Array.isArray(e) || !Array.isArray(e[0])) throw new ValueError("A `Concatenate` layer should be called on a list of inputs.");for (var t = e, n = t[0].slice(), r = this.axis < 0 ? n.length + this.axis : this.axis, i = 0, a = t.slice(1); i < a.length; i++) {
	      var o = a[i];if (null == n[r] || null == o[r]) {
	        n[r] = null;break;
	      }n[r] += o[r];
	    }return n;
	  }, t.prototype.getConfig = function () {
	    var t = { axis: this.axis },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t.className = "Concatenate", t;
	}(Merge);function batchNormalization$1(e, t, n, r, i, a) {
	  var o;if (void 0 === a && (a = .001), 2 === e.rank) o = batchNormalization2d(e, t, n, a, i, r);else if (3 === e.rank) o = batchNormalization3d(e, t, n, a, i, r);else {
	    if (4 !== e.rank) throw new NotImplementedError("batchNormalization is not implememnted for array of rank " + e.rank + " yet");o = batchNormalization4d(e, t, n, a, i, r);
	  }return o;
	}function regularNormalizeBatchInTraining(e, t, n, r, i) {
	  return void 0 === i && (i = .001), tidy(function () {
	    var a = moments(e, r),
	        o = a.mean,
	        s = a.variance;return [batchNormalization$1(e, o, s, n, t, i), o, s];
	  });
	}function broadcastNormalizeBatchInTraining(e, t, n, r, i) {
	  return void 0 === i && (i = .001), tidy(function () {
	    for (var a = moments(e, r), o = a.mean, s = a.variance, l = [], u = 0, c = range$1(0, e.rank); u < c.length; u++) {
	      var p = c[u];-1 !== r.indexOf(p) ? l.push(1) : l.push(e.shape[p]);
	    }var h = o.reshape(l),
	        d = s.reshape(l),
	        g = null == t ? null : t.reshape(l),
	        f = null == n ? null : n.reshape(l);return [batchNormalization$1(e, h, d, f, g, i), o, s];
	  });
	}function normalizeBatchInTraining(e, t, n, r, i) {
	  return void 0 === i && (i = .001), util.arraysEqual(r.slice().sort(), range$1(0, e.rank - 1)) ? regularNormalizeBatchInTraining(e, t, n, r, i) : broadcastNormalizeBatchInTraining(e, t, n, r, i);
	}serialization.SerializationMap.register(Concatenate);var BatchNormalization = function (e) {
	  function t(t) {
	    var n = e.call(this, t) || this;return n.supportsMasking = !0, n.axis = null == t.axis ? -1 : t.axis, n.momentum = null == t.momentum ? .99 : t.momentum, n.epsilon = null == t.epsilon ? .001 : t.epsilon, n.center = null == t.center || t.center, n.scale = null == t.scale || t.scale, n.betaInitializer = getInitializer(t.betaInitializer || "zeros"), n.gammaInitializer = getInitializer(t.gammaInitializer || "ones"), n.movingMeanInitializer = getInitializer(t.movingMeanInitializer || "zeros"), n.movingVarianceInitializer = getInitializer(t.movingVarianceInitializer || "ones"), n.betaConstraint = getConstraint(t.betaConstraint), n.gammaConstraint = getConstraint(t.gammaConstraint), n.betaRegularizer = getRegularizer(t.betaRegularizer), n.gammaRegularizer = getRegularizer(t.gammaRegularizer), n.stepCount = 0, n;
	  }return __extends$1(t, e), t.prototype.build = function (e) {
	    e = getExactlyOneShape(e);var t = this.axis >= 0 ? this.axis : this.axis + e.length,
	        n = e[t];if (null == n) throw new ValueError("Axis " + t + " of input tensor should have a defined dimension but the layer received an input with shape " + JSON.stringify(e) + ".");this.inputSpec = [new InputSpec({ ndim: e.length, axes: (r = {}, r[t] = n, r) })];var r,
	        i = [n];this.scale && (this.gamma = this.addWeight("gamma", i, null, this.gammaInitializer, this.gammaRegularizer, !0, this.gammaConstraint)), this.center && (this.beta = this.addWeight("beta", i, null, this.betaInitializer, this.betaRegularizer, !0, this.betaConstraint)), this.movingMean = this.addWeight("moving_mean", i, null, this.movingMeanInitializer, null, !1), this.movingVariance = this.addWeight("moving_variance", i, null, this.movingVarianceInitializer, null, !1), this.built = !0;
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      var r = null != t.training && t.training,
	          i = getExactlyOneTensor(e),
	          a = shape(i),
	          o = a.length,
	          s = range$1(0, o),
	          l = n.axis >= 0 ? n.axis : n.axis + o;s.splice(l, 1);var u = pyListRepeat(1, o);u[l] = a[l];var c = s.slice();c.sort();var p = !util.arraysEqual(c, range$1(0, o).slice(0, o - 1));if (!r) return function () {
	        if (p) {
	          var e = n.movingMean.read().reshape(u),
	              t = n.movingVariance.read().reshape(u),
	              r = n.center ? n.beta.read().reshape(u) : null,
	              a = n.scale ? n.gamma.read().reshape(u) : null;return batchNormalization$1(i, e, t, r, a, n.epsilon);
	        }return batchNormalization$1(i, n.movingMean.read(), n.movingVariance.read(), null == n.beta ? null : n.beta.read(), null == n.gamma ? null : n.gamma.read(), n.epsilon);
	      }();var h = normalizeBatchInTraining(i, n.gamma.read(), n.beta.read(), s, n.epsilon),
	          d = h[0],
	          g = h[1],
	          f = h[2],
	          m = arrayProd(s.map(function (e) {
	        return i.shape[e];
	      })),
	          y = f.mul(getScalar(m / (m - (1 + n.epsilon))));return function () {
	        n.stepCount++;var e = movingAverage(n.movingMean.read(), g, n.momentum, n.stepCount);n.movingMean.write(e);var t = movingAverage(n.movingVariance.read(), y, n.momentum, n.stepCount);n.movingVariance.write(t);
	      }(), d;
	    });
	  }, t.prototype.getConfig = function () {
	    var t = { axis: this.axis, momentum: this.momentum, epsilon: this.epsilon, center: this.center, scale: this.scale, betaInitializer: serializeInitializer(this.betaInitializer), gammaInitializer: serializeInitializer(this.gammaInitializer), movingMeanInitializer: serializeInitializer(this.movingMeanInitializer), movingVarianceInitializer: serializeInitializer(this.movingVarianceInitializer), betaRegularizer: serializeRegularizer(this.betaRegularizer), gammaRegularizer: serializeRegularizer(this.gammaRegularizer), betaConstraint: serializeConstraint(this.betaConstraint), gammaConstraint: serializeConstraint(this.gammaConstraint) },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t.className = "BatchNormalization", t;
	}(Layer);function spatial2dPadding(e, t, n) {
	  return tidy(function () {
	    if (4 !== e.rank) throw new ValueError("temporalPadding expects input tensor to be 4-D, but received a " + e.rank + "-D tensor.");if (null == t && (t = [[1, 1], [1, 1]]), 2 !== t.length || 2 !== t[0].length || 2 !== t[1].length) throw new ValueError("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if (null == n && (n = imageDataFormat()), "channelsLast" !== n && "channelsFirst" !== n) throw new ValueError("Unknown data format: " + n + ". Supported data formats are 'channelsLast' and 'channelsFirst.");var r;return r = "channelsFirst" === n ? [[0, 0], [0, 0], t[0], t[1]] : [[0, 0], t[0], t[1], [0, 0]], pad(e, r);
	  });
	}serialization.SerializationMap.register(BatchNormalization);var ZeroPadding2D = function (e) {
	  function t(t) {
	    var n = this;if (null == t && (t = {}), (n = e.call(this, t) || this).dataFormat = null == t.dataFormat ? imageDataFormat() : t.dataFormat, null == t.padding) n.padding = [[1, 1], [1, 1]];else if ("number" == typeof t.padding) n.padding = [[t.padding, t.padding], [t.padding, t.padding]];else {
	      if (t.padding = t.padding, 2 !== t.padding.length) throw new ValueError("ZeroPadding2D expects padding to be a length-2 array, but received a length-" + t.padding.length + " array.");var r = void 0,
	          i = void 0;if ("number" == typeof t.padding[0]) r = [t.padding[0], t.padding[0]], i = [t.padding[1], t.padding[1]];else {
	        if (t.padding = t.padding, 2 !== t.padding[0].length) throw new ValueError("ZeroPadding2D expects height padding to be a length-2 array, but received a length-" + t.padding[0].length + " array.");if (r = t.padding[0], 2 !== t.padding[1].length) throw new ValueError("ZeroPadding2D expects width padding to be a length-2 array, but received a length-" + t.padding[1].length + " array.");i = t.padding[1];
	      }n.padding = [r, i];
	    }return n.inputSpec = [new InputSpec({ ndim: 4 })], n;
	  }return __extends$1(t, e), t.prototype.computeOutputShape = function (e) {
	    var t, n;return e = getExactlyOneShape(e), "channelsFirst" === this.dataFormat ? (t = null != e[2] && e[2] >= 0 ? e[2] + this.padding[0][0] + this.padding[0][1] : null, n = null != e[3] && e[3] >= 0 ? e[3] + this.padding[1][0] + this.padding[1][1] : null, [e[0], e[1], t, n]) : (t = null != e[1] && e[1] >= 0 ? e[1] + this.padding[0][0] + this.padding[0][1] : null, n = null != e[2] && e[2] >= 0 ? e[2] + this.padding[1][0] + this.padding[1][1] : null, [e[0], t, n, e[3]]);
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      return spatial2dPadding(getExactlyOneTensor(e), n.padding, n.dataFormat);
	    });
	  }, t.prototype.getConfig = function () {
	    var t = { padding: this.padding, dataFormat: this.dataFormat },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t.className = "ZeroPadding2D", t;
	}(Layer);function pool2d(e, t, n, r, i, a) {
	  return tidy(function () {
	    var o;checkDataFormat(i), checkPoolMode(a), checkPaddingMode(r), null == n && (n = [1, 1]), null == r && (r = "valid"), null == i && (i = imageDataFormat()), null == a && (a = "max"), e = preprocessConv2DInput(e, i);var s = "same" === r ? "same" : "valid";return o = "max" === a ? maxPool(e, t, n, s) : avgPool(e, t, n, s), "channelsFirst" === i && (o = transpose(o, [0, 3, 1, 2])), o;
	  });
	}serialization.SerializationMap.register(ZeroPadding2D);var Pooling1D = function (e) {
	  function t(t) {
	    var n = this;if (null == t.poolSize && (t.poolSize = 2), n = e.call(this, t) || this, "number" == typeof t.poolSize) n.poolSize = [t.poolSize];else {
	      if (!Array.isArray(t.poolSize) || 1 !== t.poolSize.length || "number" != typeof t.poolSize[0]) throw new ValueError("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received " + JSON.stringify(t.poolSize));n.poolSize = t.poolSize;
	    }if (null == t.strides) n.strides = n.poolSize;else if ("number" == typeof t.strides) n.strides = [t.strides];else {
	      if (!Array.isArray(t.strides) || 1 !== t.strides.length || "number" != typeof t.strides[0]) throw new ValueError("strides for 1D convolutional layer must be a number or an Array of a single number, but received " + JSON.stringify(t.strides));n.strides = t.strides;
	    }return n.padding = null == t.padding ? "valid" : t.padding, checkPaddingMode(n.padding), n.inputSpec = [new InputSpec({ ndim: 3 })], n;
	  }return __extends$1(t, e), t.prototype.computeOutputShape = function (e) {
	    var t = convOutputLength((e = getExactlyOneShape(e))[1], this.poolSize[0], this.padding, this.strides[0]);return [e[0], t, e[2]];
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      n.invokeCallHook(e, t), e = expandDims$1(getExactlyOneTensor(e), 2);var r = n.poolingFunction(getExactlyOneTensor(e), [n.poolSize[0], 1], [n.strides[0], 1], n.padding, "channelsLast");return squeeze(r, [2]);
	    });
	  }, t.prototype.getConfig = function () {
	    var t = { poolSize: this.poolSize, padding: this.padding, strides: this.strides },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t;
	}(Layer),
	    MaxPooling1D = function (e) {
	  function t(t) {
	    return e.call(this, t) || this;
	  }return __extends$1(t, e), t.prototype.poolingFunction = function (e, t, n, r, i) {
	    return checkDataFormat(i), checkPaddingMode(r), pool2d(e, t, n, r, i, "max");
	  }, t.className = "MaxPooling1D", t;
	}(Pooling1D);serialization.SerializationMap.register(MaxPooling1D);var AveragePooling1D = function (e) {
	  function t(t) {
	    return e.call(this, t) || this;
	  }return __extends$1(t, e), t.prototype.poolingFunction = function (e, t, n, r, i) {
	    return checkDataFormat(i), checkPaddingMode(r), pool2d(e, t, n, r, i, "avg");
	  }, t.className = "AveragePooling1D", t;
	}(Pooling1D);serialization.SerializationMap.register(AveragePooling1D);var Pooling2D = function (e) {
	  function t(t) {
	    var n = this;if (null == t.poolSize && (t.poolSize = [2, 2]), (n = e.call(this, t) || this).poolSize = Array.isArray(t.poolSize) ? t.poolSize : [t.poolSize, t.poolSize], null == t.strides) n.strides = n.poolSize;else if (Array.isArray(t.strides)) {
	      if (2 !== t.strides.length) throw new ValueError("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length " + t.strides.length + ".");n.strides = t.strides;
	    } else n.strides = [t.strides, t.strides];return n.padding = null == t.padding ? "valid" : t.padding, n.dataFormat = null == t.dataFormat ? "channelsLast" : t.dataFormat, checkDataFormat(n.dataFormat), checkPaddingMode(n.padding), n.inputSpec = [new InputSpec({ ndim: 4 })], n;
	  }return __extends$1(t, e), t.prototype.computeOutputShape = function (e) {
	    e = getExactlyOneShape(e);var t = "channelsFirst" === this.dataFormat ? e[2] : e[1],
	        n = "channelsFirst" === this.dataFormat ? e[3] : e[2];return t = convOutputLength(t, this.poolSize[0], this.padding, this.strides[0]), n = convOutputLength(n, this.poolSize[1], this.padding, this.strides[1]), "channelsFirst" === this.dataFormat ? [e[0], e[1], t, n] : [e[0], t, n, e[3]];
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      return n.invokeCallHook(e, t), n.poolingFunction(getExactlyOneTensor(e), n.poolSize, n.strides, n.padding, n.dataFormat);
	    });
	  }, t.prototype.getConfig = function () {
	    var t = { poolSize: this.poolSize, padding: this.padding, strides: this.strides, dataFormat: this.dataFormat },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t;
	}(Layer),
	    MaxPooling2D = function (e) {
	  function t(t) {
	    return e.call(this, t) || this;
	  }return __extends$1(t, e), t.prototype.poolingFunction = function (e, t, n, r, i) {
	    return checkDataFormat(i), checkPaddingMode(r), pool2d(e, t, n, r, i, "max");
	  }, t.className = "MaxPooling2D", t;
	}(Pooling2D);serialization.SerializationMap.register(MaxPooling2D);var AveragePooling2D = function (e) {
	  function t(t) {
	    return e.call(this, t) || this;
	  }return __extends$1(t, e), t.prototype.poolingFunction = function (e, t, n, r, i) {
	    return checkDataFormat(i), checkPaddingMode(r), pool2d(e, t, n, r, i, "avg");
	  }, t.className = "AveragePooling2D", t;
	}(Pooling2D);serialization.SerializationMap.register(AveragePooling2D);var GlobalPooling1D = function (e) {
	  function t(t) {
	    var n = e.call(this, t) || this;return n.inputSpec = [new InputSpec({ ndim: 3 })], n;
	  }return __extends$1(t, e), t.prototype.computeOutputShape = function (e) {
	    return [e[0], e[2]];
	  }, t.prototype.call = function (e, t) {
	    throw new NotImplementedError();
	  }, t;
	}(Layer),
	    GlobalAveragePooling1D = function (e) {
	  function t(t) {
	    return e.call(this, t) || this;
	  }return __extends$1(t, e), t.prototype.call = function (e, t) {
	    return tidy(function () {
	      var t = getExactlyOneTensor(e);return mean(t, 1);
	    });
	  }, t.className = "GlobalAveragePooling1D", t;
	}(GlobalPooling1D);serialization.SerializationMap.register(GlobalAveragePooling1D);var GlobalMaxPooling1D = function (e) {
	  function t(t) {
	    return e.call(this, t) || this;
	  }return __extends$1(t, e), t.prototype.call = function (e, t) {
	    return tidy(function () {
	      var t = getExactlyOneTensor(e);return max(t, 1);
	    });
	  }, t.className = "GlobalMaxPooling1D", t;
	}(GlobalPooling1D);serialization.SerializationMap.register(GlobalMaxPooling1D);var GlobalPooling2D = function (e) {
	  function t(t) {
	    var n = e.call(this, t) || this;return n.dataFormat = null == t.dataFormat ? "channelsLast" : t.dataFormat, checkDataFormat(n.dataFormat), n.inputSpec = [new InputSpec({ ndim: 4 })], n;
	  }return __extends$1(t, e), t.prototype.computeOutputShape = function (e) {
	    return e = e, "channelsLast" === this.dataFormat ? [e[0], e[3]] : [e[0], e[1]];
	  }, t.prototype.call = function (e, t) {
	    throw new NotImplementedError();
	  }, t.prototype.getConfig = function () {
	    var t = { dataFormat: this.dataFormat },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t;
	}(Layer),
	    GlobalAveragePooling2D = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      var t = getExactlyOneTensor(e);return "channelsLast" === n.dataFormat ? mean(t, [1, 2]) : mean(t, [2, 3]);
	    });
	  }, t.className = "GlobalAveragePooling2D", t;
	}(GlobalPooling2D);serialization.SerializationMap.register(GlobalAveragePooling2D);var GlobalMaxPooling2D = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      var t = getExactlyOneTensor(e);return "channelsLast" === n.dataFormat ? max(t, [1, 2]) : max(t, [2, 3]);
	    });
	  }, t.className = "GlobalMaxPooling2D", t;
	}(GlobalPooling2D);function rnn(e, t, n, r, i, a, o, s) {
	  void 0 === r && (r = !1), void 0 === o && (o = !1);var l = t.shape.length;if (l < 3) throw new ValueError("Input should be at least 3D, but is " + l + "D.");var u,
	      c,
	      p = [1, 0].concat(range$1(2, l));if (t = transpose(t, p), null != i) throw new NotImplementedError("The rnn() function of the deeplearn.js backend does not support masking yet.");if (null != a) throw new NotImplementedError("The rnn() functoin of the deeplearn.js backend does not support constants yet.");o && console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."), r && (t = reverse(t, 0));for (var h = n, d = t.shape[0], g = 0; g < d; ++g) {
	    var f = sliceAlongFirstAxis(t, g, 1),
	        m = e(f = f.reshape(f.shape.slice(1)), h);c = m[0], u = 0 === g ? c.reshape([1].concat(c.shape)) : concatAlongFirstAxis(u, c.reshape([1].concat(c.shape))), h = m[1];
	  }return [c, transpose(u, [1, 0].concat(range$1(2, u.shape.length))), h];
	}serialization.SerializationMap.register(GlobalMaxPooling2D);var RNN = function (e) {
	  function t(t) {
	    var n,
	        r = e.call(this, t) || this;if (null == t.cell) throw new ValueError("cell property is missing for the constructor of RNN.");if (null == (n = Array.isArray(t.cell) ? new StackedRNNCells({ cells: t.cell }) : t.cell).stateSize) throw new ValueError("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");return r.cell = n, r.returnSequences = null != t.returnSequences && t.returnSequences, r.returnState = null != t.returnState && t.returnState, r.goBackwards = null != t.goBackwards && t.goBackwards, r._stateful = null != t.stateful && t.stateful, r.unroll = null != t.unroll && t.unroll, r.supportsMasking = !0, r.inputSpec = [new InputSpec({ ndim: 3 })], r.stateSpec = null, r.states = null, r.numConstants = null, r;
	  }return __extends$1(t, e), t.prototype.getStates = function () {
	    return null == this.states ? range$1(0, Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1).map(function (e) {
	      return null;
	    }) : this.states;
	  }, t.prototype.setStates = function (e) {
	    this.states = e;
	  }, t.prototype.computeOutputShape = function (e) {
	    isArrayOfShapes(e) && (e = e[0]), e = e;var t = this.cell.stateSize;Array.isArray(t) || (t = [t]);var n,
	        r = t[0];if (n = this.returnSequences ? [e[0], e[1], r] : [e[0], r], this.returnState) {
	      for (var i = [], a = 0, o = t; a < o.length; a++) {
	        var s = o[a];i.push([e[0], s]);
	      }return [n].concat(i);
	    }return n;
	  }, t.prototype.computeMask = function (e, t) {
	    throw new NotImplementedError("computeMask has not been implemented for RNN yet");
	  }, t.prototype.build = function (e) {
	    if (null != this.numConstants) throw new NotImplementedError("Constants support is not implemented in RNN yet.");isArrayOfShapes(e) && (e = e[0]), e = e;var t = this.stateful ? e[0] : null,
	        n = e[e.length - 1];this.inputSpec[0] = new InputSpec({ shape: [t, null, n] });var r,
	        i = [e[0]].concat(e.slice(2));if (this.cell.build(i), r = Array.isArray(this.cell.stateSize) ? this.cell.stateSize : [this.cell.stateSize], null != this.stateSpec) {
	      if (!util.arraysEqual(this.stateSpec.map(function (e) {
	        return e.shape[e.shape.length - 1];
	      }), r)) throw new ValueError("An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=" + this.stateSpec + "; However cell.stateSize is " + this.cell.stateSize);
	    } else this.stateSpec = r.map(function (e) {
	      return new InputSpec({ shape: [null, e] });
	    });if (this.stateful) throw new NotImplementedError("stateful RNN layer is not implemented yet");
	  }, t.prototype.resetStates = function (e) {
	    var t = this;tidy(function () {
	      if (!t.stateful) throw new AttributeError("Cannot call resetState() on an RNN Layer that is not stateful.");var n = t.inputSpec[0].shape[0];if (null == n) throw new ValueError("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if (null == t.states) Array.isArray(t.cell.stateSize) ? t.states = t.cell.stateSize.map(function (e) {
	        return zeros([n, e]);
	      }) : t.states = [zeros([n, t.cell.stateSize])];else if (null == e) Array.isArray(t.cell.stateSize) ? t.states = t.cell.stateSize.map(function (e) {
	        return zeros([n, e]);
	      }) : t.states[0] = zeros([n, t.cell.stateSize]);else {
	        if (Array.isArray(e) || (e = [e]), e.length !== t.states.length) throw new ValueError("Layer " + t.name + " expects " + t.states.length + " state(s), but it received " + e.length + " state value(s). Input received: " + e);for (var r = 0; r < t.states.length; ++r) {
	          var i = e[r],
	              a = Array.isArray(t.cell.stateSize) ? t.cell.stateSize[r] : t.cell.stateSize,
	              o = [n, a];if (!util.arraysEqual(i.shape, o)) throw new ValueError("State " + r + " is incompatible with layer " + t.name + ": expected shape=" + o + ", received shape=" + i.shape);t.states[r] = i;
	        }
	      }
	    });
	  }, t.prototype.standardizeArgs = function (e, t, n) {
	    if (Array.isArray(e)) {
	      if (null != t || null != n) throw new ValueError("When inputs is an array, neither initialState or constants should be provided");null != this.numConstants && (n = e.slice(e.length - this.numConstants, e.length), e = e.slice(0, e.length - this.numConstants)), e.length > 1 && (t = e.slice(1, e.length)), e = e[0];
	    }function r(e) {
	      return null == e || Array.isArray(e) ? e : [e];
	    }return { inputs: e, initialState: t = r(t), constants: n = r(n) };
	  }, t.prototype.apply = function (t, n) {
	    var r = null == n ? null : n.initialState,
	        i = null == n ? null : n.constants;null == n && (n = {});var a = this.standardizeArgs(t, r, i);t = a.inputs, r = a.initialState, i = a.constants;var o = [],
	        s = [];if (null != r) {
	      n.initialState = r, o = o.concat(r), this.stateSpec = [];for (var l = 0, u = r; l < u.length; l++) {
	        var c = u[l];this.stateSpec.push(new InputSpec({ shape: c.shape }));
	      }s = s.concat(this.stateSpec);
	    }if (null != i && (n.constants = i, o = o.concat(i), this.numConstants = i.length), o[0] instanceof SymbolicTensor) {
	      var p = [t].concat(o),
	          h = this.inputSpec.concat(s),
	          d = this.inputSpec;this.inputSpec = h;var g = e.prototype.apply.call(this, p, n);return this.inputSpec = d, g;
	    }return e.prototype.apply.call(this, t, n);
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      var r = null == t ? null : t.mask,
	          i = null == t ? null : t.training,
	          a = null == t ? null : t.initialState;if (e = getExactlyOneTensor(e), null == a) {
	        if (n.stateful) throw new NotImplementedError("stateful RNN layer is not implemented yet.");a = n.getInitialState(e);
	      }if (null != r) throw new NotImplementedError("Masking is not implemented for RNN yet");var o = Array.isArray(n.cell.stateSize) ? n.cell.stateSize.length : 1;if (a.length !== o) throw new ValueError("RNN Layer has " + o + " state(s) but was passed " + a.length + " initial state(s).");var s = e.shape[1];n.unroll && console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");var l = { training: i },
	          u = rnn(function (e, t) {
	        var r = n.cell.call([e].concat(t), l);return [r[0], r.slice(1)];
	      }, e, a, n.goBackwards, null, null, n.unroll, s),
	          c = u[0],
	          p = u[1],
	          h = u[2];if (n.stateful) throw new NotImplementedError("stateful RNN layer is not implemented yet");var d = n.returnSequences ? p : c;return n.returnState ? [d].concat(h) : d;
	    });
	  }, t.prototype.getInitialState = function (e) {
	    var t = this;return tidy(function () {
	      var n = zeros(e.shape);return n = expandDims$1(n = sum(n, [1, 2])), Array.isArray(t.cell.stateSize) ? t.cell.stateSize.map(function (e) {
	        return e > 1 ? tile$1(n, [1, e]) : n;
	      }) : t.cell.stateSize > 1 ? [tile$1(n, [1, t.cell.stateSize])] : [n];
	    });
	  }, Object.defineProperty(t.prototype, "trainableWeights", { get: function () {
	      return this.trainable ? this.cell.trainableWeights : [];
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "nonTrainableWeights", { get: function () {
	      return this.trainable ? this.cell.nonTrainableWeights : this.cell.weights;
	    }, enumerable: !0, configurable: !0 }), t.prototype.getConfig = function () {
	    var t = { returnSequences: this.returnSequences, returnState: this.returnState, goBackwards: this.goBackwards, stateful: this.stateful, unroll: this.unroll };null != this.numConstants && (t.numConstants = this.numConstants);var n = this.cell.getConfig();t.cell = { className: this.cell.getClassName(), config: n };var r = e.prototype.getConfig.call(this);return Object.assign(t, r), t;
	  }, t.className = "RNN", t;
	}(Layer);serialization.SerializationMap.register(RNN);var RNNCell = function (e) {
	  function t() {
	    return null !== e && e.apply(this, arguments) || this;
	  }return __extends$1(t, e), t = __decorate$1([doc({ heading: "Layers", subheading: "Classes" })], t);
	}(Layer),
	    SimpleRNNCell = function (e) {
	  function t(t) {
	    var n = e.call(this, t) || this;return n.DEFAULT_ACTIVATION = "tanh", n.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", n.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", n.DEFAULT_BIAS_INITIALIZER = "zeros", n.units = t.units, n.activation = getActivation(null == t.activation ? n.DEFAULT_ACTIVATION : t.activation), n.useBias = null == t.useBias || t.useBias, n.kernelInitializer = getInitializer(t.kernelInitializer || n.DEFAULT_KERNEL_INITIALIZER), n.recurrentInitializer = getInitializer(t.recurrentInitializer || n.DEFAULT_RECURRENT_INITIALIZER), n.biasInitializer = getInitializer(t.biasInitializer || n.DEFAULT_BIAS_INITIALIZER), n.kernelRegularizer = getRegularizer(t.kernelRegularizer), n.recurrentRegularizer = getRegularizer(t.recurrentRegularizer), n.biasRegularizer = getRegularizer(t.biasRegularizer), n.kernelConstraint = getConstraint(t.kernelConstraint), n.recurrentConstraint = getConstraint(t.recurrentConstraint), n.biasConstraint = getConstraint(t.biasConstraint), n.dropout = min$1([1, max$1([0, null == t.dropout ? 0 : t.dropout])]), n.recurrentDropout = min$1([1, max$1([0, null == t.recurrentDropout ? 0 : t.recurrentDropout])]), n.stateSize = n.units, n;
	  }return __extends$1(t, e), t.prototype.build = function (e) {
	    e = getExactlyOneShape(e), this.kernel = this.addWeight("kernel", [e[e.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      if (2 !== (e = e).length) throw new ValueError("SimpleRNNCell expects 2 input Tensors, got " + e.length + ".");var t = e[1];if (e = e[0], 0 !== n.dropout || 0 !== n.recurrentDropout) throw new NotImplementedError("Dropout is not implemented for SimpleRNNCell yet");var r = dot$1(e, n.kernel.read());null != n.bias && (r = biasAdd(r, n.bias.read()));var i = add(r, dot$1(t, n.recurrentKernel.read()));return null != n.activation && (i = n.activation.apply(i)), [i, i];
	    });
	  }, t.prototype.getConfig = function () {
	    var t = { units: this.units, activation: serializeActivation(this.activation), useBias: this.useBias, kernelInitializer: serializeInitializer(this.kernelInitializer), recurrentInitializer: serializeInitializer(this.recurrentInitializer), biasInitializer: serializeInitializer(this.biasInitializer), kernelRegularizer: serializeRegularizer(this.kernelRegularizer), recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer), biasRegularizer: serializeRegularizer(this.biasRegularizer), activityRegularizer: serializeRegularizer(this.activityRegularizer), kernelConstraint: serializeConstraint(this.kernelConstraint), recurrentConstraint: serializeConstraint(this.recurrentConstraint), biasConstraint: serializeConstraint(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t.className = "SimpleRNNCell", t;
	}(RNNCell);serialization.SerializationMap.register(SimpleRNNCell);var SimpleRNN = function (e) {
	  function t(t) {
	    return t.cell = new SimpleRNNCell(t), e.call(this, t) || this;
	  }return __extends$1(t, e), t.prototype.call = function (t, n) {
	    var r = this;return tidy(function () {
	      var i = null == n ? null : n.mask,
	          a = null == n ? null : n.training,
	          o = null == n ? null : n.initialState;return e.prototype.call.call(r, t, { mask: i, training: a, initialState: o });
	    });
	  }, Object.defineProperty(t.prototype, "units", { get: function () {
	      return this.cell.units;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "activation", { get: function () {
	      return this.cell.activation;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "useBias", { get: function () {
	      return this.cell.useBias;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "kernelInitializer", { get: function () {
	      return this.cell.kernelInitializer;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentInitializer", { get: function () {
	      return this.cell.recurrentInitializer;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "biasInitializer", { get: function () {
	      return this.cell.biasInitializer;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "kernelRegularizer", { get: function () {
	      return this.cell.kernelRegularizer;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentRegularizer", { get: function () {
	      return this.cell.recurrentRegularizer;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "biasRegularizer", { get: function () {
	      return this.cell.biasRegularizer;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "kernelConstraint", { get: function () {
	      return this.cell.kernelConstraint;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentConstraint", { get: function () {
	      return this.cell.recurrentConstraint;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "biasConstraint", { get: function () {
	      return this.cell.biasConstraint;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "dropout", { get: function () {
	      return this.cell.dropout;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentDropout", { get: function () {
	      return this.cell.recurrentDropout;
	    }, enumerable: !0, configurable: !0 }), t.prototype.getConfig = function () {
	    var t = { units: this.units, activation: serializeActivation(this.activation), useBias: this.useBias, kernelInitializer: serializeInitializer(this.kernelInitializer), recurrentInitializer: serializeInitializer(this.recurrentInitializer), biasInitializer: serializeInitializer(this.biasInitializer), kernelRegularizer: serializeRegularizer(this.kernelRegularizer), recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer), biasRegularizer: serializeRegularizer(this.biasRegularizer), activityRegularizer: serializeRegularizer(this.activityRegularizer), kernelConstraint: serializeConstraint(this.kernelConstraint), recurrentConstraint: serializeConstraint(this.recurrentConstraint), biasConstraint: serializeConstraint(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout },
	        n = e.prototype.getConfig.call(this);return delete n.cell, Object.assign(t, n), t;
	  }, t.className = "SimpleRNN", t;
	}(RNN);serialization.SerializationMap.register(SimpleRNN);var GRUCell = function (e) {
	  function t(t) {
	    var n = e.call(this, t) || this;return n.DEFAULT_ACTIVATION = "tanh", n.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", n.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", n.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", n.DEFAULT_BIAS_INITIALIZER = "zeros", n.units = t.units, n.activation = getActivation(void 0 === t.activation ? n.DEFAULT_ACTIVATION : t.activation), n.recurrentActivation = getActivation(void 0 === t.recurrentActivation ? n.DEFAULT_RECURRENT_ACTIVATION : t.recurrentActivation), n.useBias = null == t.useBias || t.useBias, n.kernelInitializer = getInitializer(t.kernelInitializer || n.DEFAULT_KERNEL_INITIALIZER), n.recurrentInitializer = getInitializer(t.recurrentInitializer || n.DEFAULT_RECURRENT_INITIALIZER), n.biasInitializer = getInitializer(t.biasInitializer || n.DEFAULT_BIAS_INITIALIZER), n.kernelRegularizer = getRegularizer(t.kernelRegularizer), n.recurrentRegularizer = getRegularizer(t.recurrentRegularizer), n.biasRegularizer = getRegularizer(t.biasRegularizer), n.kernelConstraint = getConstraint(t.kernelConstraint), n.recurrentConstraint = getConstraint(t.recurrentConstraint), n.biasConstraint = getConstraint(t.biasConstraint), n.dropout = min$1([1, max$1([0, null == t.dropout ? 0 : t.dropout])]), n.recurrentDropout = min$1([1, max$1([0, null == t.recurrentDropout ? 0 : t.recurrentDropout])]), n.implementation = t.implementation, n.stateSize = n.units, n;
	  }return __extends$1(t, e), t.prototype.build = function (e) {
	    var t = (e = getExactlyOneShape(e))[e.length - 1];this.kernel = this.addWeight("kernel", [t, 3 * this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, 3 * this.units], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [3 * this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      if (0 !== n.dropout || 0 !== n.recurrentDropout) throw new NotImplementedError("Dropout is not implemented for GRUCell yet");if (2 !== (e = e).length) throw new ValueError("GRUCell expects 2 input Tensors (inputs, h, c), got " + e.length + ".");var t,
	          r,
	          i,
	          a = e[1];if (e = e[0], 1 === n.implementation) {
	        var o = sliceAlongLastAxis(n.kernel.read(), 0, n.units),
	            s = sliceAlongLastAxis(n.kernel.read(), n.units, n.units),
	            l = sliceAlongLastAxis(n.kernel.read(), 2 * n.units, n.units),
	            u = sliceAlongLastAxis(n.recurrentKernel.read(), 0, n.units),
	            c = sliceAlongLastAxis(n.recurrentKernel.read(), n.units, n.units),
	            p = sliceAlongLastAxis(n.recurrentKernel.read(), 2 * n.units, n.units),
	            h = e,
	            d = e,
	            g = dot$1(e, o),
	            f = dot$1(h, s),
	            m = dot$1(d, l);if (n.useBias) {
	          var y = sliceAlongFirstAxis(n.bias.read(), 0, n.units),
	              v = sliceAlongFirstAxis(n.bias.read(), n.units, n.units),
	              b = sliceAlongFirstAxis(n.bias.read(), 2 * n.units, n.units);g = biasAdd(g, y), f = biasAdd(f, v), m = biasAdd(m, b);
	        }var z = a,
	            w = a,
	            S = a;t = n.recurrentActivation.apply(add(g, dot$1(z, u))), r = n.recurrentActivation.apply(add(f, dot$1(w, c))), i = n.activation.apply(add(m, dot$1(mul(r, S), p)));
	      } else {
	        var I = dot$1(e, n.kernel.read());n.useBias && (I = biasAdd(I, n.bias.read()));var _ = dot$1(a, sliceAlongLastAxis(n.recurrentKernel.read(), 0, 2 * n.units)),
	            A = (g = sliceAlongLastAxis(I, 0, n.units), f = sliceAlongLastAxis(I, n.units, n.units), sliceAlongLastAxis(_, 0, n.units)),
	            N = sliceAlongLastAxis(_, n.units, n.units);t = n.recurrentActivation.apply(add(g, A)), r = n.recurrentActivation.apply(add(f, N));m = sliceAlongLastAxis(I, 2 * n.units, n.units);var E = dot$1(mul(r, a), sliceAlongLastAxis(n.recurrentKernel.read(), 2 * n.units, n.units));i = n.activation.apply(add(m, E));
	      }var L = add(mul(t, a), mul(scalarPlusArray(getScalar(1), neg(t)), i));return [L, L];
	    });
	  }, t.prototype.getConfig = function () {
	    var t = { units: this.units, activation: serializeActivation(this.activation), recurrentActivation: serializeActivation(this.recurrentActivation), useBias: this.useBias, kernelInitializer: serializeInitializer(this.kernelInitializer), recurrentInitializer: serializeInitializer(this.recurrentInitializer), biasInitializer: serializeInitializer(this.biasInitializer), kernelRegularizer: serializeRegularizer(this.kernelRegularizer), recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer), biasRegularizer: serializeRegularizer(this.biasRegularizer), activityRegularizer: serializeRegularizer(this.activityRegularizer), kernelConstraint: serializeConstraint(this.kernelConstraint), recurrentConstraint: serializeConstraint(this.recurrentConstraint), biasConstraint: serializeConstraint(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t.className = "GRUCell", t;
	}(RNNCell);serialization.SerializationMap.register(GRUCell);var GRU = function (e) {
	  function t(t) {
	    return 0 === t.implementation && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), t.cell = new GRUCell(t), e.call(this, t) || this;
	  }return __extends$1(t, e), t.prototype.call = function (t, n) {
	    var r = this;return tidy(function () {
	      var i = null == n ? null : n.mask,
	          a = null == n ? null : n.training,
	          o = null == n ? null : n.initialState;return e.prototype.call.call(r, t, { mask: i, training: a, initialState: o });
	    });
	  }, Object.defineProperty(t.prototype, "units", { get: function () {
	      return this.cell.units;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "activation", { get: function () {
	      return this.cell.activation;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentActivation", { get: function () {
	      return this.cell.recurrentActivation;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "useBias", { get: function () {
	      return this.cell.useBias;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "kernelInitializer", { get: function () {
	      return this.cell.kernelInitializer;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentInitializer", { get: function () {
	      return this.cell.recurrentInitializer;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "biasInitializer", { get: function () {
	      return this.cell.biasInitializer;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "kernelRegularizer", { get: function () {
	      return this.cell.kernelRegularizer;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentRegularizer", { get: function () {
	      return this.cell.recurrentRegularizer;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "biasRegularizer", { get: function () {
	      return this.cell.biasRegularizer;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "kernelConstraint", { get: function () {
	      return this.cell.kernelConstraint;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentConstraint", { get: function () {
	      return this.cell.recurrentConstraint;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "biasConstraint", { get: function () {
	      return this.cell.biasConstraint;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "dropout", { get: function () {
	      return this.cell.dropout;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentDropout", { get: function () {
	      return this.cell.recurrentDropout;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "implementation", { get: function () {
	      return this.cell.implementation;
	    }, enumerable: !0, configurable: !0 }), t.prototype.getConfig = function () {
	    var t = { units: this.units, activation: serializeActivation(this.activation), recurrentActivation: serializeActivation(this.recurrentActivation), useBias: this.useBias, kernelInitializer: serializeInitializer(this.kernelInitializer), recurrentInitializer: serializeInitializer(this.recurrentInitializer), biasInitializer: serializeInitializer(this.biasInitializer), kernelRegularizer: serializeRegularizer(this.kernelRegularizer), recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer), biasRegularizer: serializeRegularizer(this.biasRegularizer), activityRegularizer: serializeRegularizer(this.activityRegularizer), kernelConstraint: serializeConstraint(this.kernelConstraint), recurrentConstraint: serializeConstraint(this.recurrentConstraint), biasConstraint: serializeConstraint(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation },
	        n = e.prototype.getConfig.call(this);return delete n.cell, Object.assign(t, n), t;
	  }, t.fromConfig = function (e, t) {
	    return 0 === t.implmentation && (t.implementation = 1), new e(t);
	  }, t.className = "GRU", t;
	}(RNN);serialization.SerializationMap.register(GRU);var LSTMCell = function (e) {
	  function t(t) {
	    var n = e.call(this, t) || this;return n.DEFAULT_ACTIVATION = "tanh", n.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", n.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", n.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", n.DEFAULT_BIAS_INITIALIZER = "zeros", n.units = t.units, n.activation = getActivation(void 0 === t.activation ? n.DEFAULT_ACTIVATION : t.activation), n.recurrentActivation = getActivation(void 0 === t.recurrentActivation ? n.DEFAULT_RECURRENT_ACTIVATION : t.recurrentActivation), n.useBias = null == t.useBias || t.useBias, n.kernelInitializer = getInitializer(t.kernelInitializer || n.DEFAULT_KERNEL_INITIALIZER), n.recurrentInitializer = getInitializer(t.recurrentInitializer || n.DEFAULT_RECURRENT_INITIALIZER), n.biasInitializer = getInitializer(t.biasInitializer || n.DEFAULT_BIAS_INITIALIZER), n.unitForgetBias = t.unitForgetBias, n.kernelRegularizer = getRegularizer(t.kernelRegularizer), n.recurrentRegularizer = getRegularizer(t.recurrentRegularizer), n.biasRegularizer = getRegularizer(t.biasRegularizer), n.kernelConstraint = getConstraint(t.kernelConstraint), n.recurrentConstraint = getConstraint(t.recurrentConstraint), n.biasConstraint = getConstraint(t.biasConstraint), n.dropout = min$1([1, max$1([0, null == t.dropout ? 0 : t.dropout])]), n.recurrentDropout = min$1([1, max$1([0, null == t.recurrentDropout ? 0 : t.recurrentDropout])]), n.implementation = t.implementation, n.stateSize = [n.units, n.units], n;
	  }return __extends$1(t, e), t.prototype.build = function (e) {
	    var t,
	        n,
	        r = (e = getExactlyOneShape(e))[e.length - 1];if (this.kernel = this.addWeight("kernel", [r, 4 * this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, 4 * this.units], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias) {
	      if (this.unitForgetBias) {
	        var i = this.biasInitializer,
	            a = this.units;t = new ((n = function (e) {
	          function t() {
	            return null !== e && e.apply(this, arguments) || this;
	          }return __extends$1(t, e), t.prototype.apply = function (e, t) {
	            var n = i.apply([a]),
	                r = new Ones().apply([a]),
	                o = i.apply([2 * a]);return concatAlongFirstAxis(concatAlongFirstAxis(n, r), o);
	          }, t;
	        }(Initializer)).className = "CustomInit", n)();
	      } else t = this.biasInitializer;this.bias = this.addWeight("bias", [4 * this.units], null, t, this.biasRegularizer, !0, this.biasConstraint);
	    } else this.bias = null;this.built = !0;
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      if (0 !== n.dropout || 0 !== n.recurrentDropout) throw new NotImplementedError("Dropout is not implemented for LSTMCell yet");if (3 !== (e = e).length) throw new ValueError("LSTMCell expects 3 input Tensors (inputs, h, c), got " + e.length + ".");var t,
	          r,
	          i,
	          a,
	          o = e[1],
	          s = e[2];if (e = e[0], 1 === n.implementation) {
	        var l = sliceAlongLastAxis(n.kernel.read(), 0, n.units),
	            u = sliceAlongLastAxis(n.kernel.read(), n.units, n.units),
	            c = sliceAlongLastAxis(n.kernel.read(), 2 * n.units, n.units),
	            p = sliceAlongLastAxis(n.kernel.read(), 3 * n.units, n.units),
	            h = sliceAlongLastAxis(n.recurrentKernel.read(), 0, n.units),
	            d = sliceAlongLastAxis(n.recurrentKernel.read(), n.units, n.units),
	            g = sliceAlongLastAxis(n.recurrentKernel.read(), 2 * n.units, n.units),
	            f = sliceAlongLastAxis(n.recurrentKernel.read(), 3 * n.units, n.units),
	            m = e,
	            y = e,
	            v = e,
	            b = dot$1(e, l),
	            z = dot$1(m, u),
	            w = dot$1(y, c),
	            S = dot$1(v, p);if (n.useBias) {
	          var I = sliceAlongFirstAxis(n.bias.read(), 0, n.units),
	              _ = sliceAlongFirstAxis(n.bias.read(), n.units, n.units),
	              A = sliceAlongFirstAxis(n.bias.read(), 2 * n.units, n.units),
	              N = sliceAlongFirstAxis(n.bias.read(), 3 * n.units, n.units);b = biasAdd(b, I), z = biasAdd(z, _), w = biasAdd(w, A), S = biasAdd(S, N);
	        }var E = o,
	            L = o,
	            C = o,
	            x = o;t = n.recurrentActivation.apply(add(b, dot$1(E, h))), r = n.recurrentActivation.apply(add(z, dot$1(L, d))), i = add(mul(r, s), mul(t, n.activation.apply(add(w, dot$1(C, g))))), a = n.recurrentActivation.apply(add(S, dot$1(x, f)));
	      } else {
	        var k = dot$1(e, n.kernel.read());k = add(k, dot$1(o, n.recurrentKernel.read())), n.useBias && (k = biasAdd(k, n.bias.read()));var T = sliceAlongLastAxis(k, 0, n.units),
	            R = sliceAlongLastAxis(k, n.units, n.units),
	            D = sliceAlongLastAxis(k, 2 * n.units, n.units),
	            O = sliceAlongLastAxis(k, 3 * n.units, n.units);t = n.recurrentActivation.apply(T), r = n.recurrentActivation.apply(R), i = add(mul(r, s), mul(t, n.activation.apply(D))), a = n.recurrentActivation.apply(O);
	      }var M = mul(a, n.activation.apply(i));return [M, M, i];
	    });
	  }, t.prototype.getConfig = function () {
	    var t = { units: this.units, activation: serializeActivation(this.activation), recurrentActivation: serializeActivation(this.recurrentActivation), useBias: this.useBias, kernelInitializer: serializeInitializer(this.kernelInitializer), recurrentInitializer: serializeInitializer(this.recurrentInitializer), biasInitializer: serializeInitializer(this.biasInitializer), unitForgetBias: this.unitForgetBias, kernelRegularizer: serializeRegularizer(this.kernelRegularizer), recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer), biasRegularizer: serializeRegularizer(this.biasRegularizer), activityRegularizer: serializeRegularizer(this.activityRegularizer), kernelConstraint: serializeConstraint(this.kernelConstraint), recurrentConstraint: serializeConstraint(this.recurrentConstraint), biasConstraint: serializeConstraint(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t.className = "LSTMCell", t;
	}(RNNCell);serialization.SerializationMap.register(LSTMCell);var LSTM = function (e) {
	  function t(t) {
	    return 0 === t.implementation && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), t.cell = new LSTMCell(t), e.call(this, t) || this;
	  }return __extends$1(t, e), t.prototype.call = function (t, n) {
	    var r = this;return tidy(function () {
	      var i = null == n ? null : n.mask,
	          a = null == n ? null : n.training,
	          o = null == n ? null : n.initialState;return e.prototype.call.call(r, t, { mask: i, training: a, initialState: o });
	    });
	  }, Object.defineProperty(t.prototype, "units", { get: function () {
	      return this.cell.units;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "activation", { get: function () {
	      return this.cell.activation;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentActivation", { get: function () {
	      return this.cell.recurrentActivation;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "useBias", { get: function () {
	      return this.cell.useBias;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "kernelInitializer", { get: function () {
	      return this.cell.kernelInitializer;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentInitializer", { get: function () {
	      return this.cell.recurrentInitializer;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "biasInitializer", { get: function () {
	      return this.cell.biasInitializer;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "unitForgetBias", { get: function () {
	      return this.cell.unitForgetBias;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "kernelRegularizer", { get: function () {
	      return this.cell.kernelRegularizer;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentRegularizer", { get: function () {
	      return this.cell.recurrentRegularizer;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "biasRegularizer", { get: function () {
	      return this.cell.biasRegularizer;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "kernelConstraint", { get: function () {
	      return this.cell.kernelConstraint;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentConstraint", { get: function () {
	      return this.cell.recurrentConstraint;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "biasConstraint", { get: function () {
	      return this.cell.biasConstraint;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "dropout", { get: function () {
	      return this.cell.dropout;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "recurrentDropout", { get: function () {
	      return this.cell.recurrentDropout;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "implementation", { get: function () {
	      return this.cell.implementation;
	    }, enumerable: !0, configurable: !0 }), t.prototype.getConfig = function () {
	    var t = { units: this.units, activation: serializeActivation(this.activation), recurrentActivation: serializeActivation(this.recurrentActivation), useBias: this.useBias, kernelInitializer: serializeInitializer(this.kernelInitializer), recurrentInitializer: serializeInitializer(this.recurrentInitializer), biasInitializer: serializeInitializer(this.biasInitializer), unitForgetBias: this.unitForgetBias, kernelRegularizer: serializeRegularizer(this.kernelRegularizer), recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer), biasRegularizer: serializeRegularizer(this.biasRegularizer), activityRegularizer: serializeRegularizer(this.activityRegularizer), kernelConstraint: serializeConstraint(this.kernelConstraint), recurrentConstraint: serializeConstraint(this.recurrentConstraint), biasConstraint: serializeConstraint(this.biasConstraint), dropout: this.dropout, recurrentDropout: this.recurrentDropout, implementation: this.implementation },
	        n = e.prototype.getConfig.call(this);return delete n.cell, Object.assign(t, n), t;
	  }, t.fromConfig = function (e, t) {
	    return 0 === t.implmentation && (t.implementation = 1), new e(t);
	  }, t.className = "LSTM", t;
	}(RNN);serialization.SerializationMap.register(LSTM);var StackedRNNCells = function (e) {
	  function t(t) {
	    var n = e.call(this, t) || this;return n.cells = t.cells, n;
	  }return __extends$1(t, e), Object.defineProperty(t.prototype, "stateSize", { get: function () {
	      for (var e = [], t = 0, n = this.cells.slice().reverse(); t < n.length; t++) {
	        var r = n[t];Array.isArray(r.stateSize) ? e.push.apply(e, r.stateSize) : e.push(r.stateSize);
	      }return e;
	    }, enumerable: !0, configurable: !0 }), t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      for (var r = (e = e).slice(1), i = [], a = 0, o = n.cells.slice().reverse(); a < o.length; a++) {
	        var s = o[a];Array.isArray(s.stateSize) ? i.push(r.splice(0, s.stateSize.length)) : i.push(r.splice(0, 1));
	      }i.reverse();for (var l, u = [], c = 0; c < n.cells.length; ++c) {
	        s = n.cells[c];r = i[c], l = 0 === c ? [e[0]].concat(r) : [l[0]].concat(r), l = s.call(l, t), u.push(l.slice(1));
	      }r = [];for (var p = 0, h = u.slice().reverse(); p < h.length; p++) {
	        var d = h[p];r.push.apply(r, d);
	      }return [l[0]].concat(r);
	    });
	  }, t.prototype.build = function (e) {
	    var t;isArrayOfShapes(e) && (e = e[0]), e = e;for (var n = 0, r = this.cells; n < r.length; n++) {
	      var i = r[n];i.build(e), t = Array.isArray(i.stateSize) ? i.stateSize[0] : i.stateSize, e = [e[0], t];
	    }this.built = !0;
	  }, t.prototype.getConfig = function () {
	    for (var t = [], n = 0, r = this.cells; n < r.length; n++) {
	      var i = r[n];t.push({ className: this.getClassName(), config: i.getConfig() });
	    }var a = { cells: t },
	        o = e.prototype.getConfig.call(this);return Object.assign(a, o), a;
	  }, t.fromConfig = function (e, t, n) {
	    void 0 === n && (n = {});for (var r = [], i = 0, a = t.cells; i < a.length; i++) {
	      var o = a[i];r.push(deserialize(o, n));
	    }return new e({ cells: r });
	  }, Object.defineProperty(t.prototype, "trainableWeights", { get: function () {
	      if (!this.trainable) return [];for (var e = [], t = 0, n = this.cells; t < n.length; t++) {
	        var r = n[t];e.push.apply(e, r.trainableWeights);
	      }return e;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "nonTrainableWeights", { get: function () {
	      for (var e = [], t = 0, n = this.cells; t < n.length; t++) {
	        var r = n[t];e.push.apply(e, r.nonTrainableWeights);
	      }if (!this.trainable) {
	        for (var i = [], a = 0, o = this.cells; a < o.length; a++) {
	          r = o[a];i.push.apply(i, r.trainableWeights);
	        }return i.concat(e);
	      }return e;
	    }, enumerable: !0, configurable: !0 }), t.prototype.getWeights = function () {
	    for (var e = [], t = 0, n = this.cells; t < n.length; t++) {
	      var r = n[t];e.push.apply(e, r.weights);
	    }return batchGetValue(e);
	  }, t.prototype.setWeights = function (e) {
	    for (var t = [], n = 0, r = this.cells; n < r.length; n++) for (var i = r[n], a = i.weights.length, o = e.splice(a), s = 0; s < i.weights.length; ++s) t.push([i.weights[s], o[s]]);batchSetValue(t);
	  }, t.className = "StackedRNNCells", t;
	}(RNNCell);serialization.SerializationMap.register(StackedRNNCells);var Wrapper = function (e) {
	  function t(t) {
	    var n = e.call(this, t) || this;return n.layer = t.layer, n;
	  }return __extends$1(t, e), t.prototype.build = function (e) {
	    this.built = !0;
	  }, Object.defineProperty(t.prototype, "trainable", { get: function () {
	      return null != this.layer && this.layer.trainable;
	    }, set: function (e) {
	      null != this.layer && (this.layer.trainable = e);
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "trainableWeights", { get: function () {
	      return this.layer.trainableWeights;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "nonTrainableWeights", { get: function () {
	      return this.layer.nonTrainableWeights;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "updates", { get: function () {
	      return this.layer._updates;
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "losses", { get: function () {
	      return this.layer.losses;
	    }, enumerable: !0, configurable: !0 }), t.prototype.getWeights = function () {
	    return this.layer.getWeights();
	  }, t.prototype.setWeights = function (e) {
	    this.layer.setWeights(e);
	  }, t.prototype.getConfig = function () {
	    var t = { layer: { className: this.layer.getClassName(), config: this.layer.getConfig() } },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t.fromConfig = function (e, t, n) {
	    void 0 === n && (n = {});var r = deserialize(t.layer, n);delete t.layer;var i = { layer: r };return Object.assign(i, t), new e(i);
	  }, t;
	}(Layer),
	    TimeDistributed = function (e) {
	  function t(t) {
	    var n = e.call(this, t) || this;return n.supportsMasking = !0, n;
	  }return __extends$1(t, e), t.prototype.build = function (t) {
	    if ((t = getExactlyOneShape(t)).length < 3) throw new ValueError("TimeDistributed layer expects an input shape >= 3D, but received input shape " + JSON.stringify(t));this.inputSpec = [{ shape: t }];var n = [t[0]].concat(t.slice(2));this.layer.built || (this.layer.build(n), this.layer.built = !0), e.prototype.build.call(this, t);
	  }, t.prototype.computeOutputShape = function (e) {
	    var t = [(e = getExactlyOneShape(e))[0]].concat(e.slice(2)),
	        n = this.layer.computeOutputShape(t),
	        r = e[1];return [n[0], r].concat(n.slice(1));
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      return rnn(function (e, r) {
	        return [n.layer.call(e, t), []];
	      }, e = getExactlyOneTensor(e), [], !1, null, null, !1, e.shape[1])[1];
	    });
	  }, t.className = "TimeDistributed", t;
	}(Wrapper);serialization.SerializationMap.register(TimeDistributed);var VALID_BIDIRECTIONAL_MERGE_MODES = ["sum", "mul", "concat", "ave"];function checkBidirectionalMergeMode(e) {
	  checkStringTypeUnionValue(VALID_BIDIRECTIONAL_MERGE_MODES, "BidirectionalMergeMode", e);
	}var Bidirectional = function (e) {
	  function t(t) {
	    var n = e.call(this, t) || this,
	        r = t.layer.getConfig();if (n.forwardLayer = deserialize({ className: t.layer.getClassName(), config: r }), r.goBackwards = !0 !== r.goBackwards, n.backwardLayer = deserialize({ className: t.layer.getClassName(), config: r }), n.forwardLayer.name = "forward_" + n.forwardLayer.name, n.backwardLayer.name = "backward_" + n.backwardLayer.name, checkBidirectionalMergeMode(t.mergeMode), n.mergeMode = t.mergeMode, t.weights) throw new NotImplementedError("weights support is not implemented for Bidirectional layer yet.");return n._stateful = t.layer.stateful, n.returnSequences = t.layer.returnSequences, n.returnState = t.layer.returnState, n.supportsMasking = !0, n._trainable = !0, n.inputSpec = t.layer.inputSpec, n;
	  }return __extends$1(t, e), Object.defineProperty(t.prototype, "trainable", { get: function () {
	      return this._trainable;
	    }, set: function (e) {
	      this._trainable = e, null != this.forwardLayer && (this.forwardLayer.trainable = e), null != this.backwardLayer && (this.backwardLayer.trainable = e);
	    }, enumerable: !0, configurable: !0 }), t.prototype.getWeights = function () {
	    return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());
	  }, t.prototype.setWeights = function (e) {
	    var t = e.length,
	        n = Math.floor(t / 2);this.forwardLayer.setWeights(e.slice(0, n)), this.backwardLayer.setWeights(e.slice(n));
	  }, t.prototype.computeOutputShape = function (e) {
	    var t,
	        n,
	        r,
	        i = this.forwardLayer.computeOutputShape(e);return Array.isArray(i) && Array.isArray(i[0]) || (i = [i]), i = i, this.returnState ? (r = i.slice(1), t = i[0]) : t = i[0], t = t, "concat" === this.mergeMode ? (t[t.length - 1] *= 2, n = [t]) : n = null == this.mergeMode ? [t, t.slice()] : [t], this.returnState ? null == this.mergeMode ? n.concat(r).concat(r.slice()) : [t].concat(r).concat(r.slice()) : singletonOrArray(n);
	  }, t.prototype.apply = function (t, n) {
	    var r = null;if (null != n && (r = n.initialState), Array.isArray(t) && (r = t.slice(1), t = t[0]), null == r || 0 === r.length) return e.prototype.apply.call(this, t, n);throw new NotImplementedError("The support for initial states is not implemented for Bidirectional layers yet.");
	  }, t.prototype.call = function (e, t) {
	    var n = this;return tidy(function () {
	      if (null != t.mask) throw new NotImplementedError("The support for masking is not implemented for Bidirectional layers yet.");if (null != t.initialState) throw new NotImplementedError("The support for initial states is not implemented for Bidirectional layers yet.");var r,
	          i,
	          a = n.forwardLayer.call(e, t),
	          o = n.backwardLayer.call(e, t);return n.returnState && (Array.isArray(a) && (r = a.slice(1).concat(o.slice(1))), a = a[0], o = o[0]), n.returnSequences && (o = reverse(o, 1)), "concat" === n.mergeMode ? i = concatenate([a, o]) : "sum" === n.mergeMode ? i = add(a, o) : "ave" === n.mergeMode ? i = scalarTimesArray(getScalar(.5), add(a, o)) : "mul" === n.mergeMode ? i = mul(a, o) : null == n.mergeMode && (i = [a, o]), n.returnState ? null == n.mergeMode ? i.concat(r) : [i].concat(r) : i;
	    });
	  }, t.prototype.resetStates = function (e) {
	    this.forwardLayer.resetStates(), this.backwardLayer.resetStates();
	  }, t.prototype.build = function (e) {
	    var t = this;nameScope$1(this.forwardLayer.name, function () {
	      t.forwardLayer.build(e);
	    }), nameScope$1(this.backwardLayer.name, function () {
	      t.backwardLayer.build(e);
	    }), this.built = !0;
	  }, Object.defineProperty(t.prototype, "trainableWeights", { get: function () {
	      return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);
	    }, enumerable: !0, configurable: !0 }), Object.defineProperty(t.prototype, "nonTrainableWeights", { get: function () {
	      return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);
	    }, enumerable: !0, configurable: !0 }), t.prototype.getConfig = function () {
	    var t = { mergeMode: this.mergeMode },
	        n = e.prototype.getConfig.call(this);return Object.assign(t, n), t;
	  }, t.fromConfig = function (e, t) {
	    var n = deserialize(t.layer);if (delete t.layer, null != t.numConstants) throw new NotImplementedError("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");var r = t;return r.layer = n, new e(r);
	  }, t.className = "Bidirectional", t;
	}(Wrapper);function loadModelInternal(e) {
	  return __awaiter$1(this, void 0, void 0, function () {
	    var t;return __generator$1(this, function (n) {
	      if ("string" == typeof e) {
	        if (0 === (t = io.getLoadHandlers(e)).length) t.push(io.browserHTTPRequest(e));else if (t.length > 1) throw new ValueError("Found more than one (" + t.length + ") load handlers for URL '" + e + "'");e = t[0];
	      }return [2, loadModelFromIOHandler(e)];
	    });
	  });
	}function loadModelFromIOHandler(e, t) {
	  return __awaiter$1(this, void 0, void 0, function () {
	    var n, r, i, a, o;return __generator$1(this, function (s) {
	      switch (s.label) {case 0:
	          if (null == e.load) throw new ValueError("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");return [4, e.load()];case 1:
	          if (n = s.sent(), null != (r = n.modelTopology).model_config && (r = r.model_config), i = deserialize(convertPythonicToTs(r), t), null != n.weightData) {
	            if (null == n.weightSpecs) throw new ValueError("Model artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");a = !1, o = !0, i.loadWeights(io.decodeWeights(n.weightData, n.weightSpecs), a, o);
	          }return [2, i];}
	    });
	  });
	}serialization.SerializationMap.register(Bidirectional);var Sequential = function (e) {
	  function t(t) {
	    var n = e.call(this, { inputs: [], outputs: [] }) || this;if (t = t || {}, n.trainable = !0, n._updatable = !0, n.built = !1, n.name = null != t.name ? t.name : getUid("sequential_"), null != t.layers) for (var r = 0, i = t.layers; r < i.length; r++) {
	      var a = i[r];n.add(a);
	    }return n;
	  }return __extends$1(t, e), n = t, t.prototype.add = function (e) {
	    var t,
	        r = e instanceof n || e instanceof Model;if (r) {
	      if (1 !== (t = e).outputs.length) throw new ValueError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if (1 !== t.inputs.length) throw new ValueError("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.");
	    }if (0 === this.outputs.length) {
	      if (0 === e.inboundNodes.length) {
	        if (null == e.batchInputShape) throw new ValueError("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");var i = Input({ batchShape: e.batchInputShape, dtype: e.dtype, name: e.name + "_input" });e.apply(i);
	      }if (r) this.outputs = t.outputs, this.inputs = t.inputs;else {
	        if (1 !== e.inboundNodes.length) throw new ValueError("A layer added to a Sequential model must not already be connected somewhere else. Model received layer " + e.name + " which has " + e.inboundNodes.length + " pre-existing inbound connections.");if (1 !== e.inboundNodes[0].outputTensors.length) throw new ValueError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.outputs = [e.inboundNodes[0].outputTensors[0]], this.inputs = getSourceInputs(this.outputs[0]);
	      }this.inboundNodes = [], new Node({ outboundLayer: this, inboundLayers: [], nodeIndices: [], tensorIndices: [], inputTensors: this.inputs, outputTensors: this.outputs, inputMasks: pyListRepeat(null, this.inputs.length), outputMasks: [null], inputShapes: this.inputs.map(function (e) {
	          return e.shape;
	        }), outputShapes: this.outputs[0].shape });
	    } else {
	      var a = e.apply(this.outputs[0]);if (Array.isArray(a)) throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.outputs = [a], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
	    }this.layers.push(e), this.built = !1;
	  }, t.prototype.pop = function () {
	    if (0 === this.layers.length) throw new TypeError("There are no layers in the model.");if (this.layers.pop(), 0 === this.layers.length) this.outputs = [], this.inboundNodes = [], this.outboundNodes = [];else {
	      var e = this.layers.length - 1;this.layers[e].outboundNodes = [], this.outputs = [this.layers[e].output], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
	    }
	  }, t.prototype.call = function (e, t) {
	    return null == this.model && this.build(), this.model.call(e, t);
	  }, t.prototype.build = function (e) {
	    if (getExactlyOneShape(e), 0 === this.inputs.length || 0 === this.outputs.length) throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model = new Model({ inputs: this.inputs, outputs: this.outputs[0], name: this.name + "_model" }), this.model.trainable = this.trainable, this.model.updatable = this.updatable, this.supportsMasking = this.model.supportsMasking, this.inputLayers = this.model.inputLayers, this.inputLayersNodeIndices = this.model.inputLayersNodeIndices, this.inputLayersTensorIndices = this.model.inputLayersTensorIndices, this.outputLayers = this.model.outputLayers, this.outputLayersNodeIndices = this.model.outputLayersNodeIndices, this.outputLayersTensorIndices = this.model.outputLayersTensorIndices, this.nodesByDepth = this.model.nodesByDepth, this.containerNodes = this.model.containerNodes, this.outputNames = this.model.outputNames, this.inputNames = this.model.inputNames, this.built = !0;
	  }, t.prototype.countParams = function () {
	    return this.built || this.build(), e.prototype.countParams.call(this);
	  }, t.prototype.summary = function (t, n, r) {
	    void 0 === r && (r = console.log), this.built || this.build(), e.prototype.summary.call(this, t, n, r);
	  }, t.prototype.setWeights = function (e) {
	    null == this.model && this.build(), this.model.setWeights(e);
	  }, Object.defineProperty(t.prototype, "updatable", { get: function () {
	      return this._updatable;
	    }, set: function (e) {
	      this.built && (this.model.updatable = e), this._updatable = e;
	    }, enumerable: !0, configurable: !0 }), t.prototype.evaluate = function (e, t, n) {
	    if (void 0 === n && (n = {}), !this.built) throw new RuntimeError("The model needs to be compiled before being used.");return this.model.evaluate(e, t, n);
	  }, t.prototype.predict = function (e, t) {
	    return void 0 === t && (t = {}), null == this.model && this.build(), this.model.predict(e, t);
	  }, t.prototype.predictOnBatch = function (e) {
	    return null == this.model && this.build(), this.model.predictOnBatch(e);
	  }, t.prototype.compile = function (e) {
	    this.build(), this.model.compile(e), this.optimizer = this.model.optimizer, this.loss = this.model.loss, this.metrics = this.model.metrics, this.metricsTensors = this.model.metricsTensors, this.metricsNames = this.model.metricsNames;
	  }, t.prototype.fit = function (e, t, n) {
	    return void 0 === n && (n = {}), __awaiter$1(this, void 0, void 0, function () {
	      return __generator$1(this, function (r) {
	        if (!this.built) throw new RuntimeError("The model needs to be compiled before being used.");return [2, this.model.fit(e, t, n)];
	      });
	    });
	  }, t.fromConfig = function (e, t) {
	    var r = new e({});if (!(r instanceof n)) throw new ValueError("Sequential.fromConfig called on non-Sequential input: " + r);if (!(t instanceof Array)) throw new ValueError("Sequential.fromConfig called without an array of configs");if (null == t[0].className || "Merge" === t[0].className) throw new ValueError("Legacy serialization format not supported yet.");for (var i = 0, a = t; i < a.length; i++) {
	      var o = deserialize(a[i]);r.add(o);
	    }return r;
	  }, t.prototype.getConfig = function () {
	    for (var e = [], t = 0, n = this.layers; t < n.length; t++) {
	      var r = n[t];e.push({ className: r.getClassName(), config: r.getConfig() });
	    }return e;
	  }, t.className = "Sequential", __decorate$1([doc({ heading: "Models", subheading: "Classes" })], t.prototype, "add", null), __decorate$1([doc({ heading: "Models", subheading: "Classes" })], t.prototype, "summary", null), __decorate$1([doc({ heading: "Models", subheading: "Classes", configParamIndices: [2] })], t.prototype, "evaluate", null), __decorate$1([doc({ heading: "Models", subheading: "Classes", configParamIndices: [1] })], t.prototype, "predict", null), __decorate$1([doc({ heading: "Models", subheading: "Classes", configParamIndices: [2] })], t.prototype, "fit", null), t = n = __decorate$1([doc({ heading: "Models", subheading: "Classes" })], t);var n;
	}(Model);serialization.SerializationMap.register(Sequential);var ModelExports = function () {
	  function e() {}return e.model = function (e) {
	    return new Model(e);
	  }, e.sequential = function (e) {
	    return new Sequential(e);
	  }, e.loadModel = function (e) {
	    return loadModelInternal(e);
	  }, e.input = function (e) {
	    return Input(e);
	  }, __decorate$1([doc({ heading: "Models", subheading: "Creation", configParamIndices: [0] })], e, "model", null), __decorate$1([doc({ heading: "Models", subheading: "Creation", configParamIndices: [0] })], e, "sequential", null), __decorate$1([doc({ heading: "Models", subheading: "Loading", useDocsFrom: "loadModelInternal" })], e, "loadModel", null), __decorate$1([doc({ heading: "Models", subheading: "Inputs", useDocsFrom: "Input", configParamIndices: [0] })], e, "input", null), e;
	}(),
	    LayerExports = function () {
	  function e() {}return e.inputLayer = function (e) {
	    return new InputLayer(e);
	  }, e.elu = function (e) {
	    return new ELU$1(e);
	  }, e.leakyReLU = function (e) {
	    return new LeakyReLU(e);
	  }, e.softmax = function (e) {
	    return new Softmax$1(e);
	  }, e.thresholdedReLU = function (e) {
	    return new ThresholdedReLU(e);
	  }, e.conv1d = function (e) {
	    return new Conv1D(e);
	  }, e.conv2d = function (e) {
	    return new Conv2D(e);
	  }, e.conv2dTranspose = function (e) {
	    return new Conv2DTranspose(e);
	  }, e.separableConv2d = function (e) {
	    return new SeparableConv2D(e);
	  }, e.cropping2D = function (e) {
	    return new Cropping2D(e);
	  }, e.upSampling2d = function (e) {
	    return new UpSampling2D(e);
	  }, e.depthwiseConv2d = function (e) {
	    return new DepthwiseConv2D(e);
	  }, e.activation = function (e) {
	    return new Activation$1(e);
	  }, e.dense = function (e) {
	    return new Dense(e);
	  }, e.dropout = function (e) {
	    return new Dropout(e);
	  }, e.flatten = function (e) {
	    return new Flatten(e);
	  }, e.repeatVector = function (e) {
	    return new RepeatVector(e);
	  }, e.reshape = function (e) {
	    return new Reshape(e);
	  }, e.embedding = function (e) {
	    return new Embedding(e);
	  }, e.add = function (e) {
	    return new Add(e);
	  }, e.average = function (e) {
	    return new Average(e);
	  }, e.concatenate = function (e) {
	    return new Concatenate(e);
	  }, e.maximum = function (e) {
	    return new Maximum(e);
	  }, e.minimum = function (e) {
	    return new Minimum(e);
	  }, e.multiply = function (e) {
	    return new Multiply(e);
	  }, e.batchNormalization = function (e) {
	    return new BatchNormalization(e);
	  }, e.zeroPadding2d = function (e) {
	    return new ZeroPadding2D(e);
	  }, e.averagePooling1d = function (e) {
	    return new AveragePooling1D(e);
	  }, e.avgPool1d = function (t) {
	    return e.averagePooling1d(t);
	  }, e.avgPooling1d = function (t) {
	    return e.averagePooling1d(t);
	  }, e.averagePooling2d = function (e) {
	    return new AveragePooling2D(e);
	  }, e.avgPool2d = function (t) {
	    return e.averagePooling2d(t);
	  }, e.avgPooling2d = function (t) {
	    return e.averagePooling2d(t);
	  }, e.globalAveragePooling1d = function (e) {
	    return new GlobalAveragePooling1D(e);
	  }, e.globalAveragePooling2d = function (e) {
	    return new GlobalAveragePooling2D(e);
	  }, e.globalMaxPooling1d = function (e) {
	    return new GlobalMaxPooling1D(e);
	  }, e.globalMaxPooling2d = function (e) {
	    return new GlobalMaxPooling2D(e);
	  }, e.maxPooling1d = function (e) {
	    return new MaxPooling1D(e);
	  }, e.maxPooling2d = function (e) {
	    return new MaxPooling2D(e);
	  }, e.gru = function (e) {
	    return new GRU(e);
	  }, e.gruCell = function (e) {
	    return new GRUCell(e);
	  }, e.lstm = function (e) {
	    return new LSTM(e);
	  }, e.lstmCell = function (e) {
	    return new LSTMCell(e);
	  }, e.simpleRNN = function (e) {
	    return new SimpleRNN(e);
	  }, e.simpleRNNCell = function (e) {
	    return new SimpleRNNCell(e);
	  }, e.rnn = function (e) {
	    return new RNN(e);
	  }, e.stackedRNNCells = function (e) {
	    return new StackedRNNCells(e);
	  }, e.bidirectional = function (e) {
	    return new Bidirectional(e);
	  }, e.timeDistributed = function (e) {
	    return new TimeDistributed(e);
	  }, e.Layer = Layer, e.RNN = RNN, e.RNNCell = RNNCell, e.input = ModelExports.input, __decorate$1([doc({ heading: "Layers", subheading: "Inputs", namespace: "layers", useDocsFrom: "InputLayer", configParamIndices: [0] })], e, "inputLayer", null), __decorate$1([doc({ heading: "Layers", subheading: "Advanced Activation", namespace: "layers", useDocsFrom: "ELU", configParamIndices: [0] })], e, "elu", null), __decorate$1([doc({ heading: "Layers", subheading: "Advanced Activation", namespace: "layers", useDocsFrom: "LeakyReLU", configParamIndices: [0] })], e, "leakyReLU", null), __decorate$1([doc({ heading: "Layers", subheading: "Advanced Activation", namespace: "layers", useDocsFrom: "Softmax", configParamIndices: [0] })], e, "softmax", null), __decorate$1([doc({ heading: "Layers", subheading: "Advanced Activation", namespace: "layers", useDocsFrom: "ThresholdedReLU", configParamIndices: [0] })], e, "thresholdedReLU", null), __decorate$1([doc({ heading: "Layers", subheading: "Convolutional", namespace: "layers", useDocsFrom: "Conv1D", configParamIndices: [0] })], e, "conv1d", null), __decorate$1([doc({ heading: "Layers", subheading: "Convolutional", namespace: "layers", useDocsFrom: "Conv2D", configParamIndices: [0] })], e, "conv2d", null), __decorate$1([doc({ heading: "Layers", subheading: "Convolutional", namespace: "layers", useDocsFrom: "Conv2DTranspose", configParamIndices: [0] })], e, "conv2dTranspose", null), __decorate$1([doc({ heading: "Layers", subheading: "Convolutional", namespace: "layers", useDocsFrom: "SeparableConv2D", configParamIndices: [0] })], e, "separableConv2d", null), __decorate$1([doc({ heading: "Layers", subheading: "Convolutional", namespace: "layers", useDocsFrom: "Cropping2D", configParamIndices: [0] })], e, "cropping2D", null), __decorate$1([doc({ heading: "Layers", subheading: "Convolutional", namespace: "layers", useDocsFrom: "UpSampling2D", configParamIndices: [0] })], e, "upSampling2d", null), __decorate$1([doc({ heading: "Layers", subheading: "Convolutional", namespace: "layers", useDocsFrom: "DepthwiseConv2D", configParamIndices: [0] })], e, "depthwiseConv2d", null), __decorate$1([doc({ heading: "Layers", subheading: "Basic", namespace: "layers", useDocsFrom: "Activation", configParamIndices: [0] })], e, "activation", null), __decorate$1([doc({ heading: "Layers", subheading: "Basic", namespace: "layers", useDocsFrom: "Dense", configParamIndices: [0] })], e, "dense", null), __decorate$1([doc({ heading: "Layers", subheading: "Basic", namespace: "layers", useDocsFrom: "Dropout", configParamIndices: [0] })], e, "dropout", null), __decorate$1([doc({ heading: "Layers", subheading: "Basic", namespace: "layers", useDocsFrom: "Flatten", configParamIndices: [0] })], e, "flatten", null), __decorate$1([doc({ heading: "Layers", subheading: "Basic", namespace: "layers", useDocsFrom: "RepeatVector", configParamIndices: [0] })], e, "repeatVector", null), __decorate$1([doc({ heading: "Layers", subheading: "Basic", namespace: "layers", useDocsFrom: "Reshape", configParamIndices: [0] })], e, "reshape", null), __decorate$1([doc({ heading: "Layers", subheading: "Basic", namespace: "layers", useDocsFrom: "Embedding", configParamIndices: [0] })], e, "embedding", null), __decorate$1([doc({ heading: "Layers", subheading: "Merge", namespace: "layers", useDocsFrom: "Add", configParamIndices: [0] })], e, "add", null), __decorate$1([doc({ heading: "Layers", subheading: "Merge", namespace: "layers", useDocsFrom: "Average", configParamIndices: [0] })], e, "average", null), __decorate$1([doc({ heading: "Layers", subheading: "Merge", namespace: "layers", useDocsFrom: "Concatenate", configParamIndices: [0] })], e, "concatenate", null), __decorate$1([doc({ heading: "Layers", subheading: "Merge", namespace: "layers", useDocsFrom: "Maximum", configParamIndices: [0] })], e, "maximum", null), __decorate$1([doc({ heading: "Layers", subheading: "Merge", namespace: "layers", useDocsFrom: "Minimum", configParamIndices: [0] })], e, "minimum", null), __decorate$1([doc({ heading: "Layers", subheading: "Merge", namespace: "layers", useDocsFrom: "Multiply", configParamIndices: [0] })], e, "multiply", null), __decorate$1([doc({ heading: "Layers", subheading: "Normalization", namespace: "layers", useDocsFrom: "BatchNormalization", configParamIndices: [0] })], e, "batchNormalization", null), __decorate$1([doc({ heading: "Layers", subheading: "Padding", namespace: "layers", useDocsFrom: "ZeroPadding2D", configParamIndices: [0] })], e, "zeroPadding2d", null), __decorate$1([doc({ heading: "Layers", subheading: "Pooling", namespace: "layers", useDocsFrom: "AveragePooling1D", configParamIndices: [0] })], e, "averagePooling1d", null), __decorate$1([doc({ heading: "Layers", subheading: "Pooling", namespace: "layers", useDocsFrom: "AveragePooling2D", configParamIndices: [0] })], e, "averagePooling2d", null), __decorate$1([doc({ heading: "Layers", subheading: "Pooling", namespace: "layers", useDocsFrom: "GlobalAveragePooling1D", configParamIndices: [0] })], e, "globalAveragePooling1d", null), __decorate$1([doc({ heading: "Layers", subheading: "Pooling", namespace: "layers", useDocsFrom: "GlobalAveragePooling2D", configParamIndices: [0] })], e, "globalAveragePooling2d", null), __decorate$1([doc({ heading: "Layers", subheading: "Pooling", namespace: "layers", useDocsFrom: "GlobalMaxPooling1D", configParamIndices: [0] })], e, "globalMaxPooling1d", null), __decorate$1([doc({ heading: "Layers", subheading: "Pooling", namespace: "layers", useDocsFrom: "GlobalMaxPooling2D", configParamIndices: [0] })], e, "globalMaxPooling2d", null), __decorate$1([doc({ heading: "Layers", subheading: "Pooling", namespace: "layers", useDocsFrom: "MaxPooling1D", configParamIndices: [0] })], e, "maxPooling1d", null), __decorate$1([doc({ heading: "Layers", subheading: "Pooling", namespace: "layers", useDocsFrom: "MaxPooling2D", configParamIndices: [0] })], e, "maxPooling2d", null), __decorate$1([doc({ heading: "Layers", subheading: "Recurrent", namespace: "layers", useDocsFrom: "GRU", configParamIndices: [0] })], e, "gru", null), __decorate$1([doc({ heading: "Layers", subheading: "Recurrent", namespace: "layers", useDocsFrom: "GRUCell", configParamIndices: [0] })], e, "gruCell", null), __decorate$1([doc({ heading: "Layers", subheading: "Recurrent", namespace: "layers", useDocsFrom: "LSTM", configParamIndices: [0] })], e, "lstm", null), __decorate$1([doc({ heading: "Layers", subheading: "Recurrent", namespace: "layers", useDocsFrom: "LSTMCell", configParamIndices: [0] })], e, "lstmCell", null), __decorate$1([doc({ heading: "Layers", subheading: "Recurrent", namespace: "layers", useDocsFrom: "SimpleRNN", configParamIndices: [0] })], e, "simpleRNN", null), __decorate$1([doc({ heading: "Layers", subheading: "Recurrent", namespace: "layers", useDocsFrom: "SimpleRNNCell", configParamIndices: [0] })], e, "simpleRNNCell", null), __decorate$1([doc({ heading: "Layers", subheading: "Recurrent", namespace: "layers", useDocsFrom: "RNN", configParamIndices: [0] })], e, "rnn", null), __decorate$1([doc({ heading: "Layers", subheading: "Recurrent", namespace: "layers", useDocsFrom: "RNN", configParamIndices: [0] })], e, "stackedRNNCells", null), __decorate$1([doc({ heading: "Layers", subheading: "Wrapper", namespace: "layers", useDocsFrom: "Bidirectional", configParamIndices: [0] })], e, "bidirectional", null), __decorate$1([doc({ heading: "Layers", subheading: "Wrapper", namespace: "layers", useDocsFrom: "TimeDistributed", configParamIndices: [0] })], e, "timeDistributed", null), e;
	}(),
	    ConstraintExports = function () {
	  function e() {}return e.maxNorm = function (e) {
	    return new MaxNorm(e);
	  }, e.unitNorm = function (e) {
	    return new UnitNorm(e);
	  }, e.nonNeg = function () {
	    return new NonNeg();
	  }, e.minMaxNorm = function (e) {
	    return new MinMaxNorm(e);
	  }, __decorate$1([doc({ heading: "Constraints", namespace: "constraints", useDocsFrom: "MaxNorm", configParamIndices: [0] })], e, "maxNorm", null), __decorate$1([doc({ heading: "Constraints", namespace: "constraints", useDocsFrom: "UnitNorm", configParamIndices: [0] })], e, "unitNorm", null), __decorate$1([doc({ heading: "Constraints", namespace: "constraints", useDocsFrom: "NonNeg" })], e, "nonNeg", null), __decorate$1([doc({ heading: "Constraints", namespace: "constraints", useDocsFrom: "MinMaxNormConfig", configParamIndices: [0] })], e, "minMaxNorm", null), e;
	}(),
	    InitializerExports = function () {
	  function e() {}return e.zeros = function () {
	    return new Zeros();
	  }, e.ones = function () {
	    return new Ones();
	  }, e.constant = function (e) {
	    return new Constant(e);
	  }, e.randomUniform = function (e) {
	    return new RandomUniform(e);
	  }, e.randomNormal = function (e) {
	    return new RandomNormal(e);
	  }, e.truncatedNormal = function (e) {
	    return new TruncatedNormal(e);
	  }, e.identity = function (e) {
	    return new Identity(e);
	  }, e.varianceScaling = function (e) {
	    return new VarianceScaling(e);
	  }, e.glorotUniform = function (e) {
	    return new GlorotUniform(e);
	  }, e.glorotNormal = function (e) {
	    return new GlorotNormal(e);
	  }, e.heNormal = function (e) {
	    return new HeNormal(e);
	  }, e.leCunNormal = function (e) {
	    return new LeCunNormal(e);
	  }, e.orthogonal = function (e) {
	    return new Orthogonal(e);
	  }, __decorate$1([doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "Zeros" })], e, "zeros", null), __decorate$1([doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "Ones" })], e, "ones", null), __decorate$1([doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "Constant", configParamIndices: [0] })], e, "constant", null), __decorate$1([doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "RandomUniform", configParamIndices: [0] })], e, "randomUniform", null), __decorate$1([doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "RandomNormal", configParamIndices: [0] })], e, "randomNormal", null), __decorate$1([doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "TruncatedNormal", configParamIndices: [0] })], e, "truncatedNormal", null), __decorate$1([doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "Identity", configParamIndices: [0] })], e, "identity", null), __decorate$1([doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "VarianceScaling", configParamIndices: [0] })], e, "varianceScaling", null), __decorate$1([doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "GlorotUniform", configParamIndices: [0] })], e, "glorotUniform", null), __decorate$1([doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "GlorotNormal", configParamIndices: [0] })], e, "glorotNormal", null), __decorate$1([doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "HeNormal", configParamIndices: [0] })], e, "heNormal", null), __decorate$1([doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "LeCunNormal", configParamIndices: [0] })], e, "leCunNormal", null), __decorate$1([doc({ heading: "Initializers", namespace: "initializers", useDocsFrom: "Orthogonal", configParamIndices: [0] })], e, "orthogonal", null), e;
	}(),
	    MetricExports = function () {
	  function e() {}return e.binaryAccuracy = function (e, t) {
	    return binaryAccuracy(e, t);
	  }, e.binaryCrossentropy = function (e, t) {
	    return binaryCrossentropy$1(e, t);
	  }, e.categoricalAccuracy = function (e, t) {
	    return categoricalAccuracy(e, t);
	  }, e.categoricalCrossentropy = function (e, t) {
	    return categoricalCrossentropy(e, t);
	  }, e.cosineProximity = function (e, t) {
	    return cosineProximity(e, t);
	  }, e.prototype.meanAbsoluteError = function (e, t) {
	    return meanAbsoluteError(e, t);
	  }, e.prototype.meanAbsolutePercentageError = function (e, t) {
	    return meanAbsolutePercentageError(e, t);
	  }, e.prototype.MAPE = function (e, t) {
	    return meanAbsolutePercentageError(e, t);
	  }, e.prototype.mape = function (e, t) {
	    return meanAbsolutePercentageError(e, t);
	  }, e.meanSquaredError = function (e, t) {
	    return meanSquaredError(e, t);
	  }, e.MSE = function (e, t) {
	    return meanSquaredError(e, t);
	  }, e.mse = function (e, t) {
	    return meanSquaredError(e, t);
	  }, __decorate$1([doc({ heading: "Metrics", namespace: "metrics", useDocsFrom: "meanAbsoluteError" })], e.prototype, "meanAbsoluteError", null), __decorate$1([doc({ heading: "Metrics", namespace: "metrics", useDocsFrom: "meanAbsolutePercentageError" })], e.prototype, "meanAbsolutePercentageError", null), __decorate$1([doc({ heading: "Metrics", namespace: "metrics", useDocsFrom: "binaryAccuracy" })], e, "binaryAccuracy", null), __decorate$1([doc({ heading: "Metrics", namespace: "metrics", useDocsFrom: "binaryCrossentropy" })], e, "binaryCrossentropy", null), __decorate$1([doc({ heading: "Metrics", namespace: "metrics", useDocsFrom: "categoricalAccuracy" })], e, "categoricalAccuracy", null), __decorate$1([doc({ heading: "Metrics", namespace: "metrics", useDocsFrom: "categoricalCrossentropy" })], e, "categoricalCrossentropy", null), __decorate$1([doc({ heading: "Metrics", namespace: "metrics", useDocsFrom: "cosineProximity" })], e, "cosineProximity", null), __decorate$1([doc({ heading: "Metrics", namespace: "metrics", useDocsFrom: "meanSquaredError" })], e, "meanSquaredError", null), e;
	}(),
	    RegularizerExports = function () {
	  function e() {}return e.l1l2 = function (e) {
	    return new L1L2(e);
	  }, e.l1 = function (e) {
	    return l1(e);
	  }, e.l2 = function (e) {
	    return l2(e);
	  }, __decorate$1([doc({ heading: "Regularizers", namespace: "regularizers", useDocsFrom: "L1L2", configParamIndices: [0] })], e, "l1l2", null), __decorate$1([doc({ heading: "Regularizers", namespace: "regularizers", useDocsFrom: "L1L2", configParamIndices: [0] })], e, "l1", null), __decorate$1([doc({ heading: "Regularizers", namespace: "regularizers", useDocsFrom: "L1L2", configParamIndices: [0] })], e, "l2", null), e;
	}(),
	    model = ModelExports.model,
	    sequential = ModelExports.sequential,
	    loadModel = ModelExports.loadModel,
	    input = ModelExports.input,
	    layers = LayerExports,
	    constraints = ConstraintExports,
	    initializers = InitializerExports,
	    metrics = MetricExports,
	    regularizers = RegularizerExports;

	var commonjsGlobal$1 = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule$1(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var punycode = createCommonjsModule$1(function (module, exports) {
	(function (root) {

			/** Detect free variables */
			var freeExports = exports && !exports.nodeType && exports;
			var freeModule = module && !module.nodeType && module;
			var freeGlobal = typeof commonjsGlobal$1 == 'object' && commonjsGlobal$1;
			if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
				root = freeGlobal;
			}

			/**
	   * The `punycode` object.
	   * @name punycode
	   * @type Object
	   */
			var punycode,


			/** Highest positive signed 32-bit float value */
			maxInt = 2147483647,
			    // aka. 0x7FFFFFFF or 2^31-1

			/** Bootstring parameters */
			base = 36,
			    tMin = 1,
			    tMax = 26,
			    skew = 38,
			    damp = 700,
			    initialBias = 72,
			    initialN = 128,
			    // 0x80
			delimiter = '-',
			    // '\x2D'

			/** Regular expressions */
			regexPunycode = /^xn--/,
			    regexNonASCII = /[^\x20-\x7E]/,
			    // unprintable ASCII chars + non-ASCII chars
			regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
			    // RFC 3490 separators

			/** Error messages */
			errors = {
				'overflow': 'Overflow: input needs wider integers to process',
				'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
				'invalid-input': 'Invalid input'
			},


			/** Convenience shortcuts */
			baseMinusTMin = base - tMin,
			    floor = Math.floor,
			    stringFromCharCode = String.fromCharCode,


			/** Temporary variable */
			key;

			/*--------------------------------------------------------------------------*/

			/**
	   * A generic error utility function.
	   * @private
	   * @param {String} type The error type.
	   * @returns {Error} Throws a `RangeError` with the applicable error message.
	   */
			function error(type) {
				throw RangeError(errors[type]);
			}

			/**
	   * A generic `Array#map` utility function.
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} callback The function that gets called for every array
	   * item.
	   * @returns {Array} A new array of values returned by the callback function.
	   */
			function map(array, fn) {
				var length = array.length;
				var result = [];
				while (length--) {
					result[length] = fn(array[length]);
				}
				return result;
			}

			/**
	   * A simple `Array#map`-like wrapper to work with domain name strings or email
	   * addresses.
	   * @private
	   * @param {String} domain The domain name or email address.
	   * @param {Function} callback The function that gets called for every
	   * character.
	   * @returns {Array} A new string of characters returned by the callback
	   * function.
	   */
			function mapDomain(string, fn) {
				var parts = string.split('@');
				var result = '';
				if (parts.length > 1) {
					// In email addresses, only the domain name should be punycoded. Leave
					// the local part (i.e. everything up to `@`) intact.
					result = parts[0] + '@';
					string = parts[1];
				}
				// Avoid `split(regex)` for IE8 compatibility. See #17.
				string = string.replace(regexSeparators, '\x2E');
				var labels = string.split('.');
				var encoded = map(labels, fn).join('.');
				return result + encoded;
			}

			/**
	   * Creates an array containing the numeric code points of each Unicode
	   * character in the string. While JavaScript uses UCS-2 internally,
	   * this function will convert a pair of surrogate halves (each of which
	   * UCS-2 exposes as separate characters) into a single code point,
	   * matching UTF-16.
	   * @see `punycode.ucs2.encode`
	   * @see <https://mathiasbynens.be/notes/javascript-encoding>
	   * @memberOf punycode.ucs2
	   * @name decode
	   * @param {String} string The Unicode input string (UCS-2).
	   * @returns {Array} The new array of code points.
	   */
			function ucs2decode(string) {
				var output = [],
				    counter = 0,
				    length = string.length,
				    value,
				    extra;
				while (counter < length) {
					value = string.charCodeAt(counter++);
					if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
						// high surrogate, and there is a next character
						extra = string.charCodeAt(counter++);
						if ((extra & 0xFC00) == 0xDC00) {
							// low surrogate
							output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
						} else {
							// unmatched surrogate; only append this code unit, in case the next
							// code unit is the high surrogate of a surrogate pair
							output.push(value);
							counter--;
						}
					} else {
						output.push(value);
					}
				}
				return output;
			}

			/**
	   * Creates a string based on an array of numeric code points.
	   * @see `punycode.ucs2.decode`
	   * @memberOf punycode.ucs2
	   * @name encode
	   * @param {Array} codePoints The array of numeric code points.
	   * @returns {String} The new Unicode string (UCS-2).
	   */
			function ucs2encode(array) {
				return map(array, function (value) {
					var output = '';
					if (value > 0xFFFF) {
						value -= 0x10000;
						output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
						value = 0xDC00 | value & 0x3FF;
					}
					output += stringFromCharCode(value);
					return output;
				}).join('');
			}

			/**
	   * Converts a basic code point into a digit/integer.
	   * @see `digitToBasic()`
	   * @private
	   * @param {Number} codePoint The basic numeric code point value.
	   * @returns {Number} The numeric value of a basic code point (for use in
	   * representing integers) in the range `0` to `base - 1`, or `base` if
	   * the code point does not represent a value.
	   */
			function basicToDigit(codePoint) {
				if (codePoint - 48 < 10) {
					return codePoint - 22;
				}
				if (codePoint - 65 < 26) {
					return codePoint - 65;
				}
				if (codePoint - 97 < 26) {
					return codePoint - 97;
				}
				return base;
			}

			/**
	   * Converts a digit/integer into a basic code point.
	   * @see `basicToDigit()`
	   * @private
	   * @param {Number} digit The numeric value of a basic code point.
	   * @returns {Number} The basic code point whose value (when used for
	   * representing integers) is `digit`, which needs to be in the range
	   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	   * used; else, the lowercase form is used. The behavior is undefined
	   * if `flag` is non-zero and `digit` has no uppercase form.
	   */
			function digitToBasic(digit, flag) {
				//  0..25 map to ASCII a..z or A..Z
				// 26..35 map to ASCII 0..9
				return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
			}

			/**
	   * Bias adaptation function as per section 3.4 of RFC 3492.
	   * http://tools.ietf.org/html/rfc3492#section-3.4
	   * @private
	   */
			function adapt(delta, numPoints, firstTime) {
				var k = 0;
				delta = firstTime ? floor(delta / damp) : delta >> 1;
				delta += floor(delta / numPoints);
				for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
					delta = floor(delta / baseMinusTMin);
				}
				return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
			}

			/**
	   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	   * symbols.
	   * @memberOf punycode
	   * @param {String} input The Punycode string of ASCII-only symbols.
	   * @returns {String} The resulting string of Unicode symbols.
	   */
			function decode(input) {
				// Don't use UCS-2
				var output = [],
				    inputLength = input.length,
				    out,
				    i = 0,
				    n = initialN,
				    bias = initialBias,
				    basic,
				    j,
				    index,
				    oldi,
				    w,
				    k,
				    digit,
				    t,

				/** Cached calculation results */
				baseMinusT;

				// Handle the basic code points: let `basic` be the number of input code
				// points before the last delimiter, or `0` if there is none, then copy
				// the first basic code points to the output.

				basic = input.lastIndexOf(delimiter);
				if (basic < 0) {
					basic = 0;
				}

				for (j = 0; j < basic; ++j) {
					// if it's not a basic code point
					if (input.charCodeAt(j) >= 0x80) {
						error('not-basic');
					}
					output.push(input.charCodeAt(j));
				}

				// Main decoding loop: start just after the last delimiter if any basic code
				// points were copied; start at the beginning otherwise.

				for (index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{

					// `index` is the index of the next character to be consumed.
					// Decode a generalized variable-length integer into `delta`,
					// which gets added to `i`. The overflow checking is easier
					// if we increase `i` as we go, then subtract off its starting
					// value at the end to obtain `delta`.
					for (oldi = i, w = 1, k = base;; /* no condition */k += base) {

						if (index >= inputLength) {
							error('invalid-input');
						}

						digit = basicToDigit(input.charCodeAt(index++));

						if (digit >= base || digit > floor((maxInt - i) / w)) {
							error('overflow');
						}

						i += digit * w;
						t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

						if (digit < t) {
							break;
						}

						baseMinusT = base - t;
						if (w > floor(maxInt / baseMinusT)) {
							error('overflow');
						}

						w *= baseMinusT;
					}

					out = output.length + 1;
					bias = adapt(i - oldi, out, oldi == 0);

					// `i` was supposed to wrap around from `out` to `0`,
					// incrementing `n` each time, so we'll fix that now:
					if (floor(i / out) > maxInt - n) {
						error('overflow');
					}

					n += floor(i / out);
					i %= out;

					// Insert `n` at position `i` of the output
					output.splice(i++, 0, n);
				}

				return ucs2encode(output);
			}

			/**
	   * Converts a string of Unicode symbols (e.g. a domain name label) to a
	   * Punycode string of ASCII-only symbols.
	   * @memberOf punycode
	   * @param {String} input The string of Unicode symbols.
	   * @returns {String} The resulting Punycode string of ASCII-only symbols.
	   */
			function encode(input) {
				var n,
				    delta,
				    handledCPCount,
				    basicLength,
				    bias,
				    j,
				    m,
				    q,
				    k,
				    t,
				    currentValue,
				    output = [],

				/** `inputLength` will hold the number of code points in `input`. */
				inputLength,

				/** Cached calculation results */
				handledCPCountPlusOne,
				    baseMinusT,
				    qMinusT;

				// Convert the input in UCS-2 to Unicode
				input = ucs2decode(input);

				// Cache the length
				inputLength = input.length;

				// Initialize the state
				n = initialN;
				delta = 0;
				bias = initialBias;

				// Handle the basic code points
				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue < 0x80) {
						output.push(stringFromCharCode(currentValue));
					}
				}

				handledCPCount = basicLength = output.length;

				// `handledCPCount` is the number of code points that have been handled;
				// `basicLength` is the number of basic code points.

				// Finish the basic string - if it is not empty - with a delimiter
				if (basicLength) {
					output.push(delimiter);
				}

				// Main encoding loop:
				while (handledCPCount < inputLength) {

					// All non-basic code points < n have been handled already. Find the next
					// larger one:
					for (m = maxInt, j = 0; j < inputLength; ++j) {
						currentValue = input[j];
						if (currentValue >= n && currentValue < m) {
							m = currentValue;
						}
					}

					// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
					// but guard against overflow
					handledCPCountPlusOne = handledCPCount + 1;
					if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
						error('overflow');
					}

					delta += (m - n) * handledCPCountPlusOne;
					n = m;

					for (j = 0; j < inputLength; ++j) {
						currentValue = input[j];

						if (currentValue < n && ++delta > maxInt) {
							error('overflow');
						}

						if (currentValue == n) {
							// Represent delta as a generalized variable-length integer
							for (q = delta, k = base;; /* no condition */k += base) {
								t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
								if (q < t) {
									break;
								}
								qMinusT = q - t;
								baseMinusT = base - t;
								output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
								q = floor(qMinusT / baseMinusT);
							}

							output.push(stringFromCharCode(digitToBasic(q, 0)));
							bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
							delta = 0;
							++handledCPCount;
						}
					}

					++delta;
					++n;
				}
				return output.join('');
			}

			/**
	   * Converts a Punycode string representing a domain name or an email address
	   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	   * it doesn't matter if you call it on a string that has already been
	   * converted to Unicode.
	   * @memberOf punycode
	   * @param {String} input The Punycoded domain name or email address to
	   * convert to Unicode.
	   * @returns {String} The Unicode representation of the given Punycode
	   * string.
	   */
			function toUnicode(input) {
				return mapDomain(input, function (string) {
					return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
				});
			}

			/**
	   * Converts a Unicode string representing a domain name or an email address to
	   * Punycode. Only the non-ASCII parts of the domain name will be converted,
	   * i.e. it doesn't matter if you call it with a domain that's already in
	   * ASCII.
	   * @memberOf punycode
	   * @param {String} input The domain name or email address to convert, as a
	   * Unicode string.
	   * @returns {String} The Punycode representation of the given domain name or
	   * email address.
	   */
			function toASCII(input) {
				return mapDomain(input, function (string) {
					return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
				});
			}

			/*--------------------------------------------------------------------------*/

			/** Define the public API */
			punycode = {
				/**
	    * A string representing the current Punycode.js version number.
	    * @memberOf punycode
	    * @type String
	    */
				'version': '1.3.2',
				/**
	    * An object of methods to convert from JavaScript's internal character
	    * representation (UCS-2) to Unicode code points, and back.
	    * @see <https://mathiasbynens.be/notes/javascript-encoding>
	    * @memberOf punycode
	    * @type Object
	    */
				'ucs2': {
					'decode': ucs2decode,
					'encode': ucs2encode
				},
				'decode': decode,
				'encode': encode,
				'toASCII': toASCII,
				'toUnicode': toUnicode
			};

			/** Expose `punycode` */
			// Some AMD build optimizers, like r.js, check for specific condition patterns
			// like the following:
			if (typeof undefined == 'function' && typeof undefined.amd == 'object' && undefined.amd) {
				undefined('punycode', function () {
					return punycode;
				});
			} else if (freeExports && freeModule) {
				if (module.exports == freeExports) {
					// in Node.js or RingoJS v0.8.0+
					freeModule.exports = punycode;
				} else {
					// in Narwhal or RingoJS v0.7.0-
					for (key in punycode) {
						punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
					}
				}
			} else {
				// in Rhino or a web browser
				root.punycode = punycode;
			}
		})(commonjsGlobal$1);
	});

	var util$1 = {
	  isString: function (arg) {
	    return typeof arg === 'string';
	  },
	  isObject: function (arg) {
	    return typeof arg === 'object' && arg !== null;
	  },
	  isNull: function (arg) {
	    return arg === null;
	  },
	  isNullOrUndefined: function (arg) {
	    return arg == null;
	  }
	};

	// Copyright Joyent, Inc. and other Node contributors.

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	var decode = function (qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr,
	        vstr,
	        k,
	        v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};

	// Copyright Joyent, Inc. and other Node contributors.

	var stringifyPrimitive = function (v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	var encode = function (obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function (k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function (v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);
	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
	};

	var querystring = createCommonjsModule$1(function (module, exports) {

	  exports.decode = exports.parse = decode;
	  exports.encode = exports.stringify = encode;
	});
	var querystring_1 = querystring.decode;
	var querystring_2 = querystring.parse;
	var querystring_3 = querystring.encode;
	var querystring_4 = querystring.stringify;

	var parse = urlParse;
	var format = urlFormat;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,


	// Special case for a simple path URL
	simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,


	// RFC 2396: characters reserved for delimiting URLs.
	// We actually just auto-escape these.
	delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],


	// RFC 2396: characters not allowed for various reasons.
	unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),


	// Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	autoEscape = ['\''].concat(unwise),

	// Characters that are never ever allowed in a hostname.
	// Note that any invalid chars are also handled, but these
	// are the ones that are *expected* to be seen, so we fast-path
	// them.
	nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,

	// protocols that can allow "unsafe" and "unwise" chars.
	unsafeProtocol = {
	  'javascript': true,
	  'javascript:': true
	},

	// protocols that never have a hostname.
	hostlessProtocol = {
	  'javascript': true,
	  'javascript:': true
	},

	// protocols that always contain a // bit.
	slashedProtocol = {
	  'http': true,
	  'https': true,
	  'ftp': true,
	  'gopher': true,
	  'file': true,
	  'http:': true,
	  'https:': true,
	  'ftp:': true,
	  'gopher:': true,
	  'file:': true
	};

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && util$1.isObject(url) && url instanceof Url) return url;

	  var u = new Url();
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
	  if (!util$1.isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  // Copy chrome, IE, opera backslash-handling behavior.
	  // Back slashes before the query string get converted to forward slashes
	  // See: https://code.google.com/p/chromium/issues/detail?id=25916
	  var queryIndex = url.indexOf('?'),
	      splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
	      uSplit = url.split(splitter),
	      slashRegex = /\\/g;
	  uSplit[0] = uSplit[0].replace(slashRegex, '/');
	  url = uSplit.join(splitter);

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  if (!slashesDenoteHost && url.split('#').length === 1) {
	    // Try fast path regexp
	    var simplePath = simplePathPattern.exec(rest);
	    if (simplePath) {
	      this.path = rest;
	      this.href = rest;
	      this.pathname = simplePath[1];
	      if (simplePath[2]) {
	        this.search = simplePath[2];
	        if (parseQueryString) {
	          this.query = querystring.parse(this.search.substr(1));
	        } else {
	          this.query = this.search.substr(1);
	        }
	      } else if (parseQueryString) {
	        this.search = '';
	        this.query = {};
	      }
	      return this;
	    }
	  }

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1) hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a punycoded representation of "domain".
	      // It only converts parts of the domain name that
	      // have non-ASCII characters, i.e. it doesn't matter if
	      // you call it with a domain that already is ASCII-only.
	      this.hostname = punycode.toASCII(this.hostname);
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      if (rest.indexOf(ae) === -1) continue;
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }

	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (util$1.isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function () {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query && util$1.isObject(this.query) && Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || query && '?' + query || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function (match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	Url.prototype.resolve = function (relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	Url.prototype.resolveObject = function (relative) {
	  if (util$1.isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  var tkeys = Object.keys(this);
	  for (var tk = 0; tk < tkeys.length; tk++) {
	    var tkey = tkeys[tk];
	    result[tkey] = this[tkey];
	  }

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    var rkeys = Object.keys(relative);
	    for (var rk = 0; rk < rkeys.length; rk++) {
	      var rkey = rkeys[rk];
	      if (rkey !== 'protocol') result[rkey] = relative[rkey];
	    }

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      var keys = Object.keys(relative);
	      for (var v = 0; v < keys.length; v++) {
	        var k = keys[v];
	        result[k] = relative[k];
	      }
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
	      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
	      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = relative.host || relative.host === '' ? relative.host : result.host;
	    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!util$1.isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especially happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!util$1.isNull(result.pathname) || !util$1.isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last === '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/';

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especially happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || result.host && srcPath.length;

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!util$1.isNull(result.pathname) || !util$1.isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function () {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};

	var aspromise = asPromise;

	/**
	 * Callback as used by {@link util.asPromise}.
	 * @typedef asPromiseCallback
	 * @type {function}
	 * @param {Error|null} error Error, if any
	 * @param {...*} params Additional arguments
	 * @returns {undefined}
	 */

	/**
	 * Returns a promise from a node-style callback function.
	 * @memberof util
	 * @param {asPromiseCallback} fn Function to call
	 * @param {*} ctx Function context
	 * @param {...*} params Function arguments
	 * @returns {Promise<*>} Promisified function
	 */
	function asPromise(fn, ctx /*, varargs */) {
	    var params = new Array(arguments.length - 1),
	        offset = 0,
	        index = 2,
	        pending = true;
	    while (index < arguments.length) params[offset++] = arguments[index++];
	    return new Promise(function executor(resolve, reject) {
	        params[offset] = function callback(err /*, varargs */) {
	            if (pending) {
	                pending = false;
	                if (err) reject(err);else {
	                    var params = new Array(arguments.length - 1),
	                        offset = 0;
	                    while (offset < params.length) params[offset++] = arguments[offset];
	                    resolve.apply(null, params);
	                }
	            }
	        };
	        try {
	            fn.apply(ctx || null, params);
	        } catch (err) {
	            if (pending) {
	                pending = false;
	                reject(err);
	            }
	        }
	    });
	}

	var base64_1 = createCommonjsModule$1(function (module, exports) {

	    /**
	     * A minimal base64 implementation for number arrays.
	     * @memberof util
	     * @namespace
	     */

	    var base64 = exports;

	    /**
	     * Calculates the byte length of a base64 encoded string.
	     * @param {string} string Base64 encoded string
	     * @returns {number} Byte length
	     */
	    base64.length = function length(string) {
	        var p = string.length;
	        if (!p) return 0;
	        var n = 0;
	        while (--p % 4 > 1 && string.charAt(p) === "=") ++n;
	        return Math.ceil(string.length * 3) / 4 - n;
	    };

	    // Base64 encoding table
	    var b64 = new Array(64);

	    // Base64 decoding table
	    var s64 = new Array(123);

	    // 65..90, 97..122, 48..57, 43, 47
	    for (var i = 0; i < 64;) s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

	    /**
	     * Encodes a buffer to a base64 encoded string.
	     * @param {Uint8Array} buffer Source buffer
	     * @param {number} start Source start
	     * @param {number} end Source end
	     * @returns {string} Base64 encoded string
	     */
	    base64.encode = function encode(buffer, start, end) {
	        var parts = null,
	            chunk = [];
	        var i = 0,
	            // output index
	        j = 0,
	            // goto index
	        t; // temporary
	        while (start < end) {
	            var b = buffer[start++];
	            switch (j) {
	                case 0:
	                    chunk[i++] = b64[b >> 2];
	                    t = (b & 3) << 4;
	                    j = 1;
	                    break;
	                case 1:
	                    chunk[i++] = b64[t | b >> 4];
	                    t = (b & 15) << 2;
	                    j = 2;
	                    break;
	                case 2:
	                    chunk[i++] = b64[t | b >> 6];
	                    chunk[i++] = b64[b & 63];
	                    j = 0;
	                    break;
	            }
	            if (i > 8191) {
	                (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
	                i = 0;
	            }
	        }
	        if (j) {
	            chunk[i++] = b64[t];
	            chunk[i++] = 61;
	            if (j === 1) chunk[i++] = 61;
	        }
	        if (parts) {
	            if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
	            return parts.join("");
	        }
	        return String.fromCharCode.apply(String, chunk.slice(0, i));
	    };

	    var invalidEncoding = "invalid encoding";

	    /**
	     * Decodes a base64 encoded string to a buffer.
	     * @param {string} string Source string
	     * @param {Uint8Array} buffer Destination buffer
	     * @param {number} offset Destination offset
	     * @returns {number} Number of bytes written
	     * @throws {Error} If encoding is invalid
	     */
	    base64.decode = function decode(string, buffer, offset) {
	        var start = offset;
	        var j = 0,
	            // goto index
	        t; // temporary
	        for (var i = 0; i < string.length;) {
	            var c = string.charCodeAt(i++);
	            if (c === 61 && j > 1) break;
	            if ((c = s64[c]) === undefined) throw Error(invalidEncoding);
	            switch (j) {
	                case 0:
	                    t = c;
	                    j = 1;
	                    break;
	                case 1:
	                    buffer[offset++] = t << 2 | (c & 48) >> 4;
	                    t = c;
	                    j = 2;
	                    break;
	                case 2:
	                    buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
	                    t = c;
	                    j = 3;
	                    break;
	                case 3:
	                    buffer[offset++] = (t & 3) << 6 | c;
	                    j = 0;
	                    break;
	            }
	        }
	        if (j === 1) throw Error(invalidEncoding);
	        return offset - start;
	    };

	    /**
	     * Tests if the specified string appears to be base64 encoded.
	     * @param {string} string String to test
	     * @returns {boolean} `true` if probably base64 encoded, otherwise false
	     */
	    base64.test = function test(string) {
	        return (/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string)
	        );
	    };
	});

	var eventemitter = EventEmitter;

	/**
	 * Constructs a new event emitter instance.
	 * @classdesc A minimal event emitter.
	 * @memberof util
	 * @constructor
	 */
	function EventEmitter() {

	    /**
	     * Registered listeners.
	     * @type {Object.<string,*>}
	     * @private
	     */
	    this._listeners = {};
	}

	/**
	 * Registers an event listener.
	 * @param {string} evt Event name
	 * @param {function} fn Listener
	 * @param {*} [ctx] Listener context
	 * @returns {util.EventEmitter} `this`
	 */
	EventEmitter.prototype.on = function on(evt, fn, ctx) {
	    (this._listeners[evt] || (this._listeners[evt] = [])).push({
	        fn: fn,
	        ctx: ctx || this
	    });
	    return this;
	};

	/**
	 * Removes an event listener or any matching listeners if arguments are omitted.
	 * @param {string} [evt] Event name. Removes all listeners if omitted.
	 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
	 * @returns {util.EventEmitter} `this`
	 */
	EventEmitter.prototype.off = function off(evt, fn) {
	    if (evt === undefined) this._listeners = {};else {
	        if (fn === undefined) this._listeners[evt] = [];else {
	            var listeners = this._listeners[evt];
	            for (var i = 0; i < listeners.length;) if (listeners[i].fn === fn) listeners.splice(i, 1);else ++i;
	        }
	    }
	    return this;
	};

	/**
	 * Emits an event by calling its listeners with the specified arguments.
	 * @param {string} evt Event name
	 * @param {...*} args Arguments
	 * @returns {util.EventEmitter} `this`
	 */
	EventEmitter.prototype.emit = function emit(evt) {
	    var listeners = this._listeners[evt];
	    if (listeners) {
	        var args = [],
	            i = 1;
	        for (; i < arguments.length;) args.push(arguments[i++]);
	        for (i = 0; i < listeners.length;) listeners[i].fn.apply(listeners[i++].ctx, args);
	    }
	    return this;
	};

	var float_1 = factory(factory);

	/**
	 * Reads / writes floats / doubles from / to buffers.
	 * @name util.float
	 * @namespace
	 */

	/**
	 * Writes a 32 bit float to a buffer using little endian byte order.
	 * @name util.float.writeFloatLE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Writes a 32 bit float to a buffer using big endian byte order.
	 * @name util.float.writeFloatBE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Reads a 32 bit float from a buffer using little endian byte order.
	 * @name util.float.readFloatLE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	/**
	 * Reads a 32 bit float from a buffer using big endian byte order.
	 * @name util.float.readFloatBE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	/**
	 * Writes a 64 bit double to a buffer using little endian byte order.
	 * @name util.float.writeDoubleLE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Writes a 64 bit double to a buffer using big endian byte order.
	 * @name util.float.writeDoubleBE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Reads a 64 bit double from a buffer using little endian byte order.
	 * @name util.float.readDoubleLE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	/**
	 * Reads a 64 bit double from a buffer using big endian byte order.
	 * @name util.float.readDoubleBE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	// Factory function for the purpose of node-based testing in modified global environments
	function factory(exports) {

	    // float: typed array
	    if (typeof Float32Array !== "undefined") (function () {

	        var f32 = new Float32Array([-0]),
	            f8b = new Uint8Array(f32.buffer),
	            le = f8b[3] === 128;

	        function writeFloat_f32_cpy(val, buf, pos) {
	            f32[0] = val;
	            buf[pos] = f8b[0];
	            buf[pos + 1] = f8b[1];
	            buf[pos + 2] = f8b[2];
	            buf[pos + 3] = f8b[3];
	        }

	        function writeFloat_f32_rev(val, buf, pos) {
	            f32[0] = val;
	            buf[pos] = f8b[3];
	            buf[pos + 1] = f8b[2];
	            buf[pos + 2] = f8b[1];
	            buf[pos + 3] = f8b[0];
	        }

	        /* istanbul ignore next */
	        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
	        /* istanbul ignore next */
	        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

	        function readFloat_f32_cpy(buf, pos) {
	            f8b[0] = buf[pos];
	            f8b[1] = buf[pos + 1];
	            f8b[2] = buf[pos + 2];
	            f8b[3] = buf[pos + 3];
	            return f32[0];
	        }

	        function readFloat_f32_rev(buf, pos) {
	            f8b[3] = buf[pos];
	            f8b[2] = buf[pos + 1];
	            f8b[1] = buf[pos + 2];
	            f8b[0] = buf[pos + 3];
	            return f32[0];
	        }

	        /* istanbul ignore next */
	        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
	        /* istanbul ignore next */
	        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

	        // float: ieee754
	    })();else (function () {

	        function writeFloat_ieee754(writeUint, val, buf, pos) {
	            var sign = val < 0 ? 1 : 0;
	            if (sign) val = -val;
	            if (val === 0) writeUint(1 / val > 0 ? /* positive */0 : /* negative 0 */2147483648, buf, pos);else if (isNaN(val)) writeUint(2143289344, buf, pos);else if (val > 3.4028234663852886e+38) // +-Infinity
	                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);else if (val < 1.1754943508222875e-38) // denormal
	                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);else {
	                var exponent = Math.floor(Math.log(val) / Math.LN2),
	                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
	                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
	            }
	        }

	        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
	        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

	        function readFloat_ieee754(readUint, buf, pos) {
	            var uint = readUint(buf, pos),
	                sign = (uint >> 31) * 2 + 1,
	                exponent = uint >>> 23 & 255,
	                mantissa = uint & 8388607;
	            return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal
	            ? sign * 1.401298464324817e-45 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
	        }

	        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
	        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
	    })();

	    // double: typed array
	    if (typeof Float64Array !== "undefined") (function () {

	        var f64 = new Float64Array([-0]),
	            f8b = new Uint8Array(f64.buffer),
	            le = f8b[7] === 128;

	        function writeDouble_f64_cpy(val, buf, pos) {
	            f64[0] = val;
	            buf[pos] = f8b[0];
	            buf[pos + 1] = f8b[1];
	            buf[pos + 2] = f8b[2];
	            buf[pos + 3] = f8b[3];
	            buf[pos + 4] = f8b[4];
	            buf[pos + 5] = f8b[5];
	            buf[pos + 6] = f8b[6];
	            buf[pos + 7] = f8b[7];
	        }

	        function writeDouble_f64_rev(val, buf, pos) {
	            f64[0] = val;
	            buf[pos] = f8b[7];
	            buf[pos + 1] = f8b[6];
	            buf[pos + 2] = f8b[5];
	            buf[pos + 3] = f8b[4];
	            buf[pos + 4] = f8b[3];
	            buf[pos + 5] = f8b[2];
	            buf[pos + 6] = f8b[1];
	            buf[pos + 7] = f8b[0];
	        }

	        /* istanbul ignore next */
	        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
	        /* istanbul ignore next */
	        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

	        function readDouble_f64_cpy(buf, pos) {
	            f8b[0] = buf[pos];
	            f8b[1] = buf[pos + 1];
	            f8b[2] = buf[pos + 2];
	            f8b[3] = buf[pos + 3];
	            f8b[4] = buf[pos + 4];
	            f8b[5] = buf[pos + 5];
	            f8b[6] = buf[pos + 6];
	            f8b[7] = buf[pos + 7];
	            return f64[0];
	        }

	        function readDouble_f64_rev(buf, pos) {
	            f8b[7] = buf[pos];
	            f8b[6] = buf[pos + 1];
	            f8b[5] = buf[pos + 2];
	            f8b[4] = buf[pos + 3];
	            f8b[3] = buf[pos + 4];
	            f8b[2] = buf[pos + 5];
	            f8b[1] = buf[pos + 6];
	            f8b[0] = buf[pos + 7];
	            return f64[0];
	        }

	        /* istanbul ignore next */
	        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
	        /* istanbul ignore next */
	        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

	        // double: ieee754
	    })();else (function () {

	        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
	            var sign = val < 0 ? 1 : 0;
	            if (sign) val = -val;
	            if (val === 0) {
	                writeUint(0, buf, pos + off0);
	                writeUint(1 / val > 0 ? /* positive */0 : /* negative 0 */2147483648, buf, pos + off1);
	            } else if (isNaN(val)) {
	                writeUint(0, buf, pos + off0);
	                writeUint(2146959360, buf, pos + off1);
	            } else if (val > 1.7976931348623157e+308) {
	                // +-Infinity
	                writeUint(0, buf, pos + off0);
	                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
	            } else {
	                var mantissa;
	                if (val < 2.2250738585072014e-308) {
	                    // denormal
	                    mantissa = val / 5e-324;
	                    writeUint(mantissa >>> 0, buf, pos + off0);
	                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
	                } else {
	                    var exponent = Math.floor(Math.log(val) / Math.LN2);
	                    if (exponent === 1024) exponent = 1023;
	                    mantissa = val * Math.pow(2, -exponent);
	                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
	                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
	                }
	            }
	        }

	        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
	        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

	        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
	            var lo = readUint(buf, pos + off0),
	                hi = readUint(buf, pos + off1);
	            var sign = (hi >> 31) * 2 + 1,
	                exponent = hi >>> 20 & 2047,
	                mantissa = 4294967296 * (hi & 1048575) + lo;
	            return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal
	            ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
	        }

	        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
	        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
	    })();

	    return exports;
	}

	// uint helpers

	function writeUintLE(val, buf, pos) {
	    buf[pos] = val & 255;
	    buf[pos + 1] = val >>> 8 & 255;
	    buf[pos + 2] = val >>> 16 & 255;
	    buf[pos + 3] = val >>> 24;
	}

	function writeUintBE(val, buf, pos) {
	    buf[pos] = val >>> 24;
	    buf[pos + 1] = val >>> 16 & 255;
	    buf[pos + 2] = val >>> 8 & 255;
	    buf[pos + 3] = val & 255;
	}

	function readUintLE(buf, pos) {
	    return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
	}

	function readUintBE(buf, pos) {
	    return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
	}

	var inquire_1 = inquire;

	/**
	 * Requires a module only if available.
	 * @memberof util
	 * @param {string} moduleName Module to require
	 * @returns {?Object} Required module if available and not empty, otherwise `null`
	 */
	function inquire(moduleName) {
	    try {
	        var mod = eval("quire".replace(/^/, "re"))(moduleName); // eslint-disable-line no-eval
	        if (mod && (mod.length || Object.keys(mod).length)) return mod;
	    } catch (e) {} // eslint-disable-line no-empty
	    return null;
	}

	var utf8_1 = createCommonjsModule$1(function (module, exports) {

	    /**
	     * A minimal UTF8 implementation for number arrays.
	     * @memberof util
	     * @namespace
	     */

	    var utf8 = exports;

	    /**
	     * Calculates the UTF8 byte length of a string.
	     * @param {string} string String
	     * @returns {number} Byte length
	     */
	    utf8.length = function utf8_length(string) {
	        var len = 0,
	            c = 0;
	        for (var i = 0; i < string.length; ++i) {
	            c = string.charCodeAt(i);
	            if (c < 128) len += 1;else if (c < 2048) len += 2;else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
	                ++i;
	                len += 4;
	            } else len += 3;
	        }
	        return len;
	    };

	    /**
	     * Reads UTF8 bytes as a string.
	     * @param {Uint8Array} buffer Source buffer
	     * @param {number} start Source start
	     * @param {number} end Source end
	     * @returns {string} String read
	     */
	    utf8.read = function utf8_read(buffer, start, end) {
	        var len = end - start;
	        if (len < 1) return "";
	        var parts = null,
	            chunk = [],
	            i = 0,
	            // char offset
	        t; // temporary
	        while (start < end) {
	            t = buffer[start++];
	            if (t < 128) chunk[i++] = t;else if (t > 191 && t < 224) chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;else if (t > 239 && t < 365) {
	                t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
	                chunk[i++] = 0xD800 + (t >> 10);
	                chunk[i++] = 0xDC00 + (t & 1023);
	            } else chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
	            if (i > 8191) {
	                (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
	                i = 0;
	            }
	        }
	        if (parts) {
	            if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
	            return parts.join("");
	        }
	        return String.fromCharCode.apply(String, chunk.slice(0, i));
	    };

	    /**
	     * Writes a string as UTF8 bytes.
	     * @param {string} string Source string
	     * @param {Uint8Array} buffer Destination buffer
	     * @param {number} offset Destination offset
	     * @returns {number} Bytes written
	     */
	    utf8.write = function utf8_write(string, buffer, offset) {
	        var start = offset,
	            c1,
	            // character 1
	        c2; // character 2
	        for (var i = 0; i < string.length; ++i) {
	            c1 = string.charCodeAt(i);
	            if (c1 < 128) {
	                buffer[offset++] = c1;
	            } else if (c1 < 2048) {
	                buffer[offset++] = c1 >> 6 | 192;
	                buffer[offset++] = c1 & 63 | 128;
	            } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
	                c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
	                ++i;
	                buffer[offset++] = c1 >> 18 | 240;
	                buffer[offset++] = c1 >> 12 & 63 | 128;
	                buffer[offset++] = c1 >> 6 & 63 | 128;
	                buffer[offset++] = c1 & 63 | 128;
	            } else {
	                buffer[offset++] = c1 >> 12 | 224;
	                buffer[offset++] = c1 >> 6 & 63 | 128;
	                buffer[offset++] = c1 & 63 | 128;
	            }
	        }
	        return offset - start;
	    };
	});

	var pool_1 = pool;

	/**
	 * An allocator as used by {@link util.pool}.
	 * @typedef PoolAllocator
	 * @type {function}
	 * @param {number} size Buffer size
	 * @returns {Uint8Array} Buffer
	 */

	/**
	 * A slicer as used by {@link util.pool}.
	 * @typedef PoolSlicer
	 * @type {function}
	 * @param {number} start Start offset
	 * @param {number} end End offset
	 * @returns {Uint8Array} Buffer slice
	 * @this {Uint8Array}
	 */

	/**
	 * A general purpose buffer pool.
	 * @memberof util
	 * @function
	 * @param {PoolAllocator} alloc Allocator
	 * @param {PoolSlicer} slice Slicer
	 * @param {number} [size=8192] Slab size
	 * @returns {PoolAllocator} Pooled allocator
	 */
	function pool(alloc, slice, size) {
	    var SIZE = size || 8192;
	    var MAX = SIZE >>> 1;
	    var slab = null;
	    var offset = SIZE;
	    return function pool_alloc(size) {
	        if (size < 1 || size > MAX) return alloc(size);
	        if (offset + size > SIZE) {
	            slab = alloc(SIZE);
	            offset = 0;
	        }
	        var buf = slice.call(slab, offset, offset += size);
	        if (offset & 7) // align to 32 bit
	            offset = (offset | 7) + 1;
	        return buf;
	    };
	}

	var longbits = LongBits;

	/**
	 * Constructs new long bits.
	 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
	 * @memberof util
	 * @constructor
	 * @param {number} lo Low 32 bits, unsigned
	 * @param {number} hi High 32 bits, unsigned
	 */
	function LongBits(lo, hi) {

	    // note that the casts below are theoretically unnecessary as of today, but older statically
	    // generated converter code might still call the ctor with signed 32bits. kept for compat.

	    /**
	     * Low bits.
	     * @type {number}
	     */
	    this.lo = lo >>> 0;

	    /**
	     * High bits.
	     * @type {number}
	     */
	    this.hi = hi >>> 0;
	}

	/**
	 * Zero bits.
	 * @memberof util.LongBits
	 * @type {util.LongBits}
	 */
	var zero = LongBits.zero = new LongBits(0, 0);

	zero.toNumber = function () {
	    return 0;
	};
	zero.zzEncode = zero.zzDecode = function () {
	    return this;
	};
	zero.length = function () {
	    return 1;
	};

	/**
	 * Zero hash.
	 * @memberof util.LongBits
	 * @type {string}
	 */
	var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

	/**
	 * Constructs new long bits from the specified number.
	 * @param {number} value Value
	 * @returns {util.LongBits} Instance
	 */
	LongBits.fromNumber = function fromNumber(value) {
	    if (value === 0) return zero;
	    var sign = value < 0;
	    if (sign) value = -value;
	    var lo = value >>> 0,
	        hi = (value - lo) / 4294967296 >>> 0;
	    if (sign) {
	        hi = ~hi >>> 0;
	        lo = ~lo >>> 0;
	        if (++lo > 4294967295) {
	            lo = 0;
	            if (++hi > 4294967295) hi = 0;
	        }
	    }
	    return new LongBits(lo, hi);
	};

	/**
	 * Constructs new long bits from a number, long or string.
	 * @param {Long|number|string} value Value
	 * @returns {util.LongBits} Instance
	 */
	LongBits.from = function from(value) {
	    if (typeof value === "number") return LongBits.fromNumber(value);
	    if (minimal.isString(value)) {
	        /* istanbul ignore else */
	        if (minimal.Long) value = minimal.Long.fromString(value);else return LongBits.fromNumber(parseInt(value, 10));
	    }
	    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
	};

	/**
	 * Converts this long bits to a possibly unsafe JavaScript number.
	 * @param {boolean} [unsigned=false] Whether unsigned or not
	 * @returns {number} Possibly unsafe number
	 */
	LongBits.prototype.toNumber = function toNumber(unsigned) {
	    if (!unsigned && this.hi >>> 31) {
	        var lo = ~this.lo + 1 >>> 0,
	            hi = ~this.hi >>> 0;
	        if (!lo) hi = hi + 1 >>> 0;
	        return -(lo + hi * 4294967296);
	    }
	    return this.lo + this.hi * 4294967296;
	};

	/**
	 * Converts this long bits to a long.
	 * @param {boolean} [unsigned=false] Whether unsigned or not
	 * @returns {Long} Long
	 */
	LongBits.prototype.toLong = function toLong(unsigned) {
	    return minimal.Long ? new minimal.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
	    /* istanbul ignore next */
	    : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
	};

	var charCodeAt = String.prototype.charCodeAt;

	/**
	 * Constructs new long bits from the specified 8 characters long hash.
	 * @param {string} hash Hash
	 * @returns {util.LongBits} Bits
	 */
	LongBits.fromHash = function fromHash(hash) {
	    if (hash === zeroHash) return zero;
	    return new LongBits((charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0, (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0);
	};

	/**
	 * Converts this long bits to a 8 characters long hash.
	 * @returns {string} Hash
	 */
	LongBits.prototype.toHash = function toHash() {
	    return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
	};

	/**
	 * Zig-zag encodes this long bits.
	 * @returns {util.LongBits} `this`
	 */
	LongBits.prototype.zzEncode = function zzEncode() {
	    var mask = this.hi >> 31;
	    this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
	    this.lo = (this.lo << 1 ^ mask) >>> 0;
	    return this;
	};

	/**
	 * Zig-zag decodes this long bits.
	 * @returns {util.LongBits} `this`
	 */
	LongBits.prototype.zzDecode = function zzDecode() {
	    var mask = -(this.lo & 1);
	    this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
	    this.hi = (this.hi >>> 1 ^ mask) >>> 0;
	    return this;
	};

	/**
	 * Calculates the length of this longbits when encoded as a varint.
	 * @returns {number} Length
	 */
	LongBits.prototype.length = function length() {
	    var part0 = this.lo,
	        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
	        part2 = this.hi >>> 24;
	    return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
	};

	var minimal = createCommonjsModule$1(function (module, exports) {

	    var util = exports;

	    // used to return a Promise where callback is omitted
	    util.asPromise = aspromise;

	    // converts to / from base64 encoded strings
	    util.base64 = base64_1;

	    // base class of rpc.Service
	    util.EventEmitter = eventemitter;

	    // float handling accross browsers
	    util.float = float_1;

	    // requires modules optionally and hides the call from bundlers
	    util.inquire = inquire_1;

	    // converts to / from utf8 encoded strings
	    util.utf8 = utf8_1;

	    // provides a node-like buffer pool in the browser
	    util.pool = pool_1;

	    // utility to work with the low and high bits of a 64 bit value
	    util.LongBits = longbits;

	    /**
	     * An immuable empty array.
	     * @memberof util
	     * @type {Array.<*>}
	     * @const
	     */
	    util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */[]; // used on prototypes

	    /**
	     * An immutable empty object.
	     * @type {Object}
	     * @const
	     */
	    util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */{}; // used on prototypes

	    /**
	     * Whether running within node or not.
	     * @memberof util
	     * @type {boolean}
	     * @const
	     */
	    util.isNode = Boolean(commonjsGlobal$1.process && commonjsGlobal$1.process.versions && commonjsGlobal$1.process.versions.node);

	    /**
	     * Tests if the specified value is an integer.
	     * @function
	     * @param {*} value Value to test
	     * @returns {boolean} `true` if the value is an integer
	     */
	    util.isInteger = Number.isInteger || /* istanbul ignore next */function isInteger(value) {
	        return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
	    };

	    /**
	     * Tests if the specified value is a string.
	     * @param {*} value Value to test
	     * @returns {boolean} `true` if the value is a string
	     */
	    util.isString = function isString(value) {
	        return typeof value === "string" || value instanceof String;
	    };

	    /**
	     * Tests if the specified value is a non-null object.
	     * @param {*} value Value to test
	     * @returns {boolean} `true` if the value is a non-null object
	     */
	    util.isObject = function isObject(value) {
	        return value && typeof value === "object";
	    };

	    /**
	     * Checks if a property on a message is considered to be present.
	     * This is an alias of {@link util.isSet}.
	     * @function
	     * @param {Object} obj Plain object or message instance
	     * @param {string} prop Property name
	     * @returns {boolean} `true` if considered to be present, otherwise `false`
	     */
	    util.isset =

	    /**
	     * Checks if a property on a message is considered to be present.
	     * @param {Object} obj Plain object or message instance
	     * @param {string} prop Property name
	     * @returns {boolean} `true` if considered to be present, otherwise `false`
	     */
	    util.isSet = function isSet(obj, prop) {
	        var value = obj[prop];
	        if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
	            return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
	        return false;
	    };

	    /**
	     * Any compatible Buffer instance.
	     * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
	     * @interface Buffer
	     * @extends Uint8Array
	     */

	    /**
	     * Node's Buffer class if available.
	     * @type {Constructor<Buffer>}
	     */
	    util.Buffer = function () {
	        try {
	            var Buffer = util.inquire("buffer").Buffer;
	            // refuse to use non-node buffers if not explicitly assigned (perf reasons):
	            return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */null;
	        } catch (e) {
	            /* istanbul ignore next */
	            return null;
	        }
	    }();

	    // Internal alias of or polyfull for Buffer.from.
	    util._Buffer_from = null;

	    // Internal alias of or polyfill for Buffer.allocUnsafe.
	    util._Buffer_allocUnsafe = null;

	    /**
	     * Creates a new buffer of whatever type supported by the environment.
	     * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
	     * @returns {Uint8Array|Buffer} Buffer
	     */
	    util.newBuffer = function newBuffer(sizeOrArray) {
	        /* istanbul ignore next */
	        return typeof sizeOrArray === "number" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
	    };

	    /**
	     * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
	     * @type {Constructor<Uint8Array>}
	     */
	    util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

	    /**
	     * Any compatible Long instance.
	     * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
	     * @interface Long
	     * @property {number} low Low bits
	     * @property {number} high High bits
	     * @property {boolean} unsigned Whether unsigned or not
	     */

	    /**
	     * Long.js's Long class if available.
	     * @type {Constructor<Long>}
	     */
	    util.Long = /* istanbul ignore next */commonjsGlobal$1.dcodeIO && /* istanbul ignore next */commonjsGlobal$1.dcodeIO.Long || util.inquire("long");

	    /**
	     * Regular expression used to verify 2 bit (`bool`) map keys.
	     * @type {RegExp}
	     * @const
	     */
	    util.key2Re = /^true|false|0|1$/;

	    /**
	     * Regular expression used to verify 32 bit (`int32` etc.) map keys.
	     * @type {RegExp}
	     * @const
	     */
	    util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

	    /**
	     * Regular expression used to verify 64 bit (`int64` etc.) map keys.
	     * @type {RegExp}
	     * @const
	     */
	    util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

	    /**
	     * Converts a number or long to an 8 characters long hash string.
	     * @param {Long|number} value Value to convert
	     * @returns {string} Hash
	     */
	    util.longToHash = function longToHash(value) {
	        return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
	    };

	    /**
	     * Converts an 8 characters long hash string to a long or number.
	     * @param {string} hash Hash
	     * @param {boolean} [unsigned=false] Whether unsigned or not
	     * @returns {Long|number} Original value
	     */
	    util.longFromHash = function longFromHash(hash, unsigned) {
	        var bits = util.LongBits.fromHash(hash);
	        if (util.Long) return util.Long.fromBits(bits.lo, bits.hi, unsigned);
	        return bits.toNumber(Boolean(unsigned));
	    };

	    /**
	     * Merges the properties of the source object into the destination object.
	     * @memberof util
	     * @param {Object.<string,*>} dst Destination object
	     * @param {Object.<string,*>} src Source object
	     * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
	     * @returns {Object.<string,*>} Destination object
	     */
	    function merge(dst, src, ifNotSet) {
	        // used by converters
	        for (var keys = Object.keys(src), i = 0; i < keys.length; ++i) if (dst[keys[i]] === undefined || !ifNotSet) dst[keys[i]] = src[keys[i]];
	        return dst;
	    }

	    util.merge = merge;

	    /**
	     * Converts the first character of a string to lower case.
	     * @param {string} str String to convert
	     * @returns {string} Converted string
	     */
	    util.lcFirst = function lcFirst(str) {
	        return str.charAt(0).toLowerCase() + str.substring(1);
	    };

	    /**
	     * Creates a custom error constructor.
	     * @memberof util
	     * @param {string} name Error name
	     * @returns {Constructor<Error>} Custom error constructor
	     */
	    function newError(name) {

	        function CustomError(message, properties) {

	            if (!(this instanceof CustomError)) return new CustomError(message, properties);

	            // Error.call(this, message);
	            // ^ just returns a new error instance because the ctor can be called as a function

	            Object.defineProperty(this, "message", { get: function () {
	                    return message;
	                } });

	            /* istanbul ignore next */
	            if (Error.captureStackTrace) // node
	                Error.captureStackTrace(this, CustomError);else Object.defineProperty(this, "stack", { value: new Error().stack || "" });

	            if (properties) merge(this, properties);
	        }

	        (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;

	        Object.defineProperty(CustomError.prototype, "name", { get: function () {
	                return name;
	            } });

	        CustomError.prototype.toString = function toString() {
	            return this.name + ": " + this.message;
	        };

	        return CustomError;
	    }

	    util.newError = newError;

	    /**
	     * Constructs a new protocol error.
	     * @classdesc Error subclass indicating a protocol specifc error.
	     * @memberof util
	     * @extends Error
	     * @template T extends Message<T>
	     * @constructor
	     * @param {string} message Error message
	     * @param {Object.<string,*>} [properties] Additional properties
	     * @example
	     * try {
	     *     MyMessage.decode(someBuffer); // throws if required fields are missing
	     * } catch (e) {
	     *     if (e instanceof ProtocolError && e.instance)
	     *         console.log("decoded so far: " + JSON.stringify(e.instance));
	     * }
	     */
	    util.ProtocolError = newError("ProtocolError");

	    /**
	     * So far decoded message instance.
	     * @name util.ProtocolError#instance
	     * @type {Message<T>}
	     */

	    /**
	     * A OneOf getter as returned by {@link util.oneOfGetter}.
	     * @typedef OneOfGetter
	     * @type {function}
	     * @returns {string|undefined} Set field name, if any
	     */

	    /**
	     * Builds a getter for a oneof's present field name.
	     * @param {string[]} fieldNames Field names
	     * @returns {OneOfGetter} Unbound getter
	     */
	    util.oneOfGetter = function getOneOf(fieldNames) {
	        var fieldMap = {};
	        for (var i = 0; i < fieldNames.length; ++i) fieldMap[fieldNames[i]] = 1;

	        /**
	         * @returns {string|undefined} Set field name, if any
	         * @this Object
	         * @ignore
	         */
	        return function () {
	            // eslint-disable-line consistent-return
	            for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i) if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null) return keys[i];
	        };
	    };

	    /**
	     * A OneOf setter as returned by {@link util.oneOfSetter}.
	     * @typedef OneOfSetter
	     * @type {function}
	     * @param {string|undefined} value Field name
	     * @returns {undefined}
	     */

	    /**
	     * Builds a setter for a oneof's present field name.
	     * @param {string[]} fieldNames Field names
	     * @returns {OneOfSetter} Unbound setter
	     */
	    util.oneOfSetter = function setOneOf(fieldNames) {

	        /**
	         * @param {string} name Field name
	         * @returns {undefined}
	         * @this Object
	         * @ignore
	         */
	        return function (name) {
	            for (var i = 0; i < fieldNames.length; ++i) if (fieldNames[i] !== name) delete this[fieldNames[i]];
	        };
	    };

	    /**
	     * Default conversion options used for {@link Message#toJSON} implementations.
	     *
	     * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
	     *
	     * - Longs become strings
	     * - Enums become string keys
	     * - Bytes become base64 encoded strings
	     * - (Sub-)Messages become plain objects
	     * - Maps become plain objects with all string keys
	     * - Repeated fields become arrays
	     * - NaN and Infinity for float and double fields become strings
	     *
	     * @type {IConversionOptions}
	     * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
	     */
	    util.toJSONOptions = {
	        longs: String,
	        enums: String,
	        bytes: String,
	        json: true
	    };

	    util._configure = function () {
	        var Buffer = util.Buffer;
	        /* istanbul ignore if */
	        if (!Buffer) {
	            util._Buffer_from = util._Buffer_allocUnsafe = null;
	            return;
	        }
	        // because node 4.x buffers are incompatible & immutable
	        // see: https://github.com/dcodeIO/protobuf.js/pull/665
	        util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
	        /* istanbul ignore next */
	        function Buffer_from(value, encoding) {
	            return new Buffer(value, encoding);
	        };
	        util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
	        /* istanbul ignore next */
	        function Buffer_allocUnsafe(size) {
	            return new Buffer(size);
	        };
	    };
	});

	var writer = Writer;

	var BufferWriter; // cyclic

	var LongBits$1 = minimal.LongBits,
	    base64 = minimal.base64,
	    utf8 = minimal.utf8;

	/**
	 * Constructs a new writer operation instance.
	 * @classdesc Scheduled writer operation.
	 * @constructor
	 * @param {function(*, Uint8Array, number)} fn Function to call
	 * @param {number} len Value byte length
	 * @param {*} val Value to write
	 * @ignore
	 */
	function Op(fn, len, val) {

	    /**
	     * Function to call.
	     * @type {function(Uint8Array, number, *)}
	     */
	    this.fn = fn;

	    /**
	     * Value byte length.
	     * @type {number}
	     */
	    this.len = len;

	    /**
	     * Next operation.
	     * @type {Writer.Op|undefined}
	     */
	    this.next = undefined;

	    /**
	     * Value to write.
	     * @type {*}
	     */
	    this.val = val; // type varies
	}

	/* istanbul ignore next */
	function noop() {} // eslint-disable-line no-empty-function

	/**
	 * Constructs a new writer state instance.
	 * @classdesc Copied writer state.
	 * @memberof Writer
	 * @constructor
	 * @param {Writer} writer Writer to copy state from
	 * @ignore
	 */
	function State(writer) {

	    /**
	     * Current head.
	     * @type {Writer.Op}
	     */
	    this.head = writer.head;

	    /**
	     * Current tail.
	     * @type {Writer.Op}
	     */
	    this.tail = writer.tail;

	    /**
	     * Current buffer length.
	     * @type {number}
	     */
	    this.len = writer.len;

	    /**
	     * Next state.
	     * @type {State|null}
	     */
	    this.next = writer.states;
	}

	/**
	 * Constructs a new writer instance.
	 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
	 * @constructor
	 */
	function Writer() {

	    /**
	     * Current length.
	     * @type {number}
	     */
	    this.len = 0;

	    /**
	     * Operations head.
	     * @type {Object}
	     */
	    this.head = new Op(noop, 0, 0);

	    /**
	     * Operations tail
	     * @type {Object}
	     */
	    this.tail = this.head;

	    /**
	     * Linked forked states.
	     * @type {Object|null}
	     */
	    this.states = null;

	    // When a value is written, the writer calculates its byte length and puts it into a linked
	    // list of operations to perform when finish() is called. This both allows us to allocate
	    // buffers of the exact required size and reduces the amount of work we have to do compared
	    // to first calculating over objects and then encoding over objects. In our case, the encoding
	    // part is just a linked list walk calling operations with already prepared values.
	}

	/**
	 * Creates a new writer.
	 * @function
	 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
	 */
	Writer.create = minimal.Buffer ? function create_buffer_setup() {
	    return (Writer.create = function create_buffer() {
	        return new BufferWriter();
	    })();
	}
	/* istanbul ignore next */
	: function create_array() {
	    return new Writer();
	};

	/**
	 * Allocates a buffer of the specified size.
	 * @param {number} size Buffer size
	 * @returns {Uint8Array} Buffer
	 */
	Writer.alloc = function alloc(size) {
	    return new minimal.Array(size);
	};

	// Use Uint8Array buffer pool in the browser, just like node does with buffers
	/* istanbul ignore else */
	if (minimal.Array !== Array) Writer.alloc = minimal.pool(Writer.alloc, minimal.Array.prototype.subarray);

	/**
	 * Pushes a new operation to the queue.
	 * @param {function(Uint8Array, number, *)} fn Function to call
	 * @param {number} len Value byte length
	 * @param {number} val Value to write
	 * @returns {Writer} `this`
	 * @private
	 */
	Writer.prototype._push = function push(fn, len, val) {
	    this.tail = this.tail.next = new Op(fn, len, val);
	    this.len += len;
	    return this;
	};

	function writeByte(val, buf, pos) {
	    buf[pos] = val & 255;
	}

	function writeVarint32(val, buf, pos) {
	    while (val > 127) {
	        buf[pos++] = val & 127 | 128;
	        val >>>= 7;
	    }
	    buf[pos] = val;
	}

	/**
	 * Constructs a new varint writer operation instance.
	 * @classdesc Scheduled varint writer operation.
	 * @extends Op
	 * @constructor
	 * @param {number} len Value byte length
	 * @param {number} val Value to write
	 * @ignore
	 */
	function VarintOp(len, val) {
	    this.len = len;
	    this.next = undefined;
	    this.val = val;
	}

	VarintOp.prototype = Object.create(Op.prototype);
	VarintOp.prototype.fn = writeVarint32;

	/**
	 * Writes an unsigned 32 bit value as a varint.
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.uint32 = function write_uint32(value) {
	    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
	    // uint32 is by far the most frequently used operation and benefits significantly from this.
	    this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;
	    return this;
	};

	/**
	 * Writes a signed 32 bit value as a varint.
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.int32 = function write_int32(value) {
	    return value < 0 ? this._push(writeVarint64, 10, LongBits$1.fromNumber(value)) // 10 bytes per spec
	    : this.uint32(value);
	};

	/**
	 * Writes a 32 bit value as a varint, zig-zag encoded.
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.sint32 = function write_sint32(value) {
	    return this.uint32((value << 1 ^ value >> 31) >>> 0);
	};

	function writeVarint64(val, buf, pos) {
	    while (val.hi) {
	        buf[pos++] = val.lo & 127 | 128;
	        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
	        val.hi >>>= 7;
	    }
	    while (val.lo > 127) {
	        buf[pos++] = val.lo & 127 | 128;
	        val.lo = val.lo >>> 7;
	    }
	    buf[pos++] = val.lo;
	}

	/**
	 * Writes an unsigned 64 bit value as a varint.
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.uint64 = function write_uint64(value) {
	    var bits = LongBits$1.from(value);
	    return this._push(writeVarint64, bits.length(), bits);
	};

	/**
	 * Writes a signed 64 bit value as a varint.
	 * @function
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.int64 = Writer.prototype.uint64;

	/**
	 * Writes a signed 64 bit value as a varint, zig-zag encoded.
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.sint64 = function write_sint64(value) {
	    var bits = LongBits$1.from(value).zzEncode();
	    return this._push(writeVarint64, bits.length(), bits);
	};

	/**
	 * Writes a boolish value as a varint.
	 * @param {boolean} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.bool = function write_bool(value) {
	    return this._push(writeByte, 1, value ? 1 : 0);
	};

	function writeFixed32(val, buf, pos) {
	    buf[pos] = val & 255;
	    buf[pos + 1] = val >>> 8 & 255;
	    buf[pos + 2] = val >>> 16 & 255;
	    buf[pos + 3] = val >>> 24;
	}

	/**
	 * Writes an unsigned 32 bit value as fixed 32 bits.
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.fixed32 = function write_fixed32(value) {
	    return this._push(writeFixed32, 4, value >>> 0);
	};

	/**
	 * Writes a signed 32 bit value as fixed 32 bits.
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.sfixed32 = Writer.prototype.fixed32;

	/**
	 * Writes an unsigned 64 bit value as fixed 64 bits.
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.fixed64 = function write_fixed64(value) {
	    var bits = LongBits$1.from(value);
	    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
	};

	/**
	 * Writes a signed 64 bit value as fixed 64 bits.
	 * @function
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.sfixed64 = Writer.prototype.fixed64;

	/**
	 * Writes a float (32 bit).
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.float = function write_float(value) {
	    return this._push(minimal.float.writeFloatLE, 4, value);
	};

	/**
	 * Writes a double (64 bit float).
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.double = function write_double(value) {
	    return this._push(minimal.float.writeDoubleLE, 8, value);
	};

	var writeBytes = minimal.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
	    buf.set(val, pos); // also works for plain array values
	}
	/* istanbul ignore next */
	: function writeBytes_for(val, buf, pos) {
	    for (var i = 0; i < val.length; ++i) buf[pos + i] = val[i];
	};

	/**
	 * Writes a sequence of bytes.
	 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.bytes = function write_bytes(value) {
	    var len = value.length >>> 0;
	    if (!len) return this._push(writeByte, 1, 0);
	    if (minimal.isString(value)) {
	        var buf = Writer.alloc(len = base64.length(value));
	        base64.decode(value, buf, 0);
	        value = buf;
	    }
	    return this.uint32(len)._push(writeBytes, len, value);
	};

	/**
	 * Writes a string.
	 * @param {string} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.string = function write_string(value) {
	    var len = utf8.length(value);
	    return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
	};

	/**
	 * Forks this writer's state by pushing it to a stack.
	 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
	 * @returns {Writer} `this`
	 */
	Writer.prototype.fork = function fork() {
	    this.states = new State(this);
	    this.head = this.tail = new Op(noop, 0, 0);
	    this.len = 0;
	    return this;
	};

	/**
	 * Resets this instance to the last state.
	 * @returns {Writer} `this`
	 */
	Writer.prototype.reset = function reset() {
	    if (this.states) {
	        this.head = this.states.head;
	        this.tail = this.states.tail;
	        this.len = this.states.len;
	        this.states = this.states.next;
	    } else {
	        this.head = this.tail = new Op(noop, 0, 0);
	        this.len = 0;
	    }
	    return this;
	};

	/**
	 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
	 * @returns {Writer} `this`
	 */
	Writer.prototype.ldelim = function ldelim() {
	    var head = this.head,
	        tail = this.tail,
	        len = this.len;
	    this.reset().uint32(len);
	    if (len) {
	        this.tail.next = head.next; // skip noop
	        this.tail = tail;
	        this.len += len;
	    }
	    return this;
	};

	/**
	 * Finishes the write operation.
	 * @returns {Uint8Array} Finished buffer
	 */
	Writer.prototype.finish = function finish() {
	    var head = this.head.next,
	        // skip noop
	    buf = this.constructor.alloc(this.len),
	        pos = 0;
	    while (head) {
	        head.fn(head.val, buf, pos);
	        pos += head.len;
	        head = head.next;
	    }
	    // this.head = this.tail = null;
	    return buf;
	};

	Writer._configure = function (BufferWriter_) {
	    BufferWriter = BufferWriter_;
	};

	var writer_buffer = BufferWriter$1;

	// extends Writer

	(BufferWriter$1.prototype = Object.create(writer.prototype)).constructor = BufferWriter$1;

	var Buffer = minimal.Buffer;

	/**
	 * Constructs a new buffer writer instance.
	 * @classdesc Wire format writer using node buffers.
	 * @extends Writer
	 * @constructor
	 */
	function BufferWriter$1() {
	    writer.call(this);
	}

	/**
	 * Allocates a buffer of the specified size.
	 * @param {number} size Buffer size
	 * @returns {Buffer} Buffer
	 */
	BufferWriter$1.alloc = function alloc_buffer(size) {
	    return (BufferWriter$1.alloc = minimal._Buffer_allocUnsafe)(size);
	};

	var writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
	    buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
	    // also works for plain array values
	}
	/* istanbul ignore next */
	: function writeBytesBuffer_copy(val, buf, pos) {
	    if (val.copy) // Buffer values
	        val.copy(buf, pos, 0, val.length);else for (var i = 0; i < val.length;) // plain array values
	    buf[pos++] = val[i++];
	};

	/**
	 * @override
	 */
	BufferWriter$1.prototype.bytes = function write_bytes_buffer(value) {
	    if (minimal.isString(value)) value = minimal._Buffer_from(value, "base64");
	    var len = value.length >>> 0;
	    this.uint32(len);
	    if (len) this._push(writeBytesBuffer, len, value);
	    return this;
	};

	function writeStringBuffer(val, buf, pos) {
	    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
	        minimal.utf8.write(val, buf, pos);else buf.utf8Write(val, pos);
	}

	/**
	 * @override
	 */
	BufferWriter$1.prototype.string = function write_string_buffer(value) {
	    var len = Buffer.byteLength(value);
	    this.uint32(len);
	    if (len) this._push(writeStringBuffer, len, value);
	    return this;
	};

	var reader = Reader;

	var BufferReader; // cyclic

	var LongBits$2 = minimal.LongBits,
	    utf8$1 = minimal.utf8;

	/* istanbul ignore next */
	function indexOutOfRange(reader, writeLength) {
	    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
	}

	/**
	 * Constructs a new reader instance using the specified buffer.
	 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
	 * @constructor
	 * @param {Uint8Array} buffer Buffer to read from
	 */
	function Reader(buffer) {

	    /**
	     * Read buffer.
	     * @type {Uint8Array}
	     */
	    this.buf = buffer;

	    /**
	     * Read buffer position.
	     * @type {number}
	     */
	    this.pos = 0;

	    /**
	     * Read buffer length.
	     * @type {number}
	     */
	    this.len = buffer.length;
	}

	var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer) {
	    if (buffer instanceof Uint8Array || Array.isArray(buffer)) return new Reader(buffer);
	    throw Error("illegal buffer");
	}
	/* istanbul ignore next */
	: function create_array(buffer) {
	    if (Array.isArray(buffer)) return new Reader(buffer);
	    throw Error("illegal buffer");
	};

	/**
	 * Creates a new reader using the specified buffer.
	 * @function
	 * @param {Uint8Array|Buffer} buffer Buffer to read from
	 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
	 * @throws {Error} If `buffer` is not a valid buffer
	 */
	Reader.create = minimal.Buffer ? function create_buffer_setup(buffer) {
	    return (Reader.create = function create_buffer(buffer) {
	        return minimal.Buffer.isBuffer(buffer) ? new BufferReader(buffer)
	        /* istanbul ignore next */
	        : create_array(buffer);
	    })(buffer);
	}
	/* istanbul ignore next */
	: create_array;

	Reader.prototype._slice = minimal.Array.prototype.subarray || /* istanbul ignore next */minimal.Array.prototype.slice;

	/**
	 * Reads a varint as an unsigned 32 bit value.
	 * @function
	 * @returns {number} Value read
	 */
	Reader.prototype.uint32 = function read_uint32_setup() {
	    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
	    return function read_uint32() {
	        value = (this.buf[this.pos] & 127) >>> 0;if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;if (this.buf[this.pos++] < 128) return value;

	        /* istanbul ignore if */
	        if ((this.pos += 5) > this.len) {
	            this.pos = this.len;
	            throw indexOutOfRange(this, 10);
	        }
	        return value;
	    };
	}();

	/**
	 * Reads a varint as a signed 32 bit value.
	 * @returns {number} Value read
	 */
	Reader.prototype.int32 = function read_int32() {
	    return this.uint32() | 0;
	};

	/**
	 * Reads a zig-zag encoded varint as a signed 32 bit value.
	 * @returns {number} Value read
	 */
	Reader.prototype.sint32 = function read_sint32() {
	    var value = this.uint32();
	    return value >>> 1 ^ -(value & 1) | 0;
	};

	/* eslint-disable no-invalid-this */

	function readLongVarint() {
	    // tends to deopt with local vars for octet etc.
	    var bits = new LongBits$2(0, 0);
	    var i = 0;
	    if (this.len - this.pos > 4) {
	        // fast route (lo)
	        for (; i < 4; ++i) {
	            // 1st..4th
	            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
	            if (this.buf[this.pos++] < 128) return bits;
	        }
	        // 5th
	        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
	        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
	        if (this.buf[this.pos++] < 128) return bits;
	        i = 0;
	    } else {
	        for (; i < 3; ++i) {
	            /* istanbul ignore if */
	            if (this.pos >= this.len) throw indexOutOfRange(this);
	            // 1st..3th
	            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
	            if (this.buf[this.pos++] < 128) return bits;
	        }
	        // 4th
	        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
	        return bits;
	    }
	    if (this.len - this.pos > 4) {
	        // fast route (hi)
	        for (; i < 5; ++i) {
	            // 6th..10th
	            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
	            if (this.buf[this.pos++] < 128) return bits;
	        }
	    } else {
	        for (; i < 5; ++i) {
	            /* istanbul ignore if */
	            if (this.pos >= this.len) throw indexOutOfRange(this);
	            // 6th..10th
	            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
	            if (this.buf[this.pos++] < 128) return bits;
	        }
	    }
	    /* istanbul ignore next */
	    throw Error("invalid varint encoding");
	}

	/* eslint-enable no-invalid-this */

	/**
	 * Reads a varint as a signed 64 bit value.
	 * @name Reader#int64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a varint as an unsigned 64 bit value.
	 * @name Reader#uint64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a zig-zag encoded varint as a signed 64 bit value.
	 * @name Reader#sint64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a varint as a boolean.
	 * @returns {boolean} Value read
	 */
	Reader.prototype.bool = function read_bool() {
	    return this.uint32() !== 0;
	};

	function readFixed32_end(buf, end) {
	    // note that this uses `end`, not `pos`
	    return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
	}

	/**
	 * Reads fixed 32 bits as an unsigned 32 bit integer.
	 * @returns {number} Value read
	 */
	Reader.prototype.fixed32 = function read_fixed32() {

	    /* istanbul ignore if */
	    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);

	    return readFixed32_end(this.buf, this.pos += 4);
	};

	/**
	 * Reads fixed 32 bits as a signed 32 bit integer.
	 * @returns {number} Value read
	 */
	Reader.prototype.sfixed32 = function read_sfixed32() {

	    /* istanbul ignore if */
	    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);

	    return readFixed32_end(this.buf, this.pos += 4) | 0;
	};

	/* eslint-disable no-invalid-this */

	function readFixed64() /* this: Reader */{

	    /* istanbul ignore if */
	    if (this.pos + 8 > this.len) throw indexOutOfRange(this, 8);

	    return new LongBits$2(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
	}

	/* eslint-enable no-invalid-this */

	/**
	 * Reads fixed 64 bits.
	 * @name Reader#fixed64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads zig-zag encoded fixed 64 bits.
	 * @name Reader#sfixed64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a float (32 bit) as a number.
	 * @function
	 * @returns {number} Value read
	 */
	Reader.prototype.float = function read_float() {

	    /* istanbul ignore if */
	    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);

	    var value = minimal.float.readFloatLE(this.buf, this.pos);
	    this.pos += 4;
	    return value;
	};

	/**
	 * Reads a double (64 bit float) as a number.
	 * @function
	 * @returns {number} Value read
	 */
	Reader.prototype.double = function read_double() {

	    /* istanbul ignore if */
	    if (this.pos + 8 > this.len) throw indexOutOfRange(this, 4);

	    var value = minimal.float.readDoubleLE(this.buf, this.pos);
	    this.pos += 8;
	    return value;
	};

	/**
	 * Reads a sequence of bytes preceeded by its length as a varint.
	 * @returns {Uint8Array} Value read
	 */
	Reader.prototype.bytes = function read_bytes() {
	    var length = this.uint32(),
	        start = this.pos,
	        end = this.pos + length;

	    /* istanbul ignore if */
	    if (end > this.len) throw indexOutOfRange(this, length);

	    this.pos += length;
	    if (Array.isArray(this.buf)) // plain array
	        return this.buf.slice(start, end);
	    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
	    ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);
	};

	/**
	 * Reads a string preceeded by its byte length as a varint.
	 * @returns {string} Value read
	 */
	Reader.prototype.string = function read_string() {
	    var bytes = this.bytes();
	    return utf8$1.read(bytes, 0, bytes.length);
	};

	/**
	 * Skips the specified number of bytes if specified, otherwise skips a varint.
	 * @param {number} [length] Length if known, otherwise a varint is assumed
	 * @returns {Reader} `this`
	 */
	Reader.prototype.skip = function skip(length) {
	    if (typeof length === "number") {
	        /* istanbul ignore if */
	        if (this.pos + length > this.len) throw indexOutOfRange(this, length);
	        this.pos += length;
	    } else {
	        do {
	            /* istanbul ignore if */
	            if (this.pos >= this.len) throw indexOutOfRange(this);
	        } while (this.buf[this.pos++] & 128);
	    }
	    return this;
	};

	/**
	 * Skips the next element of the specified wire type.
	 * @param {number} wireType Wire type received
	 * @returns {Reader} `this`
	 */
	Reader.prototype.skipType = function (wireType) {
	    switch (wireType) {
	        case 0:
	            this.skip();
	            break;
	        case 1:
	            this.skip(8);
	            break;
	        case 2:
	            this.skip(this.uint32());
	            break;
	        case 3:
	            do {
	                // eslint-disable-line no-constant-condition
	                if ((wireType = this.uint32() & 7) === 4) break;
	                this.skipType(wireType);
	            } while (true);
	            break;
	        case 5:
	            this.skip(4);
	            break;

	        /* istanbul ignore next */
	        default:
	            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
	    }
	    return this;
	};

	Reader._configure = function (BufferReader_) {
	    BufferReader = BufferReader_;

	    var fn = minimal.Long ? "toLong" : /* istanbul ignore next */"toNumber";
	    minimal.merge(Reader.prototype, {

	        int64: function read_int64() {
	            return readLongVarint.call(this)[fn](false);
	        },

	        uint64: function read_uint64() {
	            return readLongVarint.call(this)[fn](true);
	        },

	        sint64: function read_sint64() {
	            return readLongVarint.call(this).zzDecode()[fn](false);
	        },

	        fixed64: function read_fixed64() {
	            return readFixed64.call(this)[fn](true);
	        },

	        sfixed64: function read_sfixed64() {
	            return readFixed64.call(this)[fn](false);
	        }

	    });
	};

	var reader_buffer = BufferReader$1;

	// extends Reader

	(BufferReader$1.prototype = Object.create(reader.prototype)).constructor = BufferReader$1;

	/**
	 * Constructs a new buffer reader instance.
	 * @classdesc Wire format reader using node buffers.
	 * @extends Reader
	 * @constructor
	 * @param {Buffer} buffer Buffer to read from
	 */
	function BufferReader$1(buffer) {
	  reader.call(this, buffer);

	  /**
	   * Read buffer.
	   * @name BufferReader#buf
	   * @type {Buffer}
	   */
	}

	/* istanbul ignore else */
	if (minimal.Buffer) BufferReader$1.prototype._slice = minimal.Buffer.prototype.slice;

	/**
	 * @override
	 */
	BufferReader$1.prototype.string = function read_string_buffer() {
	  var len = this.uint32(); // modifies pos
	  return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));
	};

	var service = Service;

	// Extends EventEmitter
	(Service.prototype = Object.create(minimal.EventEmitter.prototype)).constructor = Service;

	/**
	 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
	 *
	 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
	 * @typedef rpc.ServiceMethodCallback
	 * @template TRes extends Message<TRes>
	 * @type {function}
	 * @param {Error|null} error Error, if any
	 * @param {TRes} [response] Response message
	 * @returns {undefined}
	 */

	/**
	 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
	 * @typedef rpc.ServiceMethod
	 * @template TReq extends Message<TReq>
	 * @template TRes extends Message<TRes>
	 * @type {function}
	 * @param {TReq|Properties<TReq>} request Request message or plain object
	 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
	 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
	 */

	/**
	 * Constructs a new RPC service instance.
	 * @classdesc An RPC service as returned by {@link Service#create}.
	 * @exports rpc.Service
	 * @extends util.EventEmitter
	 * @constructor
	 * @param {RPCImpl} rpcImpl RPC implementation
	 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
	 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
	 */
	function Service(rpcImpl, requestDelimited, responseDelimited) {

	    if (typeof rpcImpl !== "function") throw TypeError("rpcImpl must be a function");

	    minimal.EventEmitter.call(this);

	    /**
	     * RPC implementation. Becomes `null` once the service is ended.
	     * @type {RPCImpl|null}
	     */
	    this.rpcImpl = rpcImpl;

	    /**
	     * Whether requests are length-delimited.
	     * @type {boolean}
	     */
	    this.requestDelimited = Boolean(requestDelimited);

	    /**
	     * Whether responses are length-delimited.
	     * @type {boolean}
	     */
	    this.responseDelimited = Boolean(responseDelimited);
	}

	/**
	 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
	 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
	 * @param {Constructor<TReq>} requestCtor Request constructor
	 * @param {Constructor<TRes>} responseCtor Response constructor
	 * @param {TReq|Properties<TReq>} request Request message or plain object
	 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
	 * @returns {undefined}
	 * @template TReq extends Message<TReq>
	 * @template TRes extends Message<TRes>
	 */
	Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

	    if (!request) throw TypeError("request must be specified");

	    var self = this;
	    if (!callback) return minimal.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

	    if (!self.rpcImpl) {
	        setTimeout(function () {
	            callback(Error("already ended"));
	        }, 0);
	        return undefined;
	    }

	    try {
	        return self.rpcImpl(method, requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(), function rpcCallback(err, response) {

	            if (err) {
	                self.emit("error", err, method);
	                return callback(err);
	            }

	            if (response === null) {
	                self.end( /* endedByRPC */true);
	                return undefined;
	            }

	            if (!(response instanceof responseCtor)) {
	                try {
	                    response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
	                } catch (err) {
	                    self.emit("error", err, method);
	                    return callback(err);
	                }
	            }

	            self.emit("data", response, method);
	            return callback(null, response);
	        });
	    } catch (err) {
	        self.emit("error", err, method);
	        setTimeout(function () {
	            callback(err);
	        }, 0);
	        return undefined;
	    }
	};

	/**
	 * Ends this service and emits the `end` event.
	 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
	 * @returns {rpc.Service} `this`
	 */
	Service.prototype.end = function end(endedByRPC) {
	    if (this.rpcImpl) {
	        if (!endedByRPC) // signal end to rpcImpl
	            this.rpcImpl(null, null, null);
	        this.rpcImpl = null;
	        this.emit("end").off();
	    }
	    return this;
	};

	var rpc_1 = createCommonjsModule$1(function (module, exports) {

	  /**
	   * Streaming RPC helpers.
	   * @namespace
	   */

	  var rpc = exports;

	  /**
	   * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
	   * @typedef RPCImpl
	   * @type {function}
	   * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
	   * @param {Uint8Array} requestData Request data
	   * @param {RPCImplCallback} callback Callback function
	   * @returns {undefined}
	   * @example
	   * function rpcImpl(method, requestData, callback) {
	   *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
	   *         throw Error("no such method");
	   *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
	   *         callback(err, responseData);
	   *     });
	   * }
	   */

	  /**
	   * Node-style callback as used by {@link RPCImpl}.
	   * @typedef RPCImplCallback
	   * @type {function}
	   * @param {Error|null} error Error, if any, otherwise `null`
	   * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
	   * @returns {undefined}
	   */

	  rpc.Service = service;
	});

	var roots = {};

	var indexMinimal = createCommonjsModule$1(function (module, exports) {

	  var protobuf = exports;

	  /**
	   * Build type, one of `"full"`, `"light"` or `"minimal"`.
	   * @name build
	   * @type {string}
	   * @const
	   */
	  protobuf.build = "minimal";

	  // Serialization
	  protobuf.Writer = writer;
	  protobuf.BufferWriter = writer_buffer;
	  protobuf.Reader = reader;
	  protobuf.BufferReader = reader_buffer;

	  // Utility
	  protobuf.util = minimal;
	  protobuf.rpc = rpc_1;
	  protobuf.roots = roots;
	  protobuf.configure = configure;

	  /* istanbul ignore next */
	  /**
	   * Reconfigures the library according to the environment.
	   * @returns {undefined}
	   */
	  function configure() {
	    protobuf.Reader._configure(protobuf.BufferReader);
	    protobuf.util._configure();
	  }

	  // Configure serialization
	  protobuf.Writer._configure(protobuf.BufferWriter);
	  configure();
	});

	var minimal$1 = indexMinimal;
	var minimal_1 = minimal$1.roots;
	var minimal_2 = minimal$1.Reader;
	var minimal_3 = minimal$1.util;

	/*eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins*/

	const $Reader = minimal_2,
	      $util = minimal_3;

	const $root = minimal_1["default"] || (minimal_1["default"] = {});

	const tensorflow = $root.tensorflow = function () {

	    const tensorflow = {};

	    tensorflow.Any = function () {

	        function Any(p) {
	            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	        }

	        Any.prototype.typeUrl = "";
	        Any.prototype.value = $util.newBuffer([]);

	        Any.decode = function decode(r, l) {
	            if (!(r instanceof $Reader)) r = $Reader.create(r);
	            var c = l === undefined ? r.len : r.pos + l,
	                m = new $root.tensorflow.Any();
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                    case 1:
	                        m.typeUrl = r.string();
	                        break;
	                    case 2:
	                        m.value = r.bytes();
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                }
	            }
	            return m;
	        };

	        return Any;
	    }();

	    tensorflow.DataType = function () {
	        const valuesById = {},
	              values = Object.create(valuesById);
	        values[valuesById[0] = "DT_INVALID"] = 0;
	        values[valuesById[1] = "DT_FLOAT"] = 1;
	        values[valuesById[2] = "DT_DOUBLE"] = 2;
	        values[valuesById[3] = "DT_INT32"] = 3;
	        values[valuesById[4] = "DT_UINT8"] = 4;
	        values[valuesById[5] = "DT_INT16"] = 5;
	        values[valuesById[6] = "DT_INT8"] = 6;
	        values[valuesById[7] = "DT_STRING"] = 7;
	        values[valuesById[8] = "DT_COMPLEX64"] = 8;
	        values[valuesById[9] = "DT_INT64"] = 9;
	        values[valuesById[10] = "DT_BOOL"] = 10;
	        values[valuesById[11] = "DT_QINT8"] = 11;
	        values[valuesById[12] = "DT_QUINT8"] = 12;
	        values[valuesById[13] = "DT_QINT32"] = 13;
	        values[valuesById[14] = "DT_BFLOAT16"] = 14;
	        values[valuesById[101] = "DT_FLOAT_REF"] = 101;
	        values[valuesById[102] = "DT_DOUBLE_REF"] = 102;
	        values[valuesById[103] = "DT_INT32_REF"] = 103;
	        values[valuesById[104] = "DT_UINT8_REF"] = 104;
	        values[valuesById[105] = "DT_INT16_REF"] = 105;
	        values[valuesById[106] = "DT_INT8_REF"] = 106;
	        values[valuesById[107] = "DT_STRING_REF"] = 107;
	        values[valuesById[108] = "DT_COMPLEX64_REF"] = 108;
	        values[valuesById[109] = "DT_INT64_REF"] = 109;
	        values[valuesById[110] = "DT_BOOL_REF"] = 110;
	        values[valuesById[111] = "DT_QINT8_REF"] = 111;
	        values[valuesById[112] = "DT_QUINT8_REF"] = 112;
	        values[valuesById[113] = "DT_QINT32_REF"] = 113;
	        values[valuesById[114] = "DT_BFLOAT16_REF"] = 114;
	        return values;
	    }();

	    tensorflow.TensorShape = function () {

	        function TensorShape(p) {
	            this.dim = [];
	            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	        }

	        TensorShape.prototype.dim = $util.emptyArray;
	        TensorShape.prototype.unknownRank = false;

	        TensorShape.decode = function decode(r, l) {
	            if (!(r instanceof $Reader)) r = $Reader.create(r);
	            var c = l === undefined ? r.len : r.pos + l,
	                m = new $root.tensorflow.TensorShape();
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                    case 2:
	                        if (!(m.dim && m.dim.length)) m.dim = [];
	                        m.dim.push($root.tensorflow.TensorShape.Dim.decode(r, r.uint32()));
	                        break;
	                    case 3:
	                        m.unknownRank = r.bool();
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                }
	            }
	            return m;
	        };

	        TensorShape.Dim = function () {

	            function Dim(p) {
	                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	            }

	            Dim.prototype.size = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
	            Dim.prototype.name = "";

	            Dim.decode = function decode(r, l) {
	                if (!(r instanceof $Reader)) r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l,
	                    m = new $root.tensorflow.TensorShape.Dim();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                        case 1:
	                            m.size = r.int64();
	                            break;
	                        case 2:
	                            m.name = r.string();
	                            break;
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                    }
	                }
	                return m;
	            };

	            return Dim;
	        }();

	        return TensorShape;
	    }();

	    tensorflow.Tensor = function () {

	        function Tensor(p) {
	            this.floatVal = [];
	            this.doubleVal = [];
	            this.intVal = [];
	            this.stringVal = [];
	            this.scomplexVal = [];
	            this.int64Val = [];
	            this.boolVal = [];
	            this.uint32Val = [];
	            this.uint64Val = [];
	            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	        }

	        Tensor.prototype.dtype = 0;
	        Tensor.prototype.tensorShape = null;
	        Tensor.prototype.versionNumber = 0;
	        Tensor.prototype.tensorContent = $util.newBuffer([]);
	        Tensor.prototype.floatVal = $util.emptyArray;
	        Tensor.prototype.doubleVal = $util.emptyArray;
	        Tensor.prototype.intVal = $util.emptyArray;
	        Tensor.prototype.stringVal = $util.emptyArray;
	        Tensor.prototype.scomplexVal = $util.emptyArray;
	        Tensor.prototype.int64Val = $util.emptyArray;
	        Tensor.prototype.boolVal = $util.emptyArray;
	        Tensor.prototype.uint32Val = $util.emptyArray;
	        Tensor.prototype.uint64Val = $util.emptyArray;

	        Tensor.decode = function decode(r, l) {
	            if (!(r instanceof $Reader)) r = $Reader.create(r);
	            var c = l === undefined ? r.len : r.pos + l,
	                m = new $root.tensorflow.Tensor();
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                    case 1:
	                        m.dtype = r.int32();
	                        break;
	                    case 2:
	                        m.tensorShape = $root.tensorflow.TensorShape.decode(r, r.uint32());
	                        break;
	                    case 3:
	                        m.versionNumber = r.int32();
	                        break;
	                    case 4:
	                        m.tensorContent = r.bytes();
	                        break;
	                    case 5:
	                        if (!(m.floatVal && m.floatVal.length)) m.floatVal = [];
	                        if ((t & 7) === 2) {
	                            var c2 = r.uint32() + r.pos;
	                            while (r.pos < c2) m.floatVal.push(r.float());
	                        } else m.floatVal.push(r.float());
	                        break;
	                    case 6:
	                        if (!(m.doubleVal && m.doubleVal.length)) m.doubleVal = [];
	                        if ((t & 7) === 2) {
	                            var c2 = r.uint32() + r.pos;
	                            while (r.pos < c2) m.doubleVal.push(r.double());
	                        } else m.doubleVal.push(r.double());
	                        break;
	                    case 7:
	                        if (!(m.intVal && m.intVal.length)) m.intVal = [];
	                        if ((t & 7) === 2) {
	                            var c2 = r.uint32() + r.pos;
	                            while (r.pos < c2) m.intVal.push(r.int32());
	                        } else m.intVal.push(r.int32());
	                        break;
	                    case 8:
	                        if (!(m.stringVal && m.stringVal.length)) m.stringVal = [];
	                        m.stringVal.push(r.bytes());
	                        break;
	                    case 9:
	                        if (!(m.scomplexVal && m.scomplexVal.length)) m.scomplexVal = [];
	                        if ((t & 7) === 2) {
	                            var c2 = r.uint32() + r.pos;
	                            while (r.pos < c2) m.scomplexVal.push(r.float());
	                        } else m.scomplexVal.push(r.float());
	                        break;
	                    case 10:
	                        if (!(m.int64Val && m.int64Val.length)) m.int64Val = [];
	                        if ((t & 7) === 2) {
	                            var c2 = r.uint32() + r.pos;
	                            while (r.pos < c2) m.int64Val.push(r.int64());
	                        } else m.int64Val.push(r.int64());
	                        break;
	                    case 11:
	                        if (!(m.boolVal && m.boolVal.length)) m.boolVal = [];
	                        if ((t & 7) === 2) {
	                            var c2 = r.uint32() + r.pos;
	                            while (r.pos < c2) m.boolVal.push(r.bool());
	                        } else m.boolVal.push(r.bool());
	                        break;
	                    case 16:
	                        if (!(m.uint32Val && m.uint32Val.length)) m.uint32Val = [];
	                        if ((t & 7) === 2) {
	                            var c2 = r.uint32() + r.pos;
	                            while (r.pos < c2) m.uint32Val.push(r.uint32());
	                        } else m.uint32Val.push(r.uint32());
	                        break;
	                    case 17:
	                        if (!(m.uint64Val && m.uint64Val.length)) m.uint64Val = [];
	                        if ((t & 7) === 2) {
	                            var c2 = r.uint32() + r.pos;
	                            while (r.pos < c2) m.uint64Val.push(r.uint64());
	                        } else m.uint64Val.push(r.uint64());
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                }
	            }
	            return m;
	        };

	        return Tensor;
	    }();

	    tensorflow.AttrValue = function () {

	        function AttrValue(p) {
	            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	        }

	        AttrValue.prototype.list = null;
	        AttrValue.prototype.s = $util.newBuffer([]);
	        AttrValue.prototype.i = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
	        AttrValue.prototype.f = 0;
	        AttrValue.prototype.b = false;
	        AttrValue.prototype.type = 0;
	        AttrValue.prototype.shape = null;
	        AttrValue.prototype.tensor = null;
	        AttrValue.prototype.placeholder = "";
	        AttrValue.prototype.func = null;

	        let $oneOfFields;

	        Object.defineProperty(AttrValue.prototype, "value", {
	            get: $util.oneOfGetter($oneOfFields = ["list", "s", "i", "f", "b", "type", "shape", "tensor", "placeholder", "func"]),
	            set: $util.oneOfSetter($oneOfFields)
	        });

	        AttrValue.decode = function decode(r, l) {
	            if (!(r instanceof $Reader)) r = $Reader.create(r);
	            var c = l === undefined ? r.len : r.pos + l,
	                m = new $root.tensorflow.AttrValue();
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                    case 1:
	                        m.list = $root.tensorflow.AttrValue.ListValue.decode(r, r.uint32());
	                        break;
	                    case 2:
	                        m.s = r.bytes();
	                        break;
	                    case 3:
	                        m.i = r.int64();
	                        break;
	                    case 4:
	                        m.f = r.float();
	                        break;
	                    case 5:
	                        m.b = r.bool();
	                        break;
	                    case 6:
	                        m.type = r.int32();
	                        break;
	                    case 7:
	                        m.shape = $root.tensorflow.TensorShape.decode(r, r.uint32());
	                        break;
	                    case 8:
	                        m.tensor = $root.tensorflow.Tensor.decode(r, r.uint32());
	                        break;
	                    case 9:
	                        m.placeholder = r.string();
	                        break;
	                    case 10:
	                        m.func = $root.tensorflow.NameAttrList.decode(r, r.uint32());
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                }
	            }
	            return m;
	        };

	        AttrValue.ListValue = function () {

	            function ListValue(p) {
	                this.s = [];
	                this.i = [];
	                this.f = [];
	                this.b = [];
	                this.type = [];
	                this.shape = [];
	                this.tensor = [];
	                this.func = [];
	                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	            }

	            ListValue.prototype.s = $util.emptyArray;
	            ListValue.prototype.i = $util.emptyArray;
	            ListValue.prototype.f = $util.emptyArray;
	            ListValue.prototype.b = $util.emptyArray;
	            ListValue.prototype.type = $util.emptyArray;
	            ListValue.prototype.shape = $util.emptyArray;
	            ListValue.prototype.tensor = $util.emptyArray;
	            ListValue.prototype.func = $util.emptyArray;

	            ListValue.decode = function decode(r, l) {
	                if (!(r instanceof $Reader)) r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l,
	                    m = new $root.tensorflow.AttrValue.ListValue();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                        case 2:
	                            if (!(m.s && m.s.length)) m.s = [];
	                            m.s.push(r.bytes());
	                            break;
	                        case 3:
	                            if (!(m.i && m.i.length)) m.i = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2) m.i.push(r.int64());
	                            } else m.i.push(r.int64());
	                            break;
	                        case 4:
	                            if (!(m.f && m.f.length)) m.f = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2) m.f.push(r.float());
	                            } else m.f.push(r.float());
	                            break;
	                        case 5:
	                            if (!(m.b && m.b.length)) m.b = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2) m.b.push(r.bool());
	                            } else m.b.push(r.bool());
	                            break;
	                        case 6:
	                            if (!(m.type && m.type.length)) m.type = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2) m.type.push(r.int32());
	                            } else m.type.push(r.int32());
	                            break;
	                        case 7:
	                            if (!(m.shape && m.shape.length)) m.shape = [];
	                            m.shape.push($root.tensorflow.TensorShape.decode(r, r.uint32()));
	                            break;
	                        case 8:
	                            if (!(m.tensor && m.tensor.length)) m.tensor = [];
	                            m.tensor.push($root.tensorflow.Tensor.decode(r, r.uint32()));
	                            break;
	                        case 9:
	                            if (!(m.func && m.func.length)) m.func = [];
	                            m.func.push($root.tensorflow.NameAttrList.decode(r, r.uint32()));
	                            break;
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                    }
	                }
	                return m;
	            };

	            return ListValue;
	        }();

	        return AttrValue;
	    }();

	    tensorflow.NameAttrList = function () {

	        function NameAttrList(p) {
	            this.attr = {};
	            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	        }

	        NameAttrList.prototype.name = "";
	        NameAttrList.prototype.attr = $util.emptyObject;

	        NameAttrList.decode = function decode(r, l) {
	            if (!(r instanceof $Reader)) r = $Reader.create(r);
	            var c = l === undefined ? r.len : r.pos + l,
	                m = new $root.tensorflow.NameAttrList(),
	                k;
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                    case 1:
	                        m.name = r.string();
	                        break;
	                    case 2:
	                        r.skip().pos++;
	                        if (m.attr === $util.emptyObject) m.attr = {};
	                        k = r.string();
	                        r.pos++;
	                        m.attr[k] = $root.tensorflow.AttrValue.decode(r, r.uint32());
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                }
	            }
	            return m;
	        };

	        return NameAttrList;
	    }();

	    tensorflow.NodeDef = function () {

	        function NodeDef(p) {
	            this.input = [];
	            this.attr = {};
	            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	        }

	        NodeDef.prototype.name = "";
	        NodeDef.prototype.op = "";
	        NodeDef.prototype.input = $util.emptyArray;
	        NodeDef.prototype.device = "";
	        NodeDef.prototype.attr = $util.emptyObject;

	        NodeDef.decode = function decode(r, l) {
	            if (!(r instanceof $Reader)) r = $Reader.create(r);
	            var c = l === undefined ? r.len : r.pos + l,
	                m = new $root.tensorflow.NodeDef(),
	                k;
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                    case 1:
	                        m.name = r.string();
	                        break;
	                    case 2:
	                        m.op = r.string();
	                        break;
	                    case 3:
	                        if (!(m.input && m.input.length)) m.input = [];
	                        m.input.push(r.string());
	                        break;
	                    case 4:
	                        m.device = r.string();
	                        break;
	                    case 5:
	                        r.skip().pos++;
	                        if (m.attr === $util.emptyObject) m.attr = {};
	                        k = r.string();
	                        r.pos++;
	                        m.attr[k] = $root.tensorflow.AttrValue.decode(r, r.uint32());
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                }
	            }
	            return m;
	        };

	        return NodeDef;
	    }();

	    tensorflow.VersionDef = function () {

	        function VersionDef(p) {
	            this.badConsumers = [];
	            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	        }

	        VersionDef.prototype.producer = 0;
	        VersionDef.prototype.minConsumer = 0;
	        VersionDef.prototype.badConsumers = $util.emptyArray;

	        VersionDef.decode = function decode(r, l) {
	            if (!(r instanceof $Reader)) r = $Reader.create(r);
	            var c = l === undefined ? r.len : r.pos + l,
	                m = new $root.tensorflow.VersionDef();
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                    case 1:
	                        m.producer = r.int32();
	                        break;
	                    case 2:
	                        m.minConsumer = r.int32();
	                        break;
	                    case 3:
	                        if (!(m.badConsumers && m.badConsumers.length)) m.badConsumers = [];
	                        if ((t & 7) === 2) {
	                            var c2 = r.uint32() + r.pos;
	                            while (r.pos < c2) m.badConsumers.push(r.int32());
	                        } else m.badConsumers.push(r.int32());
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                }
	            }
	            return m;
	        };

	        return VersionDef;
	    }();

	    tensorflow.GraphDef = function () {

	        function GraphDef(p) {
	            this.node = [];
	            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	        }

	        GraphDef.prototype.node = $util.emptyArray;
	        GraphDef.prototype.versions = null;
	        GraphDef.prototype.library = null;

	        GraphDef.decode = function decode(r, l) {
	            if (!(r instanceof $Reader)) r = $Reader.create(r);
	            var c = l === undefined ? r.len : r.pos + l,
	                m = new $root.tensorflow.GraphDef();
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                    case 1:
	                        if (!(m.node && m.node.length)) m.node = [];
	                        m.node.push($root.tensorflow.NodeDef.decode(r, r.uint32()));
	                        break;
	                    case 4:
	                        m.versions = $root.tensorflow.VersionDef.decode(r, r.uint32());
	                        break;
	                    case 2:
	                        m.library = $root.tensorflow.FunctionDefLibrary.decode(r, r.uint32());
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                }
	            }
	            return m;
	        };

	        return GraphDef;
	    }();

	    tensorflow.CollectionDef = function () {

	        function CollectionDef(p) {
	            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	        }

	        CollectionDef.prototype.nodeList = null;
	        CollectionDef.prototype.bytesList = null;
	        CollectionDef.prototype.int64List = null;
	        CollectionDef.prototype.floatList = null;
	        CollectionDef.prototype.anyList = null;

	        let $oneOfFields;

	        Object.defineProperty(CollectionDef.prototype, "kind", {
	            get: $util.oneOfGetter($oneOfFields = ["nodeList", "bytesList", "int64List", "floatList", "anyList"]),
	            set: $util.oneOfSetter($oneOfFields)
	        });

	        CollectionDef.decode = function decode(r, l) {
	            if (!(r instanceof $Reader)) r = $Reader.create(r);
	            var c = l === undefined ? r.len : r.pos + l,
	                m = new $root.tensorflow.CollectionDef();
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                    case 1:
	                        m.nodeList = $root.tensorflow.CollectionDef.NodeList.decode(r, r.uint32());
	                        break;
	                    case 2:
	                        m.bytesList = $root.tensorflow.CollectionDef.BytesList.decode(r, r.uint32());
	                        break;
	                    case 3:
	                        m.int64List = $root.tensorflow.CollectionDef.Int64List.decode(r, r.uint32());
	                        break;
	                    case 4:
	                        m.floatList = $root.tensorflow.CollectionDef.FloatList.decode(r, r.uint32());
	                        break;
	                    case 5:
	                        m.anyList = $root.tensorflow.CollectionDef.AnyList.decode(r, r.uint32());
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                }
	            }
	            return m;
	        };

	        CollectionDef.NodeList = function () {

	            function NodeList(p) {
	                this.value = [];
	                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	            }

	            NodeList.prototype.value = $util.emptyArray;

	            NodeList.decode = function decode(r, l) {
	                if (!(r instanceof $Reader)) r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l,
	                    m = new $root.tensorflow.CollectionDef.NodeList();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                        case 1:
	                            if (!(m.value && m.value.length)) m.value = [];
	                            m.value.push(r.string());
	                            break;
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                    }
	                }
	                return m;
	            };

	            return NodeList;
	        }();

	        CollectionDef.BytesList = function () {

	            function BytesList(p) {
	                this.value = [];
	                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	            }

	            BytesList.prototype.value = $util.emptyArray;

	            BytesList.decode = function decode(r, l) {
	                if (!(r instanceof $Reader)) r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l,
	                    m = new $root.tensorflow.CollectionDef.BytesList();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                        case 1:
	                            if (!(m.value && m.value.length)) m.value = [];
	                            m.value.push(r.bytes());
	                            break;
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                    }
	                }
	                return m;
	            };

	            return BytesList;
	        }();

	        CollectionDef.Int64List = function () {

	            function Int64List(p) {
	                this.value = [];
	                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	            }

	            Int64List.prototype.value = $util.emptyArray;

	            Int64List.decode = function decode(r, l) {
	                if (!(r instanceof $Reader)) r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l,
	                    m = new $root.tensorflow.CollectionDef.Int64List();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                        case 1:
	                            if (!(m.value && m.value.length)) m.value = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2) m.value.push(r.int64());
	                            } else m.value.push(r.int64());
	                            break;
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                    }
	                }
	                return m;
	            };

	            return Int64List;
	        }();

	        CollectionDef.FloatList = function () {

	            function FloatList(p) {
	                this.value = [];
	                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	            }

	            FloatList.prototype.value = $util.emptyArray;

	            FloatList.decode = function decode(r, l) {
	                if (!(r instanceof $Reader)) r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l,
	                    m = new $root.tensorflow.CollectionDef.FloatList();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                        case 1:
	                            if (!(m.value && m.value.length)) m.value = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2) m.value.push(r.float());
	                            } else m.value.push(r.float());
	                            break;
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                    }
	                }
	                return m;
	            };

	            return FloatList;
	        }();

	        CollectionDef.AnyList = function () {

	            function AnyList(p) {
	                this.value = [];
	                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	            }

	            AnyList.prototype.value = $util.emptyArray;

	            AnyList.decode = function decode(r, l) {
	                if (!(r instanceof $Reader)) r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l,
	                    m = new $root.tensorflow.CollectionDef.AnyList();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                        case 1:
	                            if (!(m.value && m.value.length)) m.value = [];
	                            m.value.push($root.tensorflow.Any.decode(r, r.uint32()));
	                            break;
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                    }
	                }
	                return m;
	            };

	            return AnyList;
	        }();

	        return CollectionDef;
	    }();

	    tensorflow.SaverDef = function () {

	        function SaverDef(p) {
	            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	        }

	        SaverDef.prototype.filenameTensorName = "";
	        SaverDef.prototype.saveTensorName = "";
	        SaverDef.prototype.restoreOpName = "";
	        SaverDef.prototype.maxToKeep = 0;
	        SaverDef.prototype.sharded = false;
	        SaverDef.prototype.keepCheckpointEveryNHours = 0;
	        SaverDef.prototype.version = 0;

	        SaverDef.decode = function decode(r, l) {
	            if (!(r instanceof $Reader)) r = $Reader.create(r);
	            var c = l === undefined ? r.len : r.pos + l,
	                m = new $root.tensorflow.SaverDef();
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                    case 1:
	                        m.filenameTensorName = r.string();
	                        break;
	                    case 2:
	                        m.saveTensorName = r.string();
	                        break;
	                    case 3:
	                        m.restoreOpName = r.string();
	                        break;
	                    case 4:
	                        m.maxToKeep = r.int32();
	                        break;
	                    case 5:
	                        m.sharded = r.bool();
	                        break;
	                    case 6:
	                        m.keepCheckpointEveryNHours = r.float();
	                        break;
	                    case 7:
	                        m.version = r.int32();
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                }
	            }
	            return m;
	        };

	        SaverDef.CheckpointFormatVersion = function () {
	            const valuesById = {},
	                  values = Object.create(valuesById);
	            values[valuesById[0] = "LEGACY"] = 0;
	            values[valuesById[1] = "V1"] = 1;
	            values[valuesById[2] = "V2"] = 2;
	            return values;
	        }();

	        return SaverDef;
	    }();

	    tensorflow.TensorInfo = function () {

	        function TensorInfo(p) {
	            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	        }

	        TensorInfo.prototype.name = "";
	        TensorInfo.prototype.cooSparse = null;
	        TensorInfo.prototype.dtype = 0;
	        TensorInfo.prototype.tensorShape = null;

	        let $oneOfFields;

	        Object.defineProperty(TensorInfo.prototype, "encoding", {
	            get: $util.oneOfGetter($oneOfFields = ["name", "cooSparse"]),
	            set: $util.oneOfSetter($oneOfFields)
	        });

	        TensorInfo.decode = function decode(r, l) {
	            if (!(r instanceof $Reader)) r = $Reader.create(r);
	            var c = l === undefined ? r.len : r.pos + l,
	                m = new $root.tensorflow.TensorInfo();
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                    case 1:
	                        m.name = r.string();
	                        break;
	                    case 4:
	                        m.cooSparse = $root.tensorflow.TensorInfo.CooSparse.decode(r, r.uint32());
	                        break;
	                    case 2:
	                        m.dtype = r.int32();
	                        break;
	                    case 3:
	                        m.tensorShape = $root.tensorflow.TensorShape.decode(r, r.uint32());
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                }
	            }
	            return m;
	        };

	        TensorInfo.CooSparse = function () {

	            function CooSparse(p) {
	                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	            }

	            CooSparse.prototype.valuesTensorName = "";
	            CooSparse.prototype.indicesTensorName = "";
	            CooSparse.prototype.denseShapeTensorName = "";

	            CooSparse.decode = function decode(r, l) {
	                if (!(r instanceof $Reader)) r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l,
	                    m = new $root.tensorflow.TensorInfo.CooSparse();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                        case 1:
	                            m.valuesTensorName = r.string();
	                            break;
	                        case 2:
	                            m.indicesTensorName = r.string();
	                            break;
	                        case 3:
	                            m.denseShapeTensorName = r.string();
	                            break;
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                    }
	                }
	                return m;
	            };

	            return CooSparse;
	        }();

	        return TensorInfo;
	    }();

	    tensorflow.SignatureDef = function () {

	        function SignatureDef(p) {
	            this.inputs = {};
	            this.outputs = {};
	            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	        }

	        SignatureDef.prototype.inputs = $util.emptyObject;
	        SignatureDef.prototype.outputs = $util.emptyObject;
	        SignatureDef.prototype.methodName = "";

	        SignatureDef.decode = function decode(r, l) {
	            if (!(r instanceof $Reader)) r = $Reader.create(r);
	            var c = l === undefined ? r.len : r.pos + l,
	                m = new $root.tensorflow.SignatureDef(),
	                k;
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                    case 1:
	                        r.skip().pos++;
	                        if (m.inputs === $util.emptyObject) m.inputs = {};
	                        k = r.string();
	                        r.pos++;
	                        m.inputs[k] = $root.tensorflow.TensorInfo.decode(r, r.uint32());
	                        break;
	                    case 2:
	                        r.skip().pos++;
	                        if (m.outputs === $util.emptyObject) m.outputs = {};
	                        k = r.string();
	                        r.pos++;
	                        m.outputs[k] = $root.tensorflow.TensorInfo.decode(r, r.uint32());
	                        break;
	                    case 3:
	                        m.methodName = r.string();
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                }
	            }
	            return m;
	        };

	        return SignatureDef;
	    }();

	    tensorflow.AssetFileDef = function () {

	        function AssetFileDef(p) {
	            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	        }

	        AssetFileDef.prototype.tensorInfo = null;
	        AssetFileDef.prototype.filename = "";

	        AssetFileDef.decode = function decode(r, l) {
	            if (!(r instanceof $Reader)) r = $Reader.create(r);
	            var c = l === undefined ? r.len : r.pos + l,
	                m = new $root.tensorflow.AssetFileDef();
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                    case 1:
	                        m.tensorInfo = $root.tensorflow.TensorInfo.decode(r, r.uint32());
	                        break;
	                    case 2:
	                        m.filename = r.string();
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                }
	            }
	            return m;
	        };

	        return AssetFileDef;
	    }();

	    tensorflow.OpDef = function () {

	        function OpDef(p) {
	            this.inputArg = [];
	            this.outputArg = [];
	            this.attr = [];
	            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	        }

	        OpDef.prototype.name = "";
	        OpDef.prototype.inputArg = $util.emptyArray;
	        OpDef.prototype.outputArg = $util.emptyArray;
	        OpDef.prototype.attr = $util.emptyArray;
	        OpDef.prototype.deprecation = null;
	        OpDef.prototype.summary = "";
	        OpDef.prototype.description = "";
	        OpDef.prototype.isCommutative = false;
	        OpDef.prototype.isAggregate = false;
	        OpDef.prototype.isStateful = false;
	        OpDef.prototype.allowsUninitializedInput = false;

	        OpDef.decode = function decode(r, l) {
	            if (!(r instanceof $Reader)) r = $Reader.create(r);
	            var c = l === undefined ? r.len : r.pos + l,
	                m = new $root.tensorflow.OpDef();
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                    case 1:
	                        m.name = r.string();
	                        break;
	                    case 2:
	                        if (!(m.inputArg && m.inputArg.length)) m.inputArg = [];
	                        m.inputArg.push($root.tensorflow.OpDef.ArgDef.decode(r, r.uint32()));
	                        break;
	                    case 3:
	                        if (!(m.outputArg && m.outputArg.length)) m.outputArg = [];
	                        m.outputArg.push($root.tensorflow.OpDef.ArgDef.decode(r, r.uint32()));
	                        break;
	                    case 4:
	                        if (!(m.attr && m.attr.length)) m.attr = [];
	                        m.attr.push($root.tensorflow.OpDef.AttrDef.decode(r, r.uint32()));
	                        break;
	                    case 8:
	                        m.deprecation = $root.tensorflow.OpDef.OpDeprecation.decode(r, r.uint32());
	                        break;
	                    case 5:
	                        m.summary = r.string();
	                        break;
	                    case 6:
	                        m.description = r.string();
	                        break;
	                    case 18:
	                        m.isCommutative = r.bool();
	                        break;
	                    case 16:
	                        m.isAggregate = r.bool();
	                        break;
	                    case 17:
	                        m.isStateful = r.bool();
	                        break;
	                    case 19:
	                        m.allowsUninitializedInput = r.bool();
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                }
	            }
	            return m;
	        };

	        OpDef.ArgDef = function () {

	            function ArgDef(p) {
	                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	            }

	            ArgDef.prototype.name = "";
	            ArgDef.prototype.description = "";
	            ArgDef.prototype.type = 0;
	            ArgDef.prototype.typeAttr = "";
	            ArgDef.prototype.numberAttr = "";
	            ArgDef.prototype.typeListAttr = "";
	            ArgDef.prototype.isRef = false;

	            ArgDef.decode = function decode(r, l) {
	                if (!(r instanceof $Reader)) r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l,
	                    m = new $root.tensorflow.OpDef.ArgDef();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                        case 1:
	                            m.name = r.string();
	                            break;
	                        case 2:
	                            m.description = r.string();
	                            break;
	                        case 3:
	                            m.type = r.int32();
	                            break;
	                        case 4:
	                            m.typeAttr = r.string();
	                            break;
	                        case 5:
	                            m.numberAttr = r.string();
	                            break;
	                        case 6:
	                            m.typeListAttr = r.string();
	                            break;
	                        case 16:
	                            m.isRef = r.bool();
	                            break;
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                    }
	                }
	                return m;
	            };

	            return ArgDef;
	        }();

	        OpDef.AttrDef = function () {

	            function AttrDef(p) {
	                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	            }

	            AttrDef.prototype.name = "";
	            AttrDef.prototype.type = "";
	            AttrDef.prototype.defaultValue = null;
	            AttrDef.prototype.description = "";
	            AttrDef.prototype.hasMinimum = false;
	            AttrDef.prototype.minimum = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
	            AttrDef.prototype.allowedValues = null;

	            AttrDef.decode = function decode(r, l) {
	                if (!(r instanceof $Reader)) r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l,
	                    m = new $root.tensorflow.OpDef.AttrDef();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                        case 1:
	                            m.name = r.string();
	                            break;
	                        case 2:
	                            m.type = r.string();
	                            break;
	                        case 3:
	                            m.defaultValue = $root.tensorflow.AttrValue.decode(r, r.uint32());
	                            break;
	                        case 4:
	                            m.description = r.string();
	                            break;
	                        case 5:
	                            m.hasMinimum = r.bool();
	                            break;
	                        case 6:
	                            m.minimum = r.int64();
	                            break;
	                        case 7:
	                            m.allowedValues = $root.tensorflow.AttrValue.decode(r, r.uint32());
	                            break;
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                    }
	                }
	                return m;
	            };

	            return AttrDef;
	        }();

	        OpDef.OpDeprecation = function () {

	            function OpDeprecation(p) {
	                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	            }

	            OpDeprecation.prototype.version = 0;
	            OpDeprecation.prototype.explanation = "";

	            OpDeprecation.decode = function decode(r, l) {
	                if (!(r instanceof $Reader)) r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l,
	                    m = new $root.tensorflow.OpDef.OpDeprecation();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                        case 1:
	                            m.version = r.int32();
	                            break;
	                        case 2:
	                            m.explanation = r.string();
	                            break;
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                    }
	                }
	                return m;
	            };

	            return OpDeprecation;
	        }();

	        return OpDef;
	    }();

	    tensorflow.OpList = function () {

	        function OpList(p) {
	            this.op = [];
	            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	        }

	        OpList.prototype.op = $util.emptyArray;

	        OpList.decode = function decode(r, l) {
	            if (!(r instanceof $Reader)) r = $Reader.create(r);
	            var c = l === undefined ? r.len : r.pos + l,
	                m = new $root.tensorflow.OpList();
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                    case 1:
	                        if (!(m.op && m.op.length)) m.op = [];
	                        m.op.push($root.tensorflow.OpDef.decode(r, r.uint32()));
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                }
	            }
	            return m;
	        };

	        return OpList;
	    }();

	    tensorflow.MetaGraphDef = function () {

	        function MetaGraphDef(p) {
	            this.collectionDef = {};
	            this.signatureDef = {};
	            this.assetFileDef = [];
	            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	        }

	        MetaGraphDef.prototype.metaInfoDef = null;
	        MetaGraphDef.prototype.graphDef = null;
	        MetaGraphDef.prototype.saverDef = null;
	        MetaGraphDef.prototype.collectionDef = $util.emptyObject;
	        MetaGraphDef.prototype.signatureDef = $util.emptyObject;
	        MetaGraphDef.prototype.assetFileDef = $util.emptyArray;

	        MetaGraphDef.decode = function decode(r, l) {
	            if (!(r instanceof $Reader)) r = $Reader.create(r);
	            var c = l === undefined ? r.len : r.pos + l,
	                m = new $root.tensorflow.MetaGraphDef(),
	                k;
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                    case 1:
	                        m.metaInfoDef = $root.tensorflow.MetaGraphDef.MetaInfoDef.decode(r, r.uint32());
	                        break;
	                    case 2:
	                        m.graphDef = $root.tensorflow.GraphDef.decode(r, r.uint32());
	                        break;
	                    case 3:
	                        m.saverDef = $root.tensorflow.SaverDef.decode(r, r.uint32());
	                        break;
	                    case 4:
	                        r.skip().pos++;
	                        if (m.collectionDef === $util.emptyObject) m.collectionDef = {};
	                        k = r.string();
	                        r.pos++;
	                        m.collectionDef[k] = $root.tensorflow.CollectionDef.decode(r, r.uint32());
	                        break;
	                    case 5:
	                        r.skip().pos++;
	                        if (m.signatureDef === $util.emptyObject) m.signatureDef = {};
	                        k = r.string();
	                        r.pos++;
	                        m.signatureDef[k] = $root.tensorflow.SignatureDef.decode(r, r.uint32());
	                        break;
	                    case 6:
	                        if (!(m.assetFileDef && m.assetFileDef.length)) m.assetFileDef = [];
	                        m.assetFileDef.push($root.tensorflow.AssetFileDef.decode(r, r.uint32()));
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                }
	            }
	            return m;
	        };

	        MetaGraphDef.MetaInfoDef = function () {

	            function MetaInfoDef(p) {
	                this.tags = [];
	                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	            }

	            MetaInfoDef.prototype.metaGraphVersion = "";
	            MetaInfoDef.prototype.strippedOpList = null;
	            MetaInfoDef.prototype.anyInfo = null;
	            MetaInfoDef.prototype.tags = $util.emptyArray;
	            MetaInfoDef.prototype.tensorflowVersion = "";
	            MetaInfoDef.prototype.tensorflowGitVersion = "";

	            MetaInfoDef.decode = function decode(r, l) {
	                if (!(r instanceof $Reader)) r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l,
	                    m = new $root.tensorflow.MetaGraphDef.MetaInfoDef();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                        case 1:
	                            m.metaGraphVersion = r.string();
	                            break;
	                        case 2:
	                            m.strippedOpList = $root.tensorflow.OpList.decode(r, r.uint32());
	                            break;
	                        case 3:
	                            m.anyInfo = $root.tensorflow.Any.decode(r, r.uint32());
	                            break;
	                        case 4:
	                            if (!(m.tags && m.tags.length)) m.tags = [];
	                            m.tags.push(r.string());
	                            break;
	                        case 5:
	                            m.tensorflowVersion = r.string();
	                            break;
	                        case 6:
	                            m.tensorflowGitVersion = r.string();
	                            break;
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                    }
	                }
	                return m;
	            };

	            return MetaInfoDef;
	        }();

	        return MetaGraphDef;
	    }();

	    tensorflow.SavedModel = function () {

	        function SavedModel(p) {
	            this.metaGraphs = [];
	            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	        }

	        SavedModel.prototype.savedModelSchemaVersion = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
	        SavedModel.prototype.metaGraphs = $util.emptyArray;

	        SavedModel.decode = function decode(r, l) {
	            if (!(r instanceof $Reader)) r = $Reader.create(r);
	            var c = l === undefined ? r.len : r.pos + l,
	                m = new $root.tensorflow.SavedModel();
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                    case 1:
	                        m.savedModelSchemaVersion = r.int64();
	                        break;
	                    case 2:
	                        if (!(m.metaGraphs && m.metaGraphs.length)) m.metaGraphs = [];
	                        m.metaGraphs.push($root.tensorflow.MetaGraphDef.decode(r, r.uint32()));
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                }
	            }
	            return m;
	        };

	        return SavedModel;
	    }();

	    tensorflow.FunctionDefLibrary = function () {

	        function FunctionDefLibrary(p) {
	            this["function"] = [];
	            this.gradient = [];
	            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	        }

	        FunctionDefLibrary.prototype["function"] = $util.emptyArray;
	        FunctionDefLibrary.prototype.gradient = $util.emptyArray;

	        FunctionDefLibrary.decode = function decode(r, l) {
	            if (!(r instanceof $Reader)) r = $Reader.create(r);
	            var c = l === undefined ? r.len : r.pos + l,
	                m = new $root.tensorflow.FunctionDefLibrary();
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                    case 1:
	                        if (!(m["function"] && m["function"].length)) m["function"] = [];
	                        m["function"].push($root.tensorflow.FunctionDef.decode(r, r.uint32()));
	                        break;
	                    case 2:
	                        if (!(m.gradient && m.gradient.length)) m.gradient = [];
	                        m.gradient.push($root.tensorflow.GradientDef.decode(r, r.uint32()));
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                }
	            }
	            return m;
	        };

	        return FunctionDefLibrary;
	    }();

	    tensorflow.FunctionDef = function () {

	        function FunctionDef(p) {
	            this.attr = {};
	            this.nodeDef = [];
	            this.ret = {};
	            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	        }

	        FunctionDef.prototype.signature = null;
	        FunctionDef.prototype.attr = $util.emptyObject;
	        FunctionDef.prototype.nodeDef = $util.emptyArray;
	        FunctionDef.prototype.ret = $util.emptyObject;

	        FunctionDef.decode = function decode(r, l) {
	            if (!(r instanceof $Reader)) r = $Reader.create(r);
	            var c = l === undefined ? r.len : r.pos + l,
	                m = new $root.tensorflow.FunctionDef(),
	                k;
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                    case 1:
	                        m.signature = $root.tensorflow.OpDef.decode(r, r.uint32());
	                        break;
	                    case 5:
	                        r.skip().pos++;
	                        if (m.attr === $util.emptyObject) m.attr = {};
	                        k = r.string();
	                        r.pos++;
	                        m.attr[k] = $root.tensorflow.AttrValue.decode(r, r.uint32());
	                        break;
	                    case 3:
	                        if (!(m.nodeDef && m.nodeDef.length)) m.nodeDef = [];
	                        m.nodeDef.push($root.tensorflow.NodeDef.decode(r, r.uint32()));
	                        break;
	                    case 4:
	                        r.skip().pos++;
	                        if (m.ret === $util.emptyObject) m.ret = {};
	                        k = r.string();
	                        r.pos++;
	                        m.ret[k] = r.string();
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                }
	            }
	            return m;
	        };

	        return FunctionDef;
	    }();

	    tensorflow.GradientDef = function () {

	        function GradientDef(p) {
	            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
	        }

	        GradientDef.prototype.functionName = "";
	        GradientDef.prototype.gradientFunc = "";

	        GradientDef.decode = function decode(r, l) {
	            if (!(r instanceof $Reader)) r = $Reader.create(r);
	            var c = l === undefined ? r.len : r.pos + l,
	                m = new $root.tensorflow.GradientDef();
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                    case 1:
	                        m.functionName = r.string();
	                        break;
	                    case 2:
	                        m.gradientFunc = r.string();
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                }
	            }
	            return m;
	        };

	        return GradientDef;
	    }();

	    return tensorflow;
	}();

	function getParamValue(paramName, node, tensorMap, context) {
	    var param = node.params[paramName];
	    if (param && param.inputIndex !== undefined) {
	        if (param.type === 'tensor') {
	            return getTensor(node.inputNames[param.inputIndex], tensorMap, context);
	        }
	        if (param.type === 'tensors') {
	            var inputs = param.inputIndex === 0 ? param.inputParamLength === 0 ? node.inputNames : node.inputNames.slice(param.inputIndex, -param.inputParamLength) : node.inputNames.splice(param.inputIndex);
	            return inputs.map(function (name) {
	                return getTensor(name, tensorMap, context);
	            });
	        }
	        var data = Array.prototype.slice.call(getTensor(node.inputNames.slice(param.inputIndex)[0], tensorMap, context).dataSync());
	        return param.type === 'number' ? data[0] : data;
	    }
	    return param && param.value;
	}
	function getTensor(name, tensorsMap, context) {
	    var _a = parseNodeName(name),
	        nodeName = _a[0],
	        index = _a[1];
	    var contextId = context.currentContextIds.find(function (contextId) {
	        return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];
	    });
	    return contextId !== undefined ? tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] : undefined;
	}
	function getNodeNameAndIndex(inputName, context) {
	    var _a = parseNodeName(inputName),
	        nodeName = _a[0],
	        index = _a[1];
	    return [getNodeNameWithContextId(nodeName, context && context.currentContextId), index];
	}
	function getNodeNameWithContextId(name, contextId) {
	    return !!contextId ? name + "-" + contextId : name;
	}
	function parseNodeName(name) {
	    var index = name.lastIndexOf(':');
	    if (index === -1) return [name, 0];
	    var nodeName = name.substring(0, index);
	    return [nodeName, Number(name.substring(index + 1))];
	}
	function split$1(arr, size) {
	    var res = [];
	    for (var i = 0; i < arr.length; i += size) {
	        res.push(arr.slice(i, i + size));
	    }
	    return res;
	}

	var arithmetic = [{
	  "tfOpName": "Add",
	  "dlOpName": "add",
	  "category": "arithmetic",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "b",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "BiasAdd",
	  "dlOpName": "add",
	  "category": "arithmetic",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "b",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Sub",
	  "dlOpName": "sub",
	  "category": "arithmetic",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "b",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "RealDiv",
	  "dlOpName": "div",
	  "category": "arithmetic",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "b",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Div",
	  "dlOpName": "div",
	  "category": "arithmetic",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "b",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "FloorDiv",
	  "dlOpName": "floorDiv",
	  "category": "arithmetic",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "b",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Mul",
	  "dlOpName": "mul",
	  "category": "arithmetic",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "b",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Maximum",
	  "dlOpName": "maximum",
	  "category": "arithmetic",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "b",
	    "type": "tensor"
	  }]
	}, {
	  "tfOpName": "Minimum",
	  "dlOpName": "minimum",
	  "category": "arithmetic",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "b",
	    "type": "tensor"
	  }]
	}, {
	  "tfOpName": "Pow",
	  "dlOpName": "pow",
	  "category": "arithmetic",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "b",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "SquaredDifference",
	  "dlOpName": "squaredDifference",
	  "category": "arithmetic",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "b",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Mod",
	  "dlOpName": "mod",
	  "category": "arithmetic",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "b",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}];

	var arithmetic$1 = /*#__PURE__*/Object.freeze({
		default: arithmetic
	});

	var basic_math = [{
	  "tfOpName": "Abs",
	  "dlOpName": "abs",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Acos",
	  "dlOpName": "acos",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Asin",
	  "dlOpName": "asin",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "atan",
	  "dlOpName": "atan",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Ceil",
	  "dlOpName": "ceil",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "ClipByValue",
	  "dlOpName": "clipByValue",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "clip_value_min",
	    "dlParamName": "clipValueMin",
	    "type": "number"
	  }, {
	    "tfParamName": "clip_value_max",
	    "dlParamName": "clipValueMax",
	    "type": "number"
	  }]
	}, {
	  "tfOpName": "Cos",
	  "dlOpName": "cos",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Cosh",
	  "dlOpName": "cosh",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Elu",
	  "dlOpName": "elu",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Exp",
	  "dlOpName": "exp",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Floor",
	  "dlOpName": "floor",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Log",
	  "dlOpName": "log",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Neg",
	  "dlOpName": "neg",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Relu",
	  "dlOpName": "relu",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Relu6",
	  "dlOpName": "clipByValue",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }, {
	    "dlParamName": "clipValueMin",
	    "type": "number",
	    "defaultValue": 0
	  }, {
	    "dlParamName": "clipValueMax",
	    "type": "number",
	    "defaultValue": 6
	  }]
	}, {
	  "tfOpName": "Selu",
	  "dlOpName": "selu",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Sigmoid",
	  "dlOpName": "sigmoid",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Sin",
	  "dlOpName": "sin",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Sinh",
	  "dlOpName": "sinh",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Sqrt",
	  "dlOpName": "sqrt",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Rsqrt",
	  "dlOpName": "rsqrt",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Square",
	  "dlOpName": "square",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Tan",
	  "dlOpName": "tan",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Tanh",
	  "dlOpName": "tanh",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Sign",
	  "dlOpName": "sign",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Round",
	  "dlOpName": "round",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Expm1",
	  "dlOpName": "expm1",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Log1p",
	  "dlOpName": "log1p",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Reciprocal",
	  "dlOpName": "reciprocal",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Reciprocal",
	  "dlOpName": "reciprocal",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Softplus",
	  "dlOpName": "softplus",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Asinh",
	  "dlOpName": "asinh",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Acosh",
	  "dlOpName": "acosh",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Atanh",
	  "dlOpName": "atanh",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Erf",
	  "dlOpName": "erf",
	  "category": "basic_math",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}];

	var basicMath = /*#__PURE__*/Object.freeze({
		default: basic_math
	});

	var control = [{
	  "tfOpName": "LoopCond",
	  "dlOpName": "loopCond",
	  "category": "control",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "pred",
	    "type": "tensor"
	  }]
	}, {
	  "tfOpName": "Switch",
	  "dlOpName": "switch",
	  "category": "control",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "data",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "pred",
	    "type": "tensor"
	  }]
	}, {
	  "tfOpName": "Merge",
	  "dlOpName": "merge",
	  "category": "control",
	  "params": [{
	    "tfInputIndex": 0,
	    "tfInputParamLength": 0,
	    "dlParamName": "tensors",
	    "type": "tensors"
	  }]
	}, {
	  "tfOpName": "Enter",
	  "dlOpName": "enter",
	  "category": "control",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "tensor",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }, {
	    "tfParamName": "frame_name",
	    "dlParamName": "frameName",
	    "type": "string"
	  }, {
	    "tfParamName": "is_constant",
	    "dlParamName": "isConstant",
	    "type": "bool"
	  }]
	}, {
	  "tfOpName": "Exit",
	  "dlOpName": "exit",
	  "category": "control",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "tensor",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "NextIteration",
	  "dlOpName": "nextIteration",
	  "category": "control",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "tensor",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}];

	var control$1 = /*#__PURE__*/Object.freeze({
		default: control
	});

	var convolution = [{
	  "tfOpName": "AvgPool",
	  "dlOpName": "avgPool",
	  "category": "convolution",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "strides",
	    "dlParamName": "strides",
	    "type": "number[]"
	  }, {
	    "tfParamName": "padding",
	    "dlParamName": "pad",
	    "type": "string"
	  }, {
	    "tfParamName": "data_format",
	    "dlParamName": "dataFormat",
	    "type": "string",
	    "notSupported": true
	  }, {
	    "tfParamName": "ksize",
	    "dlParamName": "kernelSize",
	    "type": "number[]"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "MaxPool",
	  "dlOpName": "maxPool",
	  "category": "convolution",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "strides",
	    "dlParamName": "strides",
	    "type": "number[]"
	  }, {
	    "tfParamName": "padding",
	    "dlParamName": "pad",
	    "type": "string"
	  }, {
	    "tfParamName": "data_format",
	    "dlParamName": "dataFormat",
	    "type": "string",
	    "notSupported": true
	  }, {
	    "tfParamName": "ksize",
	    "dlParamName": "kernelSize",
	    "type": "number[]"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Conv1D",
	  "dlOpName": "conv1d",
	  "category": "convolution",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "filter",
	    "type": "tensor"
	  }, {
	    "tfParamName": "stride",
	    "dlParamName": "stride",
	    "type": "number"
	  }, {
	    "tfParamName": "padding",
	    "dlParamName": "pad",
	    "type": "string"
	  }, {
	    "tfParamName": "data_format",
	    "dlParamName": "dataFormat",
	    "type": "string",
	    "defaultValue": "NWC"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }, {
	    "tfParamName": "dilation",
	    "dlParamName": "dilation",
	    "type": "number",
	    "defaultValue": 1
	  }]
	}, {
	  "tfOpName": "Conv2D",
	  "dlOpName": "conv2d",
	  "category": "convolution",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "filter",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }, {
	    "tfParamName": "strides",
	    "dlParamName": "strides",
	    "type": "number[]"
	  }, {
	    "tfParamName": "padding",
	    "dlParamName": "pad",
	    "type": "string"
	  }, {
	    "tfParamName": "useCudnnOnGpu",
	    "dlParamName": "useCudnnOnGpu",
	    "type": "bool"
	  }, {
	    "tfParamName": "data_format",
	    "dlParamName": "dataFormat",
	    "type": "string",
	    "defaultValue": "NHWC"
	  }, {
	    "tfParamName": "dilations",
	    "dlParamName": "dilations",
	    "type": "number[]"
	  }]
	}, {
	  "tfOpName": "Conv2DBackpropInput",
	  "dlOpName": "conv2dTranspose",
	  "category": "convolution",
	  "params": [{
	    "tfInputIndex": 2,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "filter",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 0,
	    "dlParamName": "outputShape",
	    "type": "number[]"
	  }, {
	    "tfParamName": "strides",
	    "dlParamName": "strides",
	    "type": "number[]"
	  }, {
	    "tfParamName": "padding",
	    "dlParamName": "pad",
	    "type": "string"
	  }, {
	    "tfParamName": "data_format",
	    "dlParamName": "dataFormat",
	    "type": "string",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "DepthwiseConv2d",
	  "dlOpName": "depthwiseConv2d",
	  "category": "convolution",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "input",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "filter",
	    "type": "tensor"
	  }, {
	    "tfParamName": "strides",
	    "dlParamName": "strides",
	    "type": "number[]"
	  }, {
	    "tfParamName": "padding",
	    "dlParamName": "pad",
	    "type": "string"
	  }, {
	    "tfParamName": "data_format",
	    "dlParamName": "dataFormat",
	    "type": "string",
	    "defaultValue": "NHWC"
	  }, {
	    "tfParamName": "dilations",
	    "dlParamName": "dilations",
	    "type": "number[]"
	  }]
	}, {
	  "tfOpName": "DepthwiseConv2dNative",
	  "dlOpName": "depthwiseConv2d",
	  "category": "convolution",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "input",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "filter",
	    "type": "tensor"
	  }, {
	    "tfParamName": "strides",
	    "dlParamName": "strides",
	    "type": "number[]"
	  }, {
	    "tfParamName": "padding",
	    "dlParamName": "pad",
	    "type": "string"
	  }, {
	    "tfParamName": "data_format",
	    "dlParamName": "dataFormat",
	    "type": "string",
	    "defaultValue": "NHWC"
	  }, {
	    "tfParamName": "dilations",
	    "dlParamName": "dilations",
	    "type": "number[]"
	  }]
	}];

	var convolution$1 = /*#__PURE__*/Object.freeze({
		default: convolution
	});

	var creation = [{
	  "tfOpName": "Fill",
	  "dlOpName": "fill",
	  "category": "creation",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "shape",
	    "type": "number[]"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "value",
	    "type": "number"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "LinSpace",
	  "dlOpName": "linspace",
	  "category": "creation",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "start",
	    "type": "number"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "stop",
	    "type": "number"
	  }, {
	    "tfInputIndex": 2,
	    "dlParamName": "num",
	    "type": "number"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "OneHot",
	  "dlOpName": "oneHot",
	  "category": "creation",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "indices",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "depth",
	    "type": "number"
	  }, {
	    "tfInputIndex": 2,
	    "dlParamName": "onValue",
	    "type": "number",
	    "defaultValue": 1
	  }, {
	    "tfInputIndex": 3,
	    "dlParamName": "offValue",
	    "type": "number",
	    "defaultValue": 0
	  }, {
	    "tfParamName": "axis",
	    "dlParamName": "axis",
	    "type": "number",
	    "notSupported": true
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Ones",
	  "dlOpName": "ones",
	  "category": "creation",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "shape",
	    "type": "number[]"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype"
	  }]
	}, {
	  "tfOpName": "OnesLike",
	  "dlOpName": "onesLike",
	  "category": "creation",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "dtype",
	    "dlParamName": "dtype",
	    "type": "dtype"
	  }]
	}, {
	  "tfOpName": "RandomUniform",
	  "dlOpName": "randomUniform",
	  "category": "creation",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "shape",
	    "type": "number[]"
	  }, {
	    "tfParamName": "minval",
	    "dlParamName": "minval",
	    "type": "number",
	    "defaultValue": 0
	  }, {
	    "tfParamName": "maxval",
	    "dlParamName": "maxval",
	    "type": "number",
	    "defaultValue": 1
	  }, {
	    "tfParamName": "dtype",
	    "dlParamName": "dtype",
	    "type": "dtype"
	  }, {
	    "tfParamName": "seed",
	    "dlParamName": "seed",
	    "type": "number",
	    "defaultValue": 0
	  }, {
	    "tfParamName": "seed2",
	    "dlParamName": "seed2",
	    "type": "number",
	    "defaultValue": 0,
	    "notSupported": true
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "T",
	    "type": "number",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Range",
	  "dlOpName": "range",
	  "category": "creation",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "start",
	    "type": "number"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "stop",
	    "type": "number"
	  }, {
	    "tfInputIndex": 2,
	    "dlParamName": "step",
	    "type": "number",
	    "defaultValue": 0
	  }, {
	    "tfParamName": "Tidx",
	    "dlParamName": "dtype",
	    "type": "dtype"
	  }]
	}, {
	  "tfOpName": "truncatedNormal",
	  "dlOpName": "truncatedNormal",
	  "category": "creation",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "shape",
	    "type": "number[]"
	  }, {
	    "tfParamName": "means",
	    "dlParamName": "mean",
	    "type": "number",
	    "defaultValue": 0.0
	  }, {
	    "tfParamName": "stddev",
	    "dlParamName": "stdDev",
	    "type": "number",
	    "defaultValue": 1.0
	  }, {
	    "tfParamName": "seed",
	    "dlParamName": "seed",
	    "type": "number"
	  }, {
	    "tfParamName": "seed2",
	    "dlParamName": "seed2",
	    "type": "number",
	    "defaultValue": 0,
	    "notSupported": true
	  }, {
	    "tfParamName": "dtype",
	    "dlParamName": "dtype",
	    "type": "dtype"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "T",
	    "type": "number",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Zeros",
	  "dlOpName": "zeros",
	  "category": "creation",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "shape",
	    "type": "number[]"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype"
	  }]
	}, {
	  "tfOpName": "ZerosLike",
	  "dlOpName": "zerosLike",
	  "category": "creation",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype"
	  }]
	}];

	var creation$1 = /*#__PURE__*/Object.freeze({
		default: creation
	});

	var graph = [{
	  "tfOpName": "PlaceholderWithDefault",
	  "dlOpName": "placeholder",
	  "category": "graph",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "default",
	    "type": "tensor"
	  }, {
	    "tfParamName": "shape",
	    "dlParamName": "shape",
	    "type": "shape"
	  }, {
	    "tfParamName": "dtype",
	    "dlParamName": "dtype",
	    "type": "dtype"
	  }]
	}, {
	  "tfOpName": "Placeholder",
	  "dlOpName": "placeholder",
	  "category": "graph",
	  "params": [{
	    "tfParamName": "shape",
	    "dlParamName": "shape",
	    "type": "shape"
	  }, {
	    "tfParamName": "dtype",
	    "dlParamName": "dtype",
	    "type": "dtype"
	  }]
	}, {
	  "tfOpName": "Const",
	  "dlOpName": "const",
	  "category": "graph"
	}, {
	  "tfOpName": "Identity",
	  "dlOpName": "identity",
	  "category": "graph",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }]
	}, {
	  "tfOpName": "Snapshot",
	  "dlOpName": "snapshot",
	  "category": "graph",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }]
	}, {
	  "tfOpName": "Rank",
	  "dlOpName": "rank",
	  "category": "graph",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }]
	}, {
	  "tfOpName": "Size",
	  "dlOpName": "size",
	  "category": "graph",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }]
	}, {
	  "tfOpName": "Shape",
	  "dlOpName": "shape",
	  "category": "graph",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }]
	}, {
	  "tfOpName": "Print",
	  "dlOpName": "print",
	  "category": "graph",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "tfInputParamLength": 1,
	    "dlParamName": "data",
	    "type": "tensors"
	  }, {
	    "tfParamName": "message",
	    "dlParamName": "message",
	    "type": "string"
	  }, {
	    "tfParamName": "first_n",
	    "dlParamName": "firstN",
	    "type": "number",
	    "notSupprted": true
	  }, {
	    "tfParamName": "summarize",
	    "dlParamName": "summarize",
	    "type": "number",
	    "defaultValue": 3
	  }]
	}, {
	  "tfOpName": "NoOp",
	  "dlOpName": "noop",
	  "category": "graph",
	  "params": []
	}, {
	  "tfOpName": "StopGradient",
	  "dlOpName": "stopGradient",
	  "category": "graph",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }]
	}, {
	  "tfOpName": "FakeQuantWithMinMaxVars",
	  "dlOpName": "fakeQuantWithMinMaxVars",
	  "category": "graph",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "min",
	    "dlParamName": "min",
	    "type": "number"
	  }, {
	    "tfParamName": "max",
	    "dlParamName": "max",
	    "type": "number"
	  }]
	}];

	var graph$1 = /*#__PURE__*/Object.freeze({
		default: graph
	});

	var image$1 = [{
	  "tfOpName": "ResizeBilinear",
	  "dlOpName": "resizeBilinear",
	  "category": "image",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "images",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "size",
	    "type": "number[]"
	  }, {
	    "tfParamName": "align_corners",
	    "dlParamName": "alignCorners",
	    "type": "bool"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "ResizeNearestNeighbor",
	  "dlOpName": "resizeNearestNeighbor",
	  "category": "image",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "images",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "size",
	    "type": "number[]"
	  }, {
	    "tfParamName": "align_corners",
	    "dlParamName": "alignCorners",
	    "type": "bool"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}];

	var image$2 = /*#__PURE__*/Object.freeze({
		default: image$1
	});

	var logical = [{
	  "tfOpName": "Equal",
	  "dlOpName": "equal",
	  "category": "logical",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "b",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "NotEqual",
	  "dlOpName": "notEqual",
	  "category": "logical",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "b",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Greater",
	  "dlOpName": "greater",
	  "category": "logical",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "b",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "GreaterEqual",
	  "dlOpName": "greaterEqual",
	  "category": "logical",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "b",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Less",
	  "dlOpName": "less",
	  "category": "logical",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "b",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "LessEqual",
	  "dlOpName": "lessEqual",
	  "category": "logical",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "b",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "LogicalAnd",
	  "dlOpName": "logicalAnd",
	  "category": "logical",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "b",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "LogicalNot",
	  "dlOpName": "logicalNot",
	  "category": "logical",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "LogicalOr",
	  "dlOpName": "logicalOr",
	  "category": "logical",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "b",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Select",
	  "dlOpName": "where",
	  "category": "logical",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "condition",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 2,
	    "dlParamName": "b",
	    "type": "tensor"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}];

	var logical$1 = /*#__PURE__*/Object.freeze({
		default: logical
	});

	var matrices = [{
	  "tfOpName": "MatMul",
	  "dlOpName": "matMul",
	  "category": "matrices",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "a",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "b",
	    "type": "tensor"
	  }, {
	    "tfParamName": "transpose_a",
	    "dlParamName": "transposeA",
	    "type": "bool",
	    "defaultValue": false
	  }, {
	    "tfParamName": "transpose_b",
	    "dlParamName": "transposeB",
	    "type": "bool",
	    "defaultValue": false
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Transpose",
	  "dlOpName": "transpose",
	  "category": "matrices",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "perm",
	    "dlParamName": "perm",
	    "type": "number[]"
	  }, {
	    "tfParamName": "T",
	    "dlParamName": "dtype",
	    "type": "dtype",
	    "notSupported": true
	  }]
	}];

	var matrices$1 = /*#__PURE__*/Object.freeze({
		default: matrices
	});

	var normalization = [{
	  "tfOpName": "FusedBatchNorm",
	  "dlOpName": "batchNormalization",
	  "category": "normalization",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "scale",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 2,
	    "dlParamName": "offset",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 3,
	    "dlParamName": "mean",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 4,
	    "dlParamName": "variance",
	    "type": "tensor"
	  }, {
	    "tfParamName": "epsilon",
	    "dlParamName": "epsilon",
	    "type": "number",
	    "defaultValue": 0.001
	  }, {
	    "tfParamName": "data_format",
	    "dlParamName": "dataFormat",
	    "type": "string",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "FusedBatchNormV2",
	  "dlOpName": "batchNormalization",
	  "category": "normalization",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "scale",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 2,
	    "dlParamName": "offset",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 3,
	    "dlParamName": "mean",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 4,
	    "dlParamName": "variance",
	    "type": "tensor"
	  }, {
	    "tfParamName": "epsilon",
	    "dlParamName": "epsilon",
	    "type": "number",
	    "defaultValue": 0.001
	  }, {
	    "tfParamName": "data_format",
	    "dlParamName": "dataFormat",
	    "type": "string",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "LRN",
	  "dlOpName": "localResponseNormalization",
	  "category": "normalization",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "depth_radius",
	    "dlParamName": "radius",
	    "type": "number",
	    "defaultValue": 5
	  }, {
	    "tfParamName": "bias",
	    "dlParamName": "bias",
	    "type": "number",
	    "defaultValue": 1.0
	  }, {
	    "tfParamName": "alpha",
	    "dlParamName": "alpha",
	    "type": "number",
	    "defaultValue": 1.0
	  }, {
	    "tfParamName": "beta",
	    "dlParamName": "beta",
	    "type": "number",
	    "defaultValue": 0.5
	  }]
	}, {
	  "tfOpName": "Softmax",
	  "dlOpName": "softmax",
	  "category": "normalization",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }]
	}];

	var normalization$1 = /*#__PURE__*/Object.freeze({
		default: normalization
	});

	var reduction = [{
	  "tfOpName": "Max",
	  "dlOpName": "max",
	  "category": "reduction",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "axis",
	    "type": "number[]"
	  }, {
	    "tfParamName": "keep_dims",
	    "dlParamName": "keepDims",
	    "type": "bool"
	  }]
	}, {
	  "tfOpName": "Mean",
	  "dlOpName": "mean",
	  "category": "reduction",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "axis",
	    "type": "number[]"
	  }, {
	    "tfParamName": "keep_dims",
	    "dlParamName": "keepDims",
	    "type": "bool"
	  }]
	}, {
	  "tfOpName": "Min",
	  "dlOpName": "min",
	  "category": "reduction",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "axis",
	    "type": "number[]"
	  }, {
	    "tfParamName": "keep_dims",
	    "dlParamName": "keepDims",
	    "type": "bool"
	  }]
	}, {
	  "tfOpName": "Sum",
	  "dlOpName": "sum",
	  "category": "reduction",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "axis",
	    "type": "number[]"
	  }, {
	    "tfParamName": "keep_dims",
	    "dlParamName": "keepDims",
	    "type": "bool"
	  }]
	}, {
	  "tfOpName": "ArgMax",
	  "dlOpName": "argMax",
	  "category": "reduction",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "axis",
	    "type": "number"
	  }]
	}, {
	  "tfOpName": "ArgMin",
	  "dlOpName": "argMin",
	  "category": "reduction",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "axis",
	    "type": "number"
	  }]
	}];

	var reduction$1 = /*#__PURE__*/Object.freeze({
		default: reduction
	});

	var slice_join = [{
	  "tfOpName": "ConcatV2",
	  "dlOpName": "concat",
	  "category": "slice_join",
	  "params": [{
	    "tfInputIndex": 0,
	    "tfInputParamLength": 1,
	    "dlParamName": "tensors",
	    "type": "tensors"
	  }, {
	    "tfInputIndex": -1,
	    "dlParamName": "axis",
	    "type": "number"
	  }]
	}, {
	  "tfOpName": "Concat",
	  "dlOpName": "concat",
	  "category": "slice_join",
	  "params": [{
	    "tfInputIndex": 1,
	    "tfInputParamLength": 1,
	    "dlParamName": "tensors",
	    "type": "tensors"
	  }, {
	    "tfInputIndex": 0,
	    "dlParamName": "axis",
	    "type": "number"
	  }]
	}, {
	  "tfOpName": "GatherV2",
	  "dlOpName": "gather",
	  "category": "slice_join",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "indices",
	    "type": "tensor"
	  }, {
	    "tfParamName": "axis",
	    "dlParamName": "axis",
	    "type": "number",
	    "defaultValue": 0
	  }]
	}, {
	  "tfOpName": "Gather",
	  "dlOpName": "gather",
	  "category": "slice_join",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "indices",
	    "type": "tensor"
	  }, {
	    "tfParamName": "axis",
	    "dlParamName": "axis",
	    "type": "number",
	    "defaultValue": 0
	  }, {
	    "tfParamName": "validate_indices",
	    "dlParamName": "validateIndices",
	    "type": "bool",
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Reverse",
	  "dlOpName": "reverse",
	  "category": "slice_join",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "axis",
	    "type": "number"
	  }]
	}, {
	  "tfOpName": "ReverseV2",
	  "dlOpName": "reverse",
	  "category": "slice_join",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "axis",
	    "type": "number"
	  }]
	}, {
	  "tfOpName": "Slice",
	  "dlOpName": "slice",
	  "category": "slice_join",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "begin",
	    "type": "number[]"
	  }, {
	    "tfInputIndex": 2,
	    "dlParamName": "size",
	    "type": "number[]"
	  }]
	}, {
	  "tfOpName": "StridedSlice",
	  "dlOpName": "stridedSlice",
	  "category": "slice_join",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "begin",
	    "type": "number[]"
	  }, {
	    "tfInputIndex": 2,
	    "dlParamName": "end",
	    "type": "number[]"
	  }, {
	    "tfInputIndex": 3,
	    "dlParamName": "strides",
	    "type": "number[]"
	  }, {
	    "tfParamName": "begin_mask",
	    "dlParamName": "beginMask",
	    "type": "number",
	    "defaultValue": 0
	  }, {
	    "tfParamName": "end_mask",
	    "dlParamName": "endMask",
	    "type": "number",
	    "defaultValue": 0
	  }]
	}, {
	  "tfOpName": "Pack",
	  "dlOpName": "stack",
	  "category": "slice_join",
	  "params": [{
	    "tfInputIndex": 0,
	    "tfInputParamLength": 0,
	    "dlParamName": "tensors",
	    "type": "tensors"
	  }, {
	    "tfParamName": "axis",
	    "dlParamName": "axis",
	    "type": "number",
	    "defaultValue": 0
	  }]
	}, {
	  "tfOpName": "Unpack",
	  "dlOpName": "unstack",
	  "category": "slice_join",
	  "params": [{
	    "tfInputIndex": 0,
	    "tfInputParamLength": 0,
	    "dlParamName": "tensor",
	    "type": "tensor"
	  }, {
	    "tfParamName": "axis",
	    "dlParamName": "axis",
	    "type": "number",
	    "defaultValue": 0
	  }, {
	    "tfParamName": "num",
	    "dlParamName": "num",
	    "type": "number",
	    "defaultValue": 0,
	    "notSupported": true
	  }]
	}, {
	  "tfOpName": "Tile",
	  "dlOpName": "tile",
	  "category": "slice_join",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "reps",
	    "type": "number[]"
	  }]
	}, {
	  "tfOpName": "Split",
	  "dlOpName": "split",
	  "category": "slice_join",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "axis",
	    "type": "number",
	    "defaultValue": 0
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "num_split",
	    "dlParamName": "numOrSizeSplits",
	    "type": "number",
	    "defaultValue": 1
	  }]
	}];

	var sliceJoin = /*#__PURE__*/Object.freeze({
		default: slice_join
	});

	var transformation = [{
	  "tfOpName": "Cast",
	  "dlOpName": "cast",
	  "category": "transformation",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "SrcT",
	    "dlParamName": "sdtype",
	    "type": "dtype",
	    "notSupported": true
	  }, {
	    "tfParamName": "DstT",
	    "dlParamName": "dtype",
	    "type": "dtype"
	  }]
	}, {
	  "tfOpName": "ExpandDims",
	  "dlOpName": "expandDims",
	  "category": "transformation",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "tfParamNameDeprecated": "dim",
	    "dlParamName": "axis",
	    "type": "number"
	  }]
	}, {
	  "tfOpName": "Pad",
	  "dlOpName": "pad",
	  "category": "transformation",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "padding",
	    "type": "number[]"
	  }, {
	    "tfParamName": "constant_value",
	    "dlParamName": "constantValue",
	    "type": "number",
	    "defaultValue": 0
	  }]
	}, {
	  "tfOpName": "PadV2",
	  "dlOpName": "pad",
	  "category": "transformation",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "padding",
	    "type": "number[]"
	  }, {
	    "tfInputIndex": 2,
	    "dlParamName": "constantValue",
	    "type": "number",
	    "defaultValue": 0
	  }]
	}, {
	  "tfOpName": "Reshape",
	  "dlOpName": "reshape",
	  "category": "transformation",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfInputIndex": 1,
	    "dlParamName": "shape",
	    "type": "number[]"
	  }]
	}, {
	  "tfOpName": "Squeeze",
	  "dlOpName": "squeeze",
	  "category": "transformation",
	  "params": [{
	    "tfInputIndex": 0,
	    "dlParamName": "x",
	    "type": "tensor"
	  }, {
	    "tfParamName": "axis",
	    "tfParamNameDeprecated": "squeeze_dims",
	    "dlParamName": "axis",
	    "type": "number[]"
	  }]
	}];

	var transformation$1 = /*#__PURE__*/Object.freeze({
		default: transformation
	});

	var CONTROL_FLOW_OPS = ['Switch', 'Merge', 'Enter', 'Exit', 'NextIteration'];
	var OperationMapper = function () {
	    function OperationMapper() {
	        var ops = [arithmetic$1, basicMath, control$1, convolution$1, creation$1, logical$1, image$2, graph$1, matrices$1, normalization$1, reduction$1, sliceJoin, transformation$1];
	        var mappersJson = [].concat.apply([], ops.map(function (op) {
	            return op.default ? op.default : op;
	        }));
	        this.opMappers = mappersJson.reduce(function (map, mapper) {
	            map[mapper.tfOpName] = mapper;
	            return map;
	        }, {});
	    }
	    Object.defineProperty(OperationMapper, "Instance", {
	        get: function () {
	            return this._instance || (this._instance = new this());
	        },
	        enumerable: true,
	        configurable: true
	    });
	    OperationMapper.prototype.isControlFlow = function (node) {
	        return CONTROL_FLOW_OPS.some(function (op) {
	            return op === node.op;
	        });
	    };
	    OperationMapper.prototype.transformGraph = function (graph$$1) {
	        var _this = this;
	        var tfNodes = graph$$1.node;
	        var withControlFlow = false;
	        var placeholders = [];
	        var nodes = tfNodes.reduce(function (map, node) {
	            map[node.name] = _this.mapNode(node);
	            if (_this.isControlFlow(node)) withControlFlow = true;
	            if (node.op === 'Placeholder') placeholders.push(map[node.name]);
	            return map;
	        }, {});
	        var inputs = [];
	        var outputs = [];
	        Object.keys(nodes).forEach(function (key) {
	            var node = nodes[key];
	            node.inputNames.forEach(function (name) {
	                var nodeName = getNodeNameAndIndex(name)[0];
	                node.inputs.push(nodes[nodeName]);
	                nodes[nodeName].children.push(node);
	            });
	            if (node.inputs.length === 0) inputs.push(node);
	        });
	        Object.keys(nodes).forEach(function (key) {
	            var node = nodes[key];
	            if (node.children.length === 0) outputs.push(node);
	        });
	        return { nodes: nodes, inputs: inputs, outputs: outputs, placeholders: placeholders, withControlFlow: withControlFlow };
	    };
	    OperationMapper.prototype.mapNode = function (node) {
	        var _this = this;
	        var mapper = this.opMappers[node.op];
	        if (mapper === undefined) {
	            throw new Error('Tensorflow Op is not supported: ' + node.op);
	        }
	        var newNode = {
	            name: node.name,
	            op: mapper.dlOpName,
	            category: mapper.category,
	            inputNames: (node.input || []).map(function (input) {
	                return input.startsWith('^') ? input.substr(1) : input;
	            }),
	            inputs: [],
	            children: [],
	            params: {}
	        };
	        if (!!mapper.params) {
	            newNode.params = mapper.params.reduce(function (map, param) {
	                var inputIndex = param.tfInputIndex;
	                var inputParamLength = param.tfInputParamLength;
	                var type = param.type;
	                var value = undefined;
	                if (inputIndex === undefined) {
	                    switch (param.type) {
	                        case 'string':
	                            value = _this.getStringParam(node.attr, param.tfParamName, param.defaultValue);
	                            if (value === undefined && !!param.tfParamNameDeprecated) {
	                                value = _this.getStringParam(node.attr, param.tfParamNameDeprecated, param.defaultValue);
	                            }
	                            break;
	                        case 'number':
	                            value = _this.getNumberParam(node.attr, param.tfParamName, param.defaultValue);
	                            if (value === undefined && !!param.tfParamNameDeprecated) {
	                                value = _this.getNumberParam(node.attr, param.tfParamNameDeprecated, param.defaultValue);
	                            }
	                            break;
	                        case 'number[]':
	                            value = _this.getNumericArrayParam(node.attr, param.tfParamName, param.defaultValue);
	                            if (value === undefined && !!param.tfParamNameDeprecated) {
	                                value = _this.getNumericArrayParam(node.attr, param.tfParamNameDeprecated, param.defaultValue);
	                            }
	                            break;
	                        case 'bool':
	                            value = _this.getBoolParam(node.attr, param.tfParamName, param.defaultValue);
	                            if (value === undefined && !!param.tfParamNameDeprecated) {
	                                value = _this.getBoolParam(node.attr, param.tfParamNameDeprecated, param.defaultValue);
	                            }
	                            break;
	                        case 'shape':
	                            value = _this.getTensorShapeParam(node.attr, param.tfParamName, param.defaultValue);
	                            if (value === undefined && !!param.tfParamNameDeprecated) {
	                                value = _this.getTensorShapeParam(node.attr, param.tfParamNameDeprecated, param.defaultValue);
	                            }
	                            break;
	                        case 'dtype':
	                            value = _this.getDtypeParam(node.attr, param.tfParamName, param.defaultValue);
	                            if (value === undefined && !!param.tfParamNameDeprecated) {
	                                value = _this.getDtypeParam(node.attr, param.tfParamNameDeprecated, param.defaultValue);
	                            }
	                            break;
	                        case 'tensor':
	                        case 'tensors':
	                            break;
	                        default:
	                            throw new Error("Unsupported param type: " + param.type + " for op: " + node.op);
	                    }
	                }
	                map[param.dlParamName] = { value: value, inputIndex: inputIndex, type: type, inputParamLength: inputParamLength };
	                return map;
	            }, {});
	        }
	        return newNode;
	    };
	    OperationMapper.prototype.getStringParam = function (attrs, name, def, keepCase) {
	        if (keepCase === void 0) {
	            keepCase = false;
	        }
	        var param = attrs[name];
	        if (param !== undefined) {
	            var value = String.fromCharCode.apply(null, param.s);
	            return keepCase ? value : value.toLowerCase();
	        }
	        return def;
	    };
	    OperationMapper.prototype.getBoolParam = function (attrs, name, def) {
	        var param = attrs[name];
	        return param ? param.b : def;
	    };
	    OperationMapper.prototype.getNumberParam = function (attrs, name, def) {
	        var param = attrs[name];
	        var value = param ? param.f !== undefined ? param.f : param.i : def;
	        return typeof value === 'number' ? value : value['toInt']();
	    };
	    OperationMapper.prototype.getDtypeParam = function (attrs, name, def) {
	        var param = attrs[name];
	        if (param && param.type) {
	            switch (param.type) {
	                case tensorflow.DataType.DT_FLOAT:
	                    return 'float32';
	                case tensorflow.DataType.DT_INT32:
	                    return 'int32';
	                case tensorflow.DataType.DT_BOOL:
	                    return 'bool';
	                default:
	                    return def;
	            }
	        }
	        return def;
	    };
	    OperationMapper.prototype.getTensorShapeParam = function (attrs, name, def) {
	        var param = attrs[name];
	        if (param && param.shape) {
	            return param.shape.dim.map(function (dim) {
	                return dim.size;
	            });
	        }
	        return def;
	    };
	    OperationMapper.prototype.getNumericArrayParam = function (attrs, name, def) {
	        var param = attrs[name];
	        if (param) {
	            return (param.list.f && param.list.f.length ? param.list.f : param.list.i).map(function (v) {
	                return typeof v === 'number' ? v : v['toInt']();
	            });
	        }
	        return def;
	    };
	    return OperationMapper;
	}();

	var executeOp = function (node, tensorMap, context) {
	    switch (node.op) {
	        case 'add':
	            {
	                return [add(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
	            }
	        case 'mod':
	            return [mod(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
	        case 'mul':
	            return [mul(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
	        case 'div':
	            {
	                return [div(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
	            }
	        case 'floorDiv':
	            {
	                return [floorDiv(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
	            }
	        case 'sub':
	            {
	                return [sub(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
	            }
	        case 'minimum':
	            {
	                return [minimum(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
	            }
	        case 'maximum':
	            {
	                return [maximum(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
	            }
	        case 'pow':
	            {
	                return [pow(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
	            }
	        case 'squaredDifference':
	            {
	                return [squaredDifference(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
	            }
	        default:
	            throw TypeError("Node type " + node.op + " is not implemented");
	    }
	};

	var executeOp$1 = function (node, tensorMap, context) {
	    switch (node.op) {
	        case 'abs':
	            return [abs(getParamValue('x', node, tensorMap, context))];
	        case 'acos':
	            return [acos(getParamValue('x', node, tensorMap, context))];
	        case 'acosh':
	            return [acosh(getParamValue('x', node, tensorMap, context))];
	        case 'asin':
	            return [asin(getParamValue('x', node, tensorMap, context))];
	        case 'asinh':
	            return [asinh(getParamValue('x', node, tensorMap, context))];
	        case 'atan':
	            return [atan(getParamValue('x', node, tensorMap, context))];
	        case 'atanh':
	            return [atanh(getParamValue('x', node, tensorMap, context))];
	        case 'ceil':
	            return [ceil(getParamValue('x', node, tensorMap, context))];
	        case 'cos':
	            return [cos(getParamValue('x', node, tensorMap, context))];
	        case 'cosh':
	            return [cosh(getParamValue('x', node, tensorMap, context))];
	        case 'elu':
	            return [elu(getParamValue('x', node, tensorMap, context))];
	        case 'erf':
	            return [erf(getParamValue('x', node, tensorMap, context))];
	        case 'exp':
	            return [exp(getParamValue('x', node, tensorMap, context))];
	        case 'expm1':
	            {
	                return [expm1(getParamValue('x', node, tensorMap, context))];
	            }
	        case 'floor':
	            return [floor(getParamValue('x', node, tensorMap, context))];
	        case 'log':
	            return [log(getParamValue('x', node, tensorMap, context))];
	        case 'log1p':
	            {
	                return [log1p(getParamValue('x', node, tensorMap, context))];
	            }
	        case 'neg':
	            return [neg(getParamValue('x', node, tensorMap, context))];
	        case 'reciprocal':
	            {
	                return [reciprocal(getParamValue('x', node, tensorMap, context))];
	            }
	        case 'relu':
	            return [relu(getParamValue('x', node, tensorMap, context))];
	        case 'round':
	            {
	                return [round(getParamValue('x', node, tensorMap, context))];
	            }
	        case 'selu':
	            return [selu(getParamValue('x', node, tensorMap, context))];
	        case 'sigmoid':
	            return [sigmoid(getParamValue('x', node, tensorMap, context))];
	        case 'sin':
	            return [sin(getParamValue('x', node, tensorMap, context))];
	        case 'sign':
	            {
	                return [sign(getParamValue('x', node, tensorMap, context))];
	            }
	        case 'sinh':
	            {
	                return [sinh(getParamValue('x', node, tensorMap, context))];
	            }
	        case 'softplus':
	            {
	                return [softplus(getParamValue('x', node, tensorMap, context))];
	            }
	        case 'sqrt':
	            {
	                return [sqrt(getParamValue('x', node, tensorMap, context))];
	            }
	        case 'square':
	            {
	                return [square(getParamValue('x', node, tensorMap, context))];
	            }
	        case 'tanh':
	            {
	                return [tanh$1(getParamValue('x', node, tensorMap, context))];
	            }
	        case 'tan':
	            return [tan(getParamValue('x', node, tensorMap, context))];
	        case 'clipByValue':
	            return [clipByValue(getParamValue('x', node, tensorMap, context), getParamValue('clipValueMin', node, tensorMap, context), getParamValue('clipValueMax', node, tensorMap, context))];
	        case 'rsqrt':
	            return [div(scalar(1.0, 'float32'), sqrt(getTensor(node.inputNames[0], tensorMap, context)))];
	        default:
	            throw TypeError("Node type " + node.op + " is not implemented");
	    }
	};

	var __awaiter$2 = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step(generator["throw"](value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$2 = undefined && undefined.__generator || function (thisArg, body) {
	    var _ = { label: 0, sent: function () {
	            if (t[0] & 1) throw t[1];return t[1];
	        }, trys: [], ops: [] },
	        f,
	        y,
	        t,
	        g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
	        return this;
	    }), g;
	    function verb(n) {
	        return function (v) {
	            return step([n, v]);
	        };
	    }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [0, t.value];
	            switch (op[0]) {
	                case 0:case 1:
	                    t = op;break;
	                case 4:
	                    _.label++;return { value: op[1], done: false };
	                case 5:
	                    _.label++;y = op[1];op = [0];continue;
	                case 7:
	                    op = _.ops.pop();_.trys.pop();continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
	                        _ = 0;continue;
	                    }
	                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
	                        _.label = op[1];break;
	                    }
	                    if (op[0] === 6 && _.label < t[1]) {
	                        _.label = t[1];t = op;break;
	                    }
	                    if (t && _.label < t[2]) {
	                        _.label = t[2];_.ops.push(op);break;
	                    }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop();continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) {
	            op = [6, e];y = 0;
	        } finally {
	            f = t = 0;
	        }
	        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	function executeOp$2(node, tensorMap, context) {
	    return __awaiter$2(this, void 0, void 0, function () {
	        var _a, pred, data_1, inputName, frameId, data, tensor, input;
	        return __generator$2(this, function (_b) {
	            switch (_b.label) {
	                case 0:
	                    _a = node.op;
	                    switch (_a) {
	                        case 'loopCond':
	                            return [3, 1];
	                        case 'switch':
	                            return [3, 2];
	                        case 'merge':
	                            return [3, 4];
	                        case 'enter':
	                            return [3, 5];
	                        case 'exit':
	                            return [3, 6];
	                        case 'nextIteration':
	                            return [3, 7];
	                    }
	                    return [3, 8];
	                case 1:
	                    return [2, [getParamValue('pred', node, tensorMap, context)]];
	                case 2:
	                    pred = getParamValue('pred', node, tensorMap, context);
	                    data_1 = getParamValue('data', node, tensorMap, context);
	                    return [4, pred.data()];
	                case 3:
	                    return [2, _b.sent()[0] ? [undefined, data_1] : [data_1, undefined]];
	                case 4:
	                    inputName = node.inputNames.find(function (name) {
	                        return getTensor(name, tensorMap, context) !== undefined;
	                    });
	                    return [2, inputName ? [getTensor(inputName, tensorMap, context)] : undefined];
	                case 5:
	                    frameId = getParamValue('frameName', node, tensorMap, context);
	                    data = getParamValue('tensor', node, tensorMap, context);
	                    context.enterFrame(frameId);
	                    return [2, [data]];
	                case 6:
	                    tensor = getParamValue('tensor', node, tensorMap, context);
	                    context.exitFrame();
	                    return [2, [tensor]];
	                case 7:
	                    input = getParamValue('tensor', node, tensorMap, context);
	                    context.nextIteration();
	                    return [2, [input]];
	                case 8:
	                    throw TypeError("Node type " + node.op + " is not implemented");
	            }
	        });
	    });
	}

	var executeOp$3 = function (node, tensorMap, context) {
	    switch (node.op) {
	        case 'conv1d':
	            {
	                var stride = getParamValue('stride', node, tensorMap, context);
	                var pad$$1 = getParamValue('pad', node, tensorMap, context);
	                var dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();
	                var dilation = getParamValue('dilation', node, tensorMap, context);
	                return [conv1d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), stride, pad$$1, dataFormat, dilation)];
	            }
	        case 'conv2d':
	            {
	                var stride = getParamValue('strides', node, tensorMap, context);
	                var pad$$1 = getParamValue('pad', node, tensorMap, context);
	                var dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();
	                var dilations = getParamValue('dilations', node, tensorMap, context);
	                return [conv2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad$$1, dataFormat, [dilations[0], dilations[1]])];
	            }
	        case 'conv2dTranspose':
	            {
	                var shape = getParamValue('outputShape', node, tensorMap, context);
	                var stride = getParamValue('strides', node, tensorMap, context);
	                var pad$$1 = getParamValue('pad', node, tensorMap, context);
	                return [conv2dTranspose(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), shape, [stride[1], stride[2]], pad$$1)];
	            }
	        case 'depthwiseConv2d':
	            {
	                var stride = getParamValue('strides', node, tensorMap, context);
	                var pad$$1 = getParamValue('pad', node, tensorMap, context);
	                var dilations = getParamValue('dilations', node, tensorMap, context);
	                var dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();
	                return [depthwiseConv2d(getParamValue('input', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad$$1, dataFormat, [dilations[0], dilations[1]])];
	            }
	        case 'avgPool':
	            {
	                var stride = getParamValue('strides', node, tensorMap, context);
	                var pad$$1 = getParamValue('pad', node, tensorMap, context);
	                var kernelSize = getParamValue('kernelSize', node, tensorMap, context);
	                return [avgPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad$$1)];
	            }
	        case 'maxPool':
	            {
	                var stride = getParamValue('strides', node, tensorMap, context);
	                var pad$$1 = getParamValue('pad', node, tensorMap, context);
	                var kernelSize = getParamValue('kernelSize', node, tensorMap, context);
	                return [maxPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad$$1)];
	            }
	        default:
	            throw TypeError("Node type " + node.op + " is not implemented");
	    }
	};

	var executeOp$4 = function (node, tensorMap, context) {
	    switch (node.op) {
	        case 'fill':
	            {
	                var shape = getParamValue('shape', node, tensorMap, context);
	                var value = getParamValue('value', node, tensorMap, context);
	                return [fill(shape, value)];
	            }
	        case 'linspace':
	            {
	                var start = getParamValue('start', node, tensorMap, context);
	                var stop_1 = getParamValue('stop', node, tensorMap, context);
	                var num = getParamValue('num', node, tensorMap, context);
	                return [linspace(start, stop_1, num)];
	            }
	        case 'oneHot':
	            {
	                var indices = getParamValue('indices', node, tensorMap, context);
	                var depth = getParamValue('depth', node, tensorMap, context);
	                var onValue = getParamValue('onValue', node, tensorMap, context);
	                var offValue = getParamValue('offValue', node, tensorMap, context);
	                return [oneHot(indices, depth, onValue, offValue)];
	            }
	        case 'ones':
	            {
	                return [ones(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];
	            }
	        case 'onesLike':
	            {
	                return [onesLike(getParamValue('x', node, tensorMap, context))];
	            }
	        case 'randomUniform':
	            {
	                return [randomUniform(getParamValue('shape', node, tensorMap, context), getParamValue('minval', node, tensorMap, context), getParamValue('maxval', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];
	            }
	        case 'range':
	            {
	                var start = getParamValue('start', node, tensorMap, context);
	                var stop_2 = getParamValue('stop', node, tensorMap, context);
	                var step$$1 = getParamValue('step', node, tensorMap, context);
	                return [range(start, stop_2, step$$1, getParamValue('dtype', node, tensorMap, context))];
	            }
	        case 'truncatedNormal':
	            {
	                var shape = getParamValue('shape', node, tensorMap, context);
	                var mean$$1 = getParamValue('mean', node, tensorMap, context);
	                var stdDev = getParamValue('stdDev', node, tensorMap, context);
	                var seed = getParamValue('seed', node, tensorMap, context);
	                return [truncatedNormal(shape, mean$$1, stdDev, getParamValue('dtype', node, tensorMap, context), seed)];
	            }
	        case 'zeros':
	            {
	                return [zeros(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];
	            }
	        case 'zerosLike':
	            {
	                return [zerosLike(getParamValue('x', node, tensorMap, context))];
	            }
	        default:
	            throw TypeError("Node type " + node.op + " is not implemented");
	    }
	};

	var executeOp$5 = function (node, tensorMap, context) {
	    switch (node.op) {
	        case 'const':
	            {
	                return tensorMap[node.name];
	            }
	        case 'placeholder':
	            var def = getParamValue('default', node, tensorMap, context);
	            return [getTensor(node.name, tensorMap, context) || def];
	        case 'identity':
	        case 'stopGradient':
	        case 'fakeQuantWithMinMaxVars':
	            return [getParamValue('x', node, tensorMap, context)];
	        case 'snapshot':
	            var snapshot = getParamValue('x', node, tensorMap, context);
	            return [snapshot.clone()];
	        case 'shape':
	            return [tensor1d(getParamValue('x', node, tensorMap, context).shape, 'int32')];
	        case 'size':
	            return [scalar(getParamValue('x', node, tensorMap, context).size, 'int32')];
	        case 'rank':
	            return [scalar(getParamValue('x', node, tensorMap, context).rank, 'int32')];
	        case 'noop':
	            return [];
	        case 'print':
	            var input = getParamValue('x', node, tensorMap, context);
	            var data = getParamValue('data', node, tensorMap, context);
	            var message = getParamValue('message', node, tensorMap, context);
	            var summarize = getParamValue('summarize', node, tensorMap, context);
	            console.warn('The graph has a tf.print() operation,' + 'usually used for debugging, which slows down performance.');
	            console.log(message);
	            for (var i = 0; i < data.length; i++) {
	                console.log(Array.prototype.slice.call(data[0].dataSync()).slice(0, summarize));
	            }
	            return [input];
	        default:
	            throw TypeError("Node type " + node.op + " is not implemented");
	    }
	};

	var executeOp$6 = function (node, tensorMap, context) {
	    switch (node.op) {
	        case 'resizeBilinear':
	            {
	                var images = getParamValue('images', node, tensorMap, context);
	                var size = getParamValue('size', node, tensorMap, context);
	                var alignCorners = getParamValue('alignCorners', node, tensorMap, context);
	                return [image.resizeBilinear(images, [size[0], size[1]], alignCorners)];
	            }
	        case 'resizeNearestNeighbor':
	            {
	                var images = getParamValue('images', node, tensorMap, context);
	                var size = getParamValue('size', node, tensorMap, context);
	                var alignCorners = getParamValue('alignCorners', node, tensorMap, context);
	                return [image.resizeNearestNeighbor(images, [size[0], size[1]], alignCorners)];
	            }
	        default:
	            throw TypeError("Node type " + node.op + " is not implemented");
	    }
	};

	var executeOp$7 = function (node, tensorMap, context) {
	    switch (node.op) {
	        case 'equal':
	            {
	                return [equal(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
	            }
	        case 'notEqual':
	            {
	                return [notEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
	            }
	        case 'greater':
	            {
	                return [greater(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
	            }
	        case 'greaterEqual':
	            {
	                return [greaterEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
	            }
	        case 'less':
	            {
	                return [less(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
	            }
	        case 'lessEqual':
	            {
	                return [lessEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
	            }
	        case 'logicalAnd':
	            {
	                return [logicalAnd(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
	            }
	        case 'logicalNot':
	            {
	                return [logicalNot(getParamValue('a', node, tensorMap, context))];
	            }
	        case 'logicalOr':
	            {
	                return [logicalOr(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
	            }
	        case 'where':
	            {
	                return [where(getParamValue('condition', node, tensorMap, context), getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];
	            }
	        default:
	            throw TypeError("Node type " + node.op + " is not implemented");
	    }
	};

	var executeOp$8 = function (node, tensorMap, context) {
	    switch (node.op) {
	        case 'matMul':
	            return [matMul(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context), getParamValue('transposeA', node, tensorMap, context), getParamValue('transposeB', node, tensorMap, context))];
	        case 'transpose':
	            return [transpose(getParamValue('x', node, tensorMap, context), getParamValue('perm', node, tensorMap, context))];
	        default:
	            throw TypeError("Node type " + node.op + " is not implemented");
	    }
	};

	var executeOp$9 = function (node, tensorMap, context) {
	    switch (node.op) {
	        case 'batchNormalization':
	            {
	                return [batchNormalization(getParamValue('x', node, tensorMap, context), getParamValue('mean', node, tensorMap, context), getParamValue('variance', node, tensorMap, context), getParamValue('epsilon', node, tensorMap, context), getParamValue('scale', node, tensorMap, context), getParamValue('offset', node, tensorMap, context))];
	            }
	        case 'localResponseNormalization':
	            {
	                return [localResponseNormalization(getParamValue('x', node, tensorMap, context), getParamValue('radius', node, tensorMap, context), getParamValue('bias', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context), getParamValue('beta', node, tensorMap, context))];
	            }
	        case 'softmax':
	            {
	                return [softmax(getParamValue('x', node, tensorMap, context))];
	            }
	        default:
	            throw TypeError("Node type " + node.op + " is not implemented");
	    }
	};

	var executeOp$10 = function (node, tensorMap, context) {
	    switch (node.op) {
	        case 'max':
	            {
	                var axis = getParamValue('axis', node, tensorMap, context);
	                var keepDims = getParamValue('keepDims', node, tensorMap, context);
	                return [max(getParamValue('x', node, tensorMap, context), axis, keepDims)];
	            }
	        case 'mean':
	            {
	                var axis = getParamValue('axis', node, tensorMap, context);
	                var keepDims = getParamValue('keepDims', node, tensorMap, context);
	                return [mean(getParamValue('x', node, tensorMap, context), axis, keepDims)];
	            }
	        case 'min':
	            {
	                var axis = getParamValue('axis', node, tensorMap, context);
	                var keepDims = getParamValue('keepDims', node, tensorMap, context);
	                return [min(getParamValue('x', node, tensorMap, context), axis, keepDims)];
	            }
	        case 'sum':
	            {
	                var axis = getParamValue('axis', node, tensorMap, context);
	                var keepDims = getParamValue('keepDims', node, tensorMap, context);
	                return [sum(getParamValue('x', node, tensorMap, context), axis, keepDims)];
	            }
	        case 'argMax':
	            {
	                var axis = getParamValue('axis', node, tensorMap, context);
	                return [argMax(getParamValue('x', node, tensorMap, context), axis)];
	            }
	        case 'argMin':
	            {
	                var axis = getParamValue('axis', node, tensorMap, context);
	                return [argMin(getParamValue('x', node, tensorMap, context), axis)];
	            }
	        default:
	            throw TypeError("Node type " + node.op + " is not implemented");
	    }
	};

	var executeOp$11 = function (node, tensorMap, context) {
	    switch (node.op) {
	        case 'concat':
	            {
	                var axis = getParamValue('axis', node, tensorMap, context);
	                var inputs = getParamValue('tensors', node, tensorMap, context);
	                return [concat(inputs, axis)];
	            }
	        case 'gather':
	            {
	                var axis = getParamValue('axis', node, tensorMap, context);
	                var input = getParamValue('x', node, tensorMap, context);
	                var indices = getParamValue('indices', node, tensorMap, context);
	                return [gather(input, indices, axis)];
	            }
	        case 'reverse':
	            {
	                var axis = getParamValue('axis', node, tensorMap, context);
	                var input = getParamValue('x', node, tensorMap, context);
	                return [reverse(input, axis)];
	            }
	        case 'slice':
	            {
	                var begin = getParamValue('begin', node, tensorMap, context);
	                var size = getParamValue('size', node, tensorMap, context);
	                return [slice(getParamValue('x', node, tensorMap, context), begin, size)];
	            }
	        case 'stridedSlice':
	            {
	                var begin = getParamValue('begin', node, tensorMap, context);
	                var end = getParamValue('end', node, tensorMap, context);
	                var strides = getParamValue('strides', node, tensorMap, context);
	                var beginMask = getParamValue('beginMask', node, tensorMap, context);
	                var endMask = getParamValue('endMask', node, tensorMap, context);
	                return [stridedSlice(getParamValue('x', node, tensorMap, context), begin, end, strides, beginMask, endMask)];
	            }
	        case 'stack':
	            {
	                return tidy(function () {
	                    var axis = getParamValue('axis', node, tensorMap, context);
	                    var tensors = getParamValue('tensors', node, tensorMap, context);
	                    var shape = tensors[0].shape;
	                    var squeezedShape = tensors[0].squeeze().shape;
	                    var mapped = tensors.map(function (tensor$$1) {
	                        var sameShape = util.arraysEqual(tensor$$1.shape, shape);
	                        if (!sameShape && !util.arraysEqual(tensor$$1.squeeze().shape, squeezedShape)) {
	                            throw new Error('the input tensors shape does not match');
	                        }
	                        return sameShape ? tensor$$1 : tensor$$1.reshape(shape);
	                    });
	                    return [stack(mapped, axis)];
	                });
	            }
	        case 'unstack':
	            {
	                return tidy(function () {
	                    var axis = getParamValue('axis', node, tensorMap, context);
	                    var tensor$$1 = getParamValue('tensor', node, tensorMap, context);
	                    return unstack(tensor$$1, axis);
	                });
	            }
	        case 'tile':
	            {
	                var reps = getParamValue('reps', node, tensorMap, context);
	                return [tile(getParamValue('x', node, tensorMap, context), reps)];
	            }
	        case 'split':
	            {
	                var axis = getParamValue('axis', node, tensorMap, context);
	                var numOrSizeSplits = getParamValue('numOrSizeSplits', node, tensorMap, context);
	                return split(getParamValue('x', node, tensorMap, context), numOrSizeSplits, axis);
	            }
	        default:
	            throw TypeError("Node type " + node.op + " is not implemented");
	    }
	};

	var executeOp$12 = function (node, tensorMap, context) {
	    switch (node.op) {
	        case 'cast':
	            {
	                return [cast(getParamValue('x', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];
	            }
	        case 'expandDims':
	            {
	                var axis = node.params['axis'].value;
	                return [expandDims(getParamValue('x', node, tensorMap, context), axis)];
	            }
	        case 'squeeze':
	            {
	                var axis = node.params['axis'].value;
	                return [squeeze(getParamValue('x', node, tensorMap, context), axis)];
	            }
	        case 'reshape':
	            {
	                return [reshape(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];
	            }
	        case 'pad':
	            {
	                return [pad(getParamValue('x', node, tensorMap, context), split$1(getParamValue('padding', node, tensorMap, context), 2), getParamValue('constantValue', node, tensorMap, context))];
	            }
	        default:
	            throw TypeError("Node type " + node.op + " is not implemented");
	    }
	};

	function executeOp$13(node, tensorMap, context) {
	    switch (node.category) {
	        case 'arithmetic':
	            return executeOp(node, tensorMap, context);
	        case 'basic_math':
	            return executeOp$1(node, tensorMap, context);
	        case 'control':
	            return executeOp$2(node, tensorMap, context);
	        case 'convolution':
	            return executeOp$3(node, tensorMap, context);
	        case 'creation':
	            return executeOp$4(node, tensorMap, context);
	        case 'image':
	            return executeOp$6(node, tensorMap, context);
	        case 'graph':
	            return executeOp$5(node, tensorMap, context);
	        case 'logical':
	            return executeOp$7(node, tensorMap, context);
	        case 'matrices':
	            return executeOp$8(node, tensorMap, context);
	        case 'normalization':
	            return executeOp$9(node, tensorMap, context);
	        case 'reduction':
	            return executeOp$10(node, tensorMap, context);
	        case 'slice_join':
	            return executeOp$11(node, tensorMap, context);
	        case 'transformation':
	            return executeOp$12(node, tensorMap, context);
	        default:
	            throw TypeError("Node type " + node.op + " is not implemented");
	    }
	}

	var ExecutionContext = function () {
	    function ExecutionContext(weightMap) {
	        this.weightMap = weightMap;
	        this.rootContext = { id: 0, frameName: '', iterationId: 0 };
	        this.contexts = [this.rootContext];
	        this.lastId = 0;
	        this.generateCurrentContextIds();
	    }
	    ExecutionContext.prototype.newFrame = function (id, frameName) {
	        return { id: id, frameName: frameName, iterationId: 0 };
	    };
	    Object.defineProperty(ExecutionContext.prototype, "currentContext", {
	        get: function () {
	            return this.contexts;
	        },
	        set: function (contexts) {
	            if (this.contexts !== contexts) {
	                this.contexts = contexts;
	                this.generateCurrentContextIds();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ExecutionContext.prototype, "currentContextId", {
	        get: function () {
	            return this._currentContextIds[0];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ExecutionContext.prototype, "currentContextIds", {
	        get: function () {
	            return this._currentContextIds;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ExecutionContext.prototype.generateCurrentContextIds = function () {
	        var names = [];
	        for (var i = 0; i < this.contexts.length - 1; i++) {
	            var contexts = this.contexts.slice(0, this.contexts.length - i);
	            names.push(this.contextIdforContexts(contexts));
	        }
	        names.push('');
	        this._currentContextIds = names;
	    };
	    ExecutionContext.prototype.contextIdforContexts = function (contexts) {
	        return contexts ? contexts.map(function (context) {
	            return context.id === 0 && context.iterationId === 0 ? '' : context.frameName + "-" + context.iterationId;
	        }).join('/') : '';
	    };
	    ExecutionContext.prototype.enterFrame = function (frameId) {
	        if (this.contexts) {
	            this.lastId++;
	            this.contexts = this.contexts.slice();
	            this.contexts.push(this.newFrame(this.lastId, frameId));
	            this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));
	        }
	    };
	    ExecutionContext.prototype.exitFrame = function () {
	        if (this.contexts && this.contexts.length > 1) {
	            this.contexts = this.contexts.slice();
	            this.contexts.splice(-1);
	            this.currentContextIds.shift();
	        } else {
	            throw new Error('Cannot exit frame, the context is empty');
	        }
	    };
	    ExecutionContext.prototype.nextIteration = function () {
	        if (this.contexts && this.contexts.length > 0) {
	            this.contexts = this.contexts.slice();
	            this.lastId++;
	            var context = Object.assign({}, this.contexts[this.contexts.length - 1]);
	            context.iterationId += 1;
	            context.id = this.lastId;
	            this.contexts.splice(-1, 1, context);
	            this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
	        } else {
	            throw new Error('Cannot increase frame iteration, the context is empty');
	        }
	    };
	    ExecutionContext.prototype.getWeight = function (name) {
	        return this.weightMap[name];
	    };
	    return ExecutionContext;
	}();

	var __assign$1 = undefined && undefined.__assign || Object.assign || function (t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	    }
	    return t;
	};
	var __awaiter$3 = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step$$1(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step$$1(generator["throw"](value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step$$1(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step$$1((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$3 = undefined && undefined.__generator || function (thisArg, body) {
	    var _ = { label: 0, sent: function () {
	            if (t[0] & 1) throw t[1];return t[1];
	        }, trys: [], ops: [] },
	        f,
	        y,
	        t,
	        g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
	        return this;
	    }), g;
	    function verb(n) {
	        return function (v) {
	            return step$$1([n, v]);
	        };
	    }
	    function step$$1(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [0, t.value];
	            switch (op[0]) {
	                case 0:case 1:
	                    t = op;break;
	                case 4:
	                    _.label++;return { value: op[1], done: false };
	                case 5:
	                    _.label++;y = op[1];op = [0];continue;
	                case 7:
	                    op = _.ops.pop();_.trys.pop();continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
	                        _ = 0;continue;
	                    }
	                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
	                        _.label = op[1];break;
	                    }
	                    if (op[0] === 6 && _.label < t[1]) {
	                        _.label = t[1];t = op;break;
	                    }
	                    if (t && _.label < t[2]) {
	                        _.label = t[2];_.ops.push(op);break;
	                    }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop();continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) {
	            op = [6, e];y = 0;
	        } finally {
	            f = t = 0;
	        }
	        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var GraphExecutor = function () {
	    function GraphExecutor(graph) {
	        this.graph = graph;
	        this.compiledOrder = [];
	        this._weightMap = {};
	        this.placeholders = graph.placeholders;
	        this._outputs = graph.outputs;
	        this.compile();
	    }
	    Object.defineProperty(GraphExecutor.prototype, "weightMap", {
	        get: function () {
	            return this._weightMap;
	        },
	        set: function (weightMap) {
	            var weightIds = Object.keys(weightMap).map(function (key) {
	                return weightMap[key].map(function (tensor$$1) {
	                    return tensor$$1.id;
	                });
	            });
	            this.weightIds = [].concat.apply([], weightIds);
	            this._weightMap = weightMap;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GraphExecutor.prototype, "inputs", {
	        get: function () {
	            return this.placeholders.map(function (node) {
	                return {
	                    name: node.name,
	                    shape: node.params['shape'] ? node.params['shape'].value : undefined,
	                    dtype: node.params['dtype'] ? node.params['dtype'].value : undefined
	                };
	            });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GraphExecutor.prototype, "outputs", {
	        get: function () {
	            return this._outputs.map(function (node) {
	                return {
	                    name: node.name,
	                    shape: node.params['shape'] ? node.params['shape'].value : undefined,
	                    dtype: node.params['dtype'] ? node.params['dtype'].value : undefined
	                };
	            });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GraphExecutor.prototype, "inputNodes", {
	        get: function () {
	            return this.placeholders.map(function (node) {
	                return node.name;
	            });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GraphExecutor.prototype, "outputNodes", {
	        get: function () {
	            return this.outputs.map(function (node) {
	                return node.name;
	            });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GraphExecutor.prototype, "isControlFlowModel", {
	        get: function () {
	            return this.graph.withControlFlow;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    GraphExecutor.prototype.compile = function () {
	        if (this.graph.withControlFlow) {
	            return;
	        }
	        var stack$$1 = this.graph.inputs.slice();
	        var visited = {};
	        while (stack$$1.length > 0) {
	            var node = stack$$1.pop();
	            visited[node.name] = true;
	            this.compiledOrder.push(node);
	            node.children.forEach(function (childNode) {
	                if (!visited[childNode.name] && childNode.inputNames.every(function (name) {
	                    var nodeName = getNodeNameAndIndex(name)[0];
	                    return visited[nodeName];
	                })) {
	                    stack$$1.push(childNode);
	                }
	            });
	        }
	    };
	    GraphExecutor.prototype.execute = function (inputs, outputs) {
	        var _this = this;
	        this.checkInput(inputs);
	        this.checkInputShapeAndType(inputs);
	        var result = tidy(function () {
	            var context = new ExecutionContext(_this._weightMap);
	            var tensors = _this.compiledOrder.reduce(function (map, node) {
	                map[node.name] = executeOp$13(node, map, context);
	                return map;
	            }, __assign$1({}, _this.weightMap, inputs));
	            return _this.findOutputs(tensors, context, outputs);
	        });
	        return result;
	    };
	    GraphExecutor.prototype.executeAsync = function (inputs, outputs) {
	        return __awaiter$3(this, void 0, void 0, function () {
	            var _this = this;
	            var context, tensors, results, outputIds, inputIdArray, inputIds;
	            return __generator$3(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this.checkInput(inputs);
	                        this.checkInputShapeAndType(inputs);
	                        context = new ExecutionContext(this._weightMap);
	                        return [4, this.executeWithControlFlow(inputs, context)];
	                    case 1:
	                        tensors = _a.sent();
	                        results = this.findOutputs(tensors, context, outputs);
	                        outputIds = Object.keys(results).map(function (key) {
	                            return results[key].id;
	                        });
	                        inputIdArray = Object.keys(inputs).map(function (key) {
	                            return inputs[key].map(function (input) {
	                                return input.id;
	                            });
	                        });
	                        inputIds = [].concat.apply([], inputIdArray);
	                        Object.keys(tensors).forEach(function (key) {
	                            var tensorArray = tensors[key];
	                            tensorArray.forEach(function (tensor$$1) {
	                                if (tensor$$1 && outputIds.indexOf(tensor$$1.id) === -1 && inputIds.indexOf(tensor$$1.id) === -1 && _this.weightIds.indexOf(tensor$$1.id) === -1) {
	                                    tensor$$1.dispose();
	                                }
	                            });
	                        });
	                        return [2, results];
	                }
	            });
	        });
	    };
	    GraphExecutor.prototype.executeWithControlFlow = function (inputs, context) {
	        return __awaiter$3(this, void 0, void 0, function () {
	            var stack$$1, tensorMap, added, item, tensors, nodeName, _a, _b;
	            return __generator$3(this, function (_c) {
	                switch (_c.label) {
	                    case 0:
	                        stack$$1 = this.graph.inputs.map(function (node) {
	                            return { node: node, contexts: context.currentContext };
	                        });
	                        tensorMap = __assign$1({}, this.weightMap, inputs);
	                        added = {};
	                        _c.label = 1;
	                    case 1:
	                        if (!(stack$$1.length > 0)) return [3, 3];
	                        item = stack$$1.pop();
	                        context.currentContext = item.contexts;
	                        tensors = executeOp$13(item.node, tensorMap, context);
	                        nodeName = getNodeNameAndIndex(item.node.name, context)[0];
	                        _a = tensorMap;
	                        _b = nodeName;
	                        return [4, tensors];
	                    case 2:
	                        _a[_b] = _c.sent();
	                        item.node.children.forEach(function (childNode) {
	                            var nodeName = getNodeNameAndIndex(childNode.name, context)[0];
	                            if (!added[nodeName]) {
	                                if (childNode.op === 'merge') {
	                                    if (childNode.inputNames.some(function (name) {
	                                        return !!getTensor(name, tensorMap, context);
	                                    })) {
	                                        added[nodeName] = true;
	                                        stack$$1.push({ contexts: context.currentContext, node: childNode });
	                                    }
	                                } else if (childNode.inputNames.every(function (name) {
	                                    return !!getTensor(name, tensorMap, context);
	                                })) {
	                                    added[nodeName] = true;
	                                    stack$$1.push({ contexts: context.currentContext, node: childNode });
	                                }
	                            }
	                        });
	                        return [3, 1];
	                    case 3:
	                        return [2, tensorMap];
	                }
	            });
	        });
	    };
	    GraphExecutor.prototype.findOutputs = function (tensorMap, context, outputs) {
	        if (outputs && !(outputs instanceof Array)) {
	            outputs = [outputs];
	        }
	        var requestedOutputs = outputs || this.graph.outputs.map(function (node) {
	            return node.name;
	        });
	        return requestedOutputs.reduce(function (map, name) {
	            map[name] = getTensor(name, tensorMap, context);
	            return map;
	        }, {});
	    };
	    GraphExecutor.prototype.dispose = function () {
	        var _this = this;
	        Object.keys(this.weightMap).forEach(function (key) {
	            return _this.weightMap[key].forEach(function (tensor$$1) {
	                return tensor$$1.dispose();
	            });
	        });
	    };
	    GraphExecutor.prototype.checkInputShapeAndType = function (inputs) {
	        this.placeholders.forEach(function (node) {
	            var input = inputs[node.name][0];
	            if (node.params['shape'] && node.params['shape'].value) {
	                var shape_1 = node.params['shape'].value;
	                var match = shape_1.length === input.shape.length && input.shape.every(function (dim, index) {
	                    return shape_1[index] === -1 || shape_1[index] === dim;
	                });
	                util.assert(match, "The shape of dict['" + node.name + "'] provided in model.execute(dict) must be [" + shape_1 + "], but was [" + input.shape + "]");
	            }
	            if (node.params['dtype'] && node.params['dtype'].value) {
	                util.assert(input.dtype === node.params['dtype'].value, "The dtype of dict['" + node.name + "'] provided in model.execute(dict) must be " + node.params['dtype'].value + ", but was " + input.dtype);
	            }
	        });
	    };
	    GraphExecutor.prototype.checkInput = function (inputs) {
	        var _this = this;
	        var inputKeys = Object.keys(inputs);
	        var missing = [];
	        var extra = [];
	        this.inputNodes.forEach(function (name) {
	            if (inputKeys.indexOf(name) === -1) missing.push(name);
	        });
	        inputKeys.forEach(function (name) {
	            if (_this.inputNodes.indexOf(name) === -1) extra.push(name);
	        });
	        if (missing.length > 0) {
	            throw new Error("The dict provided in model.execute(dict) has the keys " + ("[" + inputKeys + "], but is missing the required keys: [" + missing + "]."));
	        }
	        if (extra.length > 0) {
	            throw new Error("The dict provided in model.execute(dict) has " + ("unused keys: [" + extra + "]. Please provide only the following keys: ") + ("[" + this.inputNodes + "]."));
	        }
	    };
	    return GraphExecutor;
	}();

	var __awaiter$4 = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve$$1, reject) {
	        function fulfilled(value) {
	            try {
	                step$$1(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step$$1(generator["throw"](value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step$$1(result) {
	            result.done ? resolve$$1(result.value) : new P(function (resolve$$1) {
	                resolve$$1(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step$$1((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$4 = undefined && undefined.__generator || function (thisArg, body) {
	    var _ = { label: 0, sent: function () {
	            if (t[0] & 1) throw t[1];return t[1];
	        }, trys: [], ops: [] },
	        f,
	        y,
	        t,
	        g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
	        return this;
	    }), g;
	    function verb(n) {
	        return function (v) {
	            return step$$1([n, v]);
	        };
	    }
	    function step$$1(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [0, t.value];
	            switch (op[0]) {
	                case 0:case 1:
	                    t = op;break;
	                case 4:
	                    _.label++;return { value: op[1], done: false };
	                case 5:
	                    _.label++;y = op[1];op = [0];continue;
	                case 7:
	                    op = _.ops.pop();_.trys.pop();continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
	                        _ = 0;continue;
	                    }
	                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
	                        _.label = op[1];break;
	                    }
	                    if (op[0] === 6 && _.label < t[1]) {
	                        _.label = t[1];t = op;break;
	                    }
	                    if (t && _.label < t[2]) {
	                        _.label = t[2];_.ops.push(op);break;
	                    }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop();continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) {
	            op = [6, e];y = 0;
	        } finally {
	            f = t = 0;
	        }
	        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var FrozenModel = function () {
	    function FrozenModel(modelUrl, weightManifestUrl, requestOption) {
	        this.modelUrl = modelUrl;
	        this.weightManifestUrl = weightManifestUrl;
	        this.requestOption = requestOption;
	        this.version = 'n/a';
	        this.pathPrefix = this.getPathPrefix();
	    }
	    Object.defineProperty(FrozenModel.prototype, "modelVersion", {
	        get: function () {
	            return this.version;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FrozenModel.prototype, "inputNodes", {
	        get: function () {
	            return this.executor.inputNodes;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FrozenModel.prototype, "outputNodes", {
	        get: function () {
	            return this.executor.outputNodes;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FrozenModel.prototype, "inputs", {
	        get: function () {
	            return this.executor.inputs;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FrozenModel.prototype, "outputs", {
	        get: function () {
	            return this.executor.outputs;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    FrozenModel.prototype.getPathPrefix = function () {
	        var url$$1 = parse(this.weightManifestUrl);
	        var segments = url$$1.pathname.split('/');
	        segments.splice(-1);
	        url$$1.pathname = segments.join('/');
	        return format(url$$1) + '/';
	    };
	    FrozenModel.prototype.loadRemoteProtoFile = function () {
	        return __awaiter$4(this, void 0, void 0, function () {
	            var response, _a, _b, _c, error_1;
	            return __generator$4(this, function (_d) {
	                switch (_d.label) {
	                    case 0:
	                        _d.trys.push([0, 3,, 4]);
	                        return [4, fetch(this.modelUrl, this.requestOption)];
	                    case 1:
	                        response = _d.sent();
	                        _b = (_a = tensorflow.GraphDef).decode;
	                        _c = Uint8Array.bind;
	                        return [4, response.arrayBuffer()];
	                    case 2:
	                        return [2, _b.apply(_a, [new (_c.apply(Uint8Array, [void 0, _d.sent()]))()])];
	                    case 3:
	                        error_1 = _d.sent();
	                        throw new Error(this.modelUrl + " not found. " + error_1);
	                    case 4:
	                        return [2];
	                }
	            });
	        });
	    };
	    FrozenModel.prototype.loadWeightManifest = function () {
	        return __awaiter$4(this, void 0, void 0, function () {
	            var manifest, _a, error_2;
	            return __generator$4(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        _b.trys.push([0, 3,, 4]);
	                        return [4, fetch(this.weightManifestUrl, this.requestOption)];
	                    case 1:
	                        manifest = _b.sent();
	                        _a = this;
	                        return [4, manifest.clone().json()];
	                    case 2:
	                        _a.weightManifest = _b.sent();
	                        return [3, 4];
	                    case 3:
	                        error_2 = _b.sent();
	                        throw new Error(this.weightManifestUrl + " not found. " + error_2);
	                    case 4:
	                        return [2];
	                }
	            });
	        });
	    };
	    FrozenModel.prototype.load = function () {
	        return __awaiter$4(this, void 0, void 0, function () {
	            var graphPromise, manifestPromise, graph, weightMap;
	            return __generator$4(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        graphPromise = this.loadRemoteProtoFile();
	                        manifestPromise = this.loadWeightManifest();
	                        return [4, Promise.all([graphPromise, manifestPromise])];
	                    case 1:
	                        graph = _a.sent()[0];
	                        this.version = graph.versions.producer + "." + graph.versions.minConsumer;
	                        return [4, io.loadWeights(this.weightManifest, this.pathPrefix, undefined, this.requestOption)];
	                    case 2:
	                        weightMap = _a.sent();
	                        this.executor = new GraphExecutor(OperationMapper.Instance.transformGraph(graph));
	                        this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);
	                        return [2, true];
	                }
	            });
	        });
	    };
	    FrozenModel.prototype.predict = function (inputs, config) {
	        return this.execute(inputs, this.outputNodes);
	    };
	    FrozenModel.prototype.constructTensorMap = function (inputs) {
	        var inputArray = inputs instanceof Tensor ? [inputs] : inputs;
	        if (inputArray.length !== this.inputNodes.length) {
	            throw new Error('Input tensor count mismatch,' + ("the frozen model has " + this.inputNodes.length + " placeholders, ") + ("while there are " + inputArray.length + " input tensors."));
	        }
	        return this.inputNodes.reduce(function (map, inputName, i) {
	            map[inputName] = inputArray[i];
	            return map;
	        }, {});
	    };
	    FrozenModel.prototype.execute = function (inputs, outputs) {
	        outputs = outputs || this.outputNodes;
	        if (inputs instanceof Tensor || Array.isArray(inputs)) {
	            inputs = this.constructTensorMap(inputs);
	        }
	        if (this.executor.isControlFlowModel) {
	            throw new Error('The model contains control flow ops, ' + 'please use executeAsync method');
	        }
	        var result = this.executor.execute(this.convertTensorMapToTensorsMap(inputs), outputs);
	        var keys = Object.keys(result);
	        return Array.isArray(outputs) && outputs.length > 1 ? outputs.map(function (node) {
	            return result[node];
	        }) : result[keys[0]];
	    };
	    FrozenModel.prototype.executeAsync = function (inputs, outputs) {
	        return __awaiter$4(this, void 0, void 0, function () {
	            var result, keys;
	            return __generator$4(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!this.executor.isControlFlowModel) {
	                            throw new Error('The model does not contain control flow ops, ' + 'please use execute method for better performance.');
	                        }
	                        outputs = outputs || this.outputNodes;
	                        if (inputs instanceof Tensor || Array.isArray(inputs)) {
	                            inputs = this.constructTensorMap(inputs);
	                        }
	                        return [4, this.executor.executeAsync(this.convertTensorMapToTensorsMap(inputs), outputs)];
	                    case 1:
	                        result = _a.sent();
	                        keys = Object.keys(result);
	                        return [2, Array.isArray(outputs) && outputs.length > 1 ? outputs.map(function (node) {
	                            return result[node];
	                        }) : result[keys[0]]];
	                }
	            });
	        });
	    };
	    FrozenModel.prototype.convertTensorMapToTensorsMap = function (map) {
	        return Object.keys(map).reduce(function (newMap, key) {
	            newMap[key] = [map[key]];
	            return newMap;
	        }, {});
	    };
	    FrozenModel.prototype.dispose = function () {
	        this.executor.dispose();
	    };
	    return FrozenModel;
	}();
	function loadFrozenModel(modelUrl, weightsManifestUrl, requestOption) {
	    return __awaiter$4(this, void 0, void 0, function () {
	        var model;
	        return __generator$4(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    model = new FrozenModel(modelUrl, weightsManifestUrl, requestOption);
	                    return [4, model.load()];
	                case 1:
	                    _a.sent();
	                    return [2, model];
	            }
	        });
	    });
	}

	var version$2 = '0.4.3';

	var version$3 = '0.11.7';

	var version$4 = {
	    'tfjs-core': version,
	    'tfjs-layers': version$1,
	    'tfjs-converter': version$2,
	    'tfjs': version$3
	};

	exports.version = version$4;
	exports.setBackend = setBackend;
	exports.getBackend = getBackend;
	exports.disposeVariables = disposeVariables;
	exports.memory = memory;
	exports.version_core = version;
	exports.nextFrame = nextFrame;
	exports.environment = environment;
	exports.io = io;
	exports.serialization = serialization;
	exports.test_util = test_util;
	exports.util = util;
	exports.webgl = webgl;
	exports.AdadeltaOptimizer = AdadeltaOptimizer;
	exports.AdagradOptimizer = AdagradOptimizer;
	exports.AdamOptimizer = AdamOptimizer;
	exports.AdamaxOptimizer = AdamaxOptimizer;
	exports.MomentumOptimizer = MomentumOptimizer;
	exports.Optimizer = Optimizer;
	exports.RMSPropOptimizer = RMSPropOptimizer;
	exports.SGDOptimizer = SGDOptimizer;
	exports.Tensor = Tensor;
	exports.TensorBuffer = TensorBuffer;
	exports.variable = variable;
	exports.Variable = Variable;
	exports.ENV = ENV;
	exports.Environment = Environment;
	exports.doc = doc;
	exports.batchNormalization = batchNormalization;
	exports.batchNormalization2d = batchNormalization2d;
	exports.batchNormalization3d = batchNormalization3d;
	exports.batchNormalization4d = batchNormalization4d;
	exports.concat = concat;
	exports.concat1d = concat1d;
	exports.concat2d = concat2d;
	exports.concat3d = concat3d;
	exports.concat4d = concat4d;
	exports.conv1d = conv1d;
	exports.conv2d = conv2d;
	exports.conv2dTranspose = conv2dTranspose;
	exports.depthwiseConv2d = depthwiseConv2d;
	exports.separableConv2d = separableConv2d;
	exports.matMul = matMul;
	exports.matrixTimesVector = matrixTimesVector;
	exports.outerProduct = outerProduct;
	exports.vectorTimesMatrix = vectorTimesMatrix;
	exports.dot = dot;
	exports.avgPool = avgPool;
	exports.maxPool = maxPool;
	exports.transpose = transpose;
	exports.reverse = reverse;
	exports.reverse1d = reverse1d;
	exports.reverse2d = reverse2d;
	exports.reverse3d = reverse3d;
	exports.reverse4d = reverse4d;
	exports.slice = slice;
	exports.slice1d = slice1d;
	exports.slice2d = slice2d;
	exports.slice3d = slice3d;
	exports.slice4d = slice4d;
	exports.stridedSlice = stridedSlice;
	exports.argMax = argMax;
	exports.argMin = argMin;
	exports.logSumExp = logSumExp;
	exports.max = max;
	exports.mean = mean;
	exports.min = min;
	exports.all = all;
	exports.moments = moments;
	exports.sum = sum;
	exports.unsortedSegmentSum = unsortedSegmentSum;
	exports.equal = equal;
	exports.equalStrict = equalStrict;
	exports.greater = greater;
	exports.greaterStrict = greaterStrict;
	exports.greaterEqual = greaterEqual;
	exports.greaterEqualStrict = greaterEqualStrict;
	exports.less = less;
	exports.lessStrict = lessStrict;
	exports.lessEqual = lessEqual;
	exports.lessEqualStrict = lessEqualStrict;
	exports.notEqual = notEqual;
	exports.notEqualStrict = notEqualStrict;
	exports.logicalNot = logicalNot;
	exports.logicalAnd = logicalAnd;
	exports.logicalOr = logicalOr;
	exports.logicalXor = logicalXor;
	exports.where = where;
	exports.abs = abs;
	exports.acos = acos;
	exports.acosh = acosh;
	exports.asin = asin;
	exports.asinh = asinh;
	exports.atan = atan;
	exports.atanh = atanh;
	exports.ceil = ceil;
	exports.clipByValue = clipByValue;
	exports.cos = cos;
	exports.cosh = cosh;
	exports.elu = elu;
	exports.exp = exp;
	exports.expm1 = expm1;
	exports.floor = floor;
	exports.sign = sign;
	exports.leakyRelu = leakyRelu;
	exports.log = log;
	exports.log1p = log1p;
	exports.logSigmoid = logSigmoid;
	exports.neg = neg;
	exports.prelu = prelu;
	exports.relu = relu;
	exports.reciprocal = reciprocal;
	exports.round = round;
	exports.selu = selu;
	exports.sigmoid = sigmoid;
	exports.sin = sin;
	exports.sinh = sinh;
	exports.softplus = softplus;
	exports.sqrt = sqrt;
	exports.rsqrt = rsqrt;
	exports.square = square;
	exports.step = step;
	exports.tan = tan;
	exports.tanh = tanh$1;
	exports.erf = erf;
	exports.add = add;
	exports.addStrict = addStrict;
	exports.atan2 = atan2;
	exports.div = div;
	exports.floorDiv = floorDiv;
	exports.divStrict = divStrict;
	exports.maximum = maximum;
	exports.maximumStrict = maximumStrict;
	exports.minimum = minimum;
	exports.minimumStrict = minimumStrict;
	exports.mod = mod;
	exports.modStrict = modStrict;
	exports.mul = mul;
	exports.mulStrict = mulStrict;
	exports.pow = pow;
	exports.powStrict = powStrict;
	exports.sub = sub;
	exports.subStrict = subStrict;
	exports.squaredDifference = squaredDifference;
	exports.squaredDifferenceStrict = squaredDifferenceStrict;
	exports.norm = norm;
	exports.cast = cast;
	exports.clone = clone;
	exports.fromPixels = fromPixels;
	exports.toPixels = toPixels;
	exports.ones = ones;
	exports.onesLike = onesLike;
	exports.zeros = zeros;
	exports.zerosLike = zerosLike;
	exports.eye = eye;
	exports.rand = rand;
	exports.randomNormal = randomNormal;
	exports.truncatedNormal = truncatedNormal;
	exports.randomUniform = randomUniform;
	exports.multinomial = multinomial;
	exports.reshape = reshape;
	exports.squeeze = squeeze;
	exports.tile = tile;
	exports.gather = gather;
	exports.oneHot = oneHot;
	exports.linspace = linspace;
	exports.range = range;
	exports.buffer = buffer;
	exports.fill = fill;
	exports.tensor = tensor;
	exports.scalar = scalar;
	exports.tensor1d = tensor1d;
	exports.tensor2d = tensor2d;
	exports.tensor3d = tensor3d;
	exports.tensor4d = tensor4d;
	exports.tensor5d = tensor5d;
	exports.tensor6d = tensor6d;
	exports.print = print;
	exports.expandDims = expandDims;
	exports.stack = stack;
	exports.unstack = unstack;
	exports.split = split;
	exports.cumsum = cumsum;
	exports.pad = pad;
	exports.pad1d = pad1d;
	exports.pad2d = pad2d;
	exports.pad3d = pad3d;
	exports.pad4d = pad4d;
	exports.movingAverage = movingAverage;
	exports.basicLSTMCell = basicLSTMCell;
	exports.multiRNNCell = multiRNNCell;
	exports.softmax = softmax;
	exports.sigmoidCrossEntropyWithLogits = sigmoidCrossEntropyWithLogits;
	exports.localResponseNormalization = localResponseNormalization;
	exports.linalg = linalg;
	exports.losses = losses;
	exports.image = image;
	exports.operation = operation;
	exports.train = train;
	exports.tidy = tidy;
	exports.keep = keep;
	exports.dispose = dispose;
	exports.time = time;
	exports.grad = grad;
	exports.valueAndGrad = valueAndGrad;
	exports.grads = grads;
	exports.valueAndGrads = valueAndGrads;
	exports.variableGrads = variableGrads;
	exports.customGrad = customGrad;
	exports.model = model;
	exports.sequential = sequential;
	exports.loadModel = loadModel;
	exports.input = input;
	exports.layers = layers;
	exports.constraints = constraints;
	exports.initializers = initializers;
	exports.metrics = metrics;
	exports.regularizers = regularizers;
	exports.Callback = Callback;
	exports.CallbackList = CallbackList;
	exports.CustomCallback = CustomCallback;
	exports.Model = Model;
	exports.RNN = RNN;
	exports.Sequential = Sequential;
	exports.SymbolicTensor = SymbolicTensor;
	exports.version_layers = version$1;
	exports.FrozenModel = FrozenModel;
	exports.loadFrozenModel = loadFrozenModel;
	exports.version_converter = version$2;

	Object.defineProperty(exports, '__esModule', { value: true });

})));
