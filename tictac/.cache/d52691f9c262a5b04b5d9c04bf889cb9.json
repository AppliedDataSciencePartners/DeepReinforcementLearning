{"dependencies":[{"name":"/home/supersteve/git/DeepReinforcementLearning/tictac/package.json","includedInParent":true,"mtime":1529793848873},{"name":"/home/supersteve/git/DeepReinforcementLearning/tictac/node_modules/@protobufjs/base64/package.json","includedInParent":true,"mtime":1497000643000}],"generated":{"js":"\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","map":{"mappings":[{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@protobufjs/base64/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}}],"sources":{"node_modules/@protobufjs/base64/index.js":"\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n"},"lineCount":140}},"hash":"84093925cdf6578e760b6a8461f09bd0","cacheData":{"env":{}}}