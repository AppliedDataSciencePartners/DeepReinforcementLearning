{"dependencies":[{"name":"/home/supersteve/git/DeepReinforcementLearning/tictac/package.json","includedInParent":true,"mtime":1530407050385},{"name":"/home/supersteve/git/DeepReinforcementLearning/tictac/node_modules/public-encrypt/package.json","includedInParent":true,"mtime":499162500000},{"name":"parse-asn1","loc":{"line":1,"column":24}},{"name":"randombytes","loc":{"line":2,"column":26}},{"name":"create-hash","loc":{"line":3,"column":25}},{"name":"./mgf","loc":{"line":4,"column":18}},{"name":"./xor","loc":{"line":5,"column":18}},{"name":"bn.js","loc":{"line":6,"column":17}},{"name":"./withPublic","loc":{"line":7,"column":25}},{"name":"browserify-rsa","loc":{"line":8,"column":18}},{"name":"buffer"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\nvar parseKeys = require('parse-asn1');\nvar randomBytes = require('randombytes');\nvar createHash = require('create-hash');\nvar mgf = require('./mgf');\nvar xor = require('./xor');\nvar bn = require('bn.js');\nvar withPublic = require('./withPublic');\nvar crt = require('browserify-rsa');\n\nvar constants = {\n  RSA_PKCS1_OAEP_PADDING: 4,\n  RSA_PKCS1_PADDIN: 1,\n  RSA_NO_PADDING: 3\n};\n\nmodule.exports = function publicEncrypt(public_key, msg, reverse) {\n  var padding;\n  if (public_key.padding) {\n    padding = public_key.padding;\n  } else if (reverse) {\n    padding = 1;\n  } else {\n    padding = 4;\n  }\n  var key = parseKeys(public_key);\n  var paddedMsg;\n  if (padding === 4) {\n    paddedMsg = oaep(key, msg);\n  } else if (padding === 1) {\n    paddedMsg = pkcs1(key, msg, reverse);\n  } else if (padding === 3) {\n    paddedMsg = new bn(msg);\n    if (paddedMsg.cmp(key.modulus) >= 0) {\n      throw new Error('data too long for modulus');\n    }\n  } else {\n    throw new Error('unknown padding');\n  }\n  if (reverse) {\n    return crt(paddedMsg, key);\n  } else {\n    return withPublic(paddedMsg, key);\n  }\n};\n\nfunction oaep(key, msg){\n  var k = key.modulus.byteLength();\n  var mLen = msg.length;\n  var iHash = createHash('sha1').update(new Buffer('')).digest();\n  var hLen = iHash.length;\n  var hLen2 = 2 * hLen;\n  if (mLen > k - hLen2 - 2) {\n    throw new Error('message too long');\n  }\n  var ps = new Buffer(k - mLen - hLen2 - 2);\n  ps.fill(0);\n  var dblen = k - hLen - 1;\n  var seed = randomBytes(hLen);\n  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));\n  var maskedSeed = xor(seed, mgf(maskedDb, hLen));\n  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));\n}\nfunction pkcs1(key, msg, reverse){\n  var mLen = msg.length;\n  var k = key.modulus.byteLength();\n  if (mLen > k - 11) {\n    throw new Error('message too long');\n  }\n  var ps;\n  if (reverse) {\n    ps = new Buffer(k - mLen - 3);\n    ps.fill(0xff);\n  } else {\n    ps = nonZero(k - mLen - 3);\n  }\n  return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));\n}\nfunction nonZero(len, crypto) {\n  var out = new Buffer(len);\n  var i = 0;\n  var cache = randomBytes(len*2);\n  var cur = 0;\n  var num;\n  while (i < len) {\n    if (cur === cache.length) {\n      cache = randomBytes(len*2);\n      cur = 0;\n    }\n    num = cache[cur++];\n    if (num) {\n      out[i++] = num;\n    }\n  }\n  return out;\n}","map":{"mappings":[{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/public-encrypt/publicEncrypt.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}}],"sources":{"node_modules/public-encrypt/publicEncrypt.js":"var parseKeys = require('parse-asn1');\nvar randomBytes = require('randombytes');\nvar createHash = require('create-hash');\nvar mgf = require('./mgf');\nvar xor = require('./xor');\nvar bn = require('bn.js');\nvar withPublic = require('./withPublic');\nvar crt = require('browserify-rsa');\n\nvar constants = {\n  RSA_PKCS1_OAEP_PADDING: 4,\n  RSA_PKCS1_PADDIN: 1,\n  RSA_NO_PADDING: 3\n};\n\nmodule.exports = function publicEncrypt(public_key, msg, reverse) {\n  var padding;\n  if (public_key.padding) {\n    padding = public_key.padding;\n  } else if (reverse) {\n    padding = 1;\n  } else {\n    padding = 4;\n  }\n  var key = parseKeys(public_key);\n  var paddedMsg;\n  if (padding === 4) {\n    paddedMsg = oaep(key, msg);\n  } else if (padding === 1) {\n    paddedMsg = pkcs1(key, msg, reverse);\n  } else if (padding === 3) {\n    paddedMsg = new bn(msg);\n    if (paddedMsg.cmp(key.modulus) >= 0) {\n      throw new Error('data too long for modulus');\n    }\n  } else {\n    throw new Error('unknown padding');\n  }\n  if (reverse) {\n    return crt(paddedMsg, key);\n  } else {\n    return withPublic(paddedMsg, key);\n  }\n};\n\nfunction oaep(key, msg){\n  var k = key.modulus.byteLength();\n  var mLen = msg.length;\n  var iHash = createHash('sha1').update(new Buffer('')).digest();\n  var hLen = iHash.length;\n  var hLen2 = 2 * hLen;\n  if (mLen > k - hLen2 - 2) {\n    throw new Error('message too long');\n  }\n  var ps = new Buffer(k - mLen - hLen2 - 2);\n  ps.fill(0);\n  var dblen = k - hLen - 1;\n  var seed = randomBytes(hLen);\n  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));\n  var maskedSeed = xor(seed, mgf(maskedDb, hLen));\n  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));\n}\nfunction pkcs1(key, msg, reverse){\n  var mLen = msg.length;\n  var k = key.modulus.byteLength();\n  if (mLen > k - 11) {\n    throw new Error('message too long');\n  }\n  var ps;\n  if (reverse) {\n    ps = new Buffer(k - mLen - 3);\n    ps.fill(0xff);\n  } else {\n    ps = nonZero(k - mLen - 3);\n  }\n  return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));\n}\nfunction nonZero(len, crypto) {\n  var out = new Buffer(len);\n  var i = 0;\n  var cache = randomBytes(len*2);\n  var cur = 0;\n  var num;\n  while (i < len) {\n    if (cur === cache.length) {\n      cache = randomBytes(len*2);\n      cur = 0;\n    }\n    num = cache[cur++];\n    if (num) {\n      out[i++] = num;\n    }\n  }\n  return out;\n}"},"lineCount":96}},"hash":"d3b07652a83cddf3da4b07f219723ead","cacheData":{"env":{}}}