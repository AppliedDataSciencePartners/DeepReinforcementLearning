{"dependencies":[{"name":"/home/supersteve/git/DeepReinforcementLearning/tictac/package.json","includedInParent":true,"mtime":1529793848873},{"name":"/home/supersteve/git/DeepReinforcementLearning/tictac/node_modules/protobufjs/package.json","includedInParent":true,"mtime":1519644894000},{"name":"./writer","loc":{"line":5,"column":21}},{"name":"./util/minimal","loc":{"line":8,"column":19}}],"generated":{"js":"\n\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(\"./writer\");\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n","map":{"mappings":[{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/protobufjs/src/writer_buffer.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}}],"sources":{"node_modules/protobufjs/src/writer_buffer.js":"\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(\"./writer\");\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n"},"lineCount":83}},"hash":"1089488a62c9f1a2fb7e6a3449e5a186","cacheData":{"env":{}}}