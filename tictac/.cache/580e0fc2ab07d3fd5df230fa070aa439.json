{"dependencies":[{"name":"/home/supersteve/git/DeepReinforcementLearning/tictac/package.json","includedInParent":true,"mtime":1530407050385},{"name":"/home/supersteve/git/DeepReinforcementLearning/tictac/node_modules/hmac-drbg/package.json","includedInParent":true,"mtime":1491777195000},{"name":"hash.js","loc":{"line":3,"column":19}},{"name":"minimalistic-crypto-utils","loc":{"line":4,"column":20}},{"name":"minimalistic-assert","loc":{"line":5,"column":21}}],"generated":{"js":"'use strict';\n\nvar hash = require('hash.js');\nvar utils = require('minimalistic-crypto-utils');\nvar assert = require('minimalistic-assert');\n\nfunction HmacDRBG(options) {\n  if (!(this instanceof HmacDRBG))\n    return new HmacDRBG(options);\n  this.hash = options.hash;\n  this.predResist = !!options.predResist;\n\n  this.outLen = this.hash.outSize;\n  this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n\n  this._reseed = null;\n  this.reseedInterval = null;\n  this.K = null;\n  this.V = null;\n\n  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');\n  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');\n  var pers = utils.toArray(options.pers, options.persEnc || 'hex');\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n  this._init(entropy, nonce, pers);\n}\nmodule.exports = HmacDRBG;\n\nHmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n  var seed = entropy.concat(nonce).concat(pers);\n\n  this.K = new Array(this.outLen / 8);\n  this.V = new Array(this.outLen / 8);\n  for (var i = 0; i < this.V.length; i++) {\n    this.K[i] = 0x00;\n    this.V[i] = 0x01;\n  }\n\n  this._update(seed);\n  this._reseed = 1;\n  this.reseedInterval = 0x1000000000000;  // 2^48\n};\n\nHmacDRBG.prototype._hmac = function hmac() {\n  return new hash.hmac(this.hash, this.K);\n};\n\nHmacDRBG.prototype._update = function update(seed) {\n  var kmac = this._hmac()\n                 .update(this.V)\n                 .update([ 0x00 ]);\n  if (seed)\n    kmac = kmac.update(seed);\n  this.K = kmac.digest();\n  this.V = this._hmac().update(this.V).digest();\n  if (!seed)\n    return;\n\n  this.K = this._hmac()\n               .update(this.V)\n               .update([ 0x01 ])\n               .update(seed)\n               .digest();\n  this.V = this._hmac().update(this.V).digest();\n};\n\nHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n  // Optional entropy enc\n  if (typeof entropyEnc !== 'string') {\n    addEnc = add;\n    add = entropyEnc;\n    entropyEnc = null;\n  }\n\n  entropy = utils.toArray(entropy, entropyEnc);\n  add = utils.toArray(add, addEnc);\n\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n  this._update(entropy.concat(add || []));\n  this._reseed = 1;\n};\n\nHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n  if (this._reseed > this.reseedInterval)\n    throw new Error('Reseed is required');\n\n  // Optional encoding\n  if (typeof enc !== 'string') {\n    addEnc = add;\n    add = enc;\n    enc = null;\n  }\n\n  // Optional additional data\n  if (add) {\n    add = utils.toArray(add, addEnc || 'hex');\n    this._update(add);\n  }\n\n  var temp = [];\n  while (temp.length < len) {\n    this.V = this._hmac().update(this.V).digest();\n    temp = temp.concat(this.V);\n  }\n\n  var res = temp.slice(0, len);\n  this._update(add);\n  this._reseed++;\n  return utils.encode(res, enc);\n};\n","map":{"mappings":[{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/hmac-drbg/lib/hmac-drbg.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}}],"sources":{"node_modules/hmac-drbg/lib/hmac-drbg.js":"'use strict';\n\nvar hash = require('hash.js');\nvar utils = require('minimalistic-crypto-utils');\nvar assert = require('minimalistic-assert');\n\nfunction HmacDRBG(options) {\n  if (!(this instanceof HmacDRBG))\n    return new HmacDRBG(options);\n  this.hash = options.hash;\n  this.predResist = !!options.predResist;\n\n  this.outLen = this.hash.outSize;\n  this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n\n  this._reseed = null;\n  this.reseedInterval = null;\n  this.K = null;\n  this.V = null;\n\n  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');\n  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');\n  var pers = utils.toArray(options.pers, options.persEnc || 'hex');\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n  this._init(entropy, nonce, pers);\n}\nmodule.exports = HmacDRBG;\n\nHmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n  var seed = entropy.concat(nonce).concat(pers);\n\n  this.K = new Array(this.outLen / 8);\n  this.V = new Array(this.outLen / 8);\n  for (var i = 0; i < this.V.length; i++) {\n    this.K[i] = 0x00;\n    this.V[i] = 0x01;\n  }\n\n  this._update(seed);\n  this._reseed = 1;\n  this.reseedInterval = 0x1000000000000;  // 2^48\n};\n\nHmacDRBG.prototype._hmac = function hmac() {\n  return new hash.hmac(this.hash, this.K);\n};\n\nHmacDRBG.prototype._update = function update(seed) {\n  var kmac = this._hmac()\n                 .update(this.V)\n                 .update([ 0x00 ]);\n  if (seed)\n    kmac = kmac.update(seed);\n  this.K = kmac.digest();\n  this.V = this._hmac().update(this.V).digest();\n  if (!seed)\n    return;\n\n  this.K = this._hmac()\n               .update(this.V)\n               .update([ 0x01 ])\n               .update(seed)\n               .digest();\n  this.V = this._hmac().update(this.V).digest();\n};\n\nHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n  // Optional entropy enc\n  if (typeof entropyEnc !== 'string') {\n    addEnc = add;\n    add = entropyEnc;\n    entropyEnc = null;\n  }\n\n  entropy = utils.toArray(entropy, entropyEnc);\n  add = utils.toArray(add, addEnc);\n\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n  this._update(entropy.concat(add || []));\n  this._reseed = 1;\n};\n\nHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n  if (this._reseed > this.reseedInterval)\n    throw new Error('Reseed is required');\n\n  // Optional encoding\n  if (typeof enc !== 'string') {\n    addEnc = add;\n    add = enc;\n    enc = null;\n  }\n\n  // Optional additional data\n  if (add) {\n    add = utils.toArray(add, addEnc || 'hex');\n    this._update(add);\n  }\n\n  var temp = [];\n  while (temp.length < len) {\n    this.V = this._hmac().update(this.V).digest();\n    temp = temp.concat(this.V);\n  }\n\n  var res = temp.slice(0, len);\n  this._update(add);\n  this._reseed++;\n  return utils.encode(res, enc);\n};\n"},"lineCount":114}},"hash":"ff29a5207e8913792dd9d1ff1fe816b3","cacheData":{"env":{}}}