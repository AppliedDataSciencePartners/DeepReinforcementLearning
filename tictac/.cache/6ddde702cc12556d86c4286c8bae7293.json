{"dependencies":[{"name":"/home/supersteve/git/DeepReinforcementLearning/tictac/package.json","includedInParent":true,"mtime":1529793848873},{"name":"/home/supersteve/git/DeepReinforcementLearning/tictac/node_modules/evp_bytestokey/package.json","includedInParent":true,"mtime":1504606831000},{"name":"safe-buffer","loc":{"line":1,"column":21}},{"name":"md5.js","loc":{"line":2,"column":18}}],"generated":{"js":"\nvar Buffer = require('safe-buffer').Buffer\nvar MD5 = require('md5.js')\n\n/* eslint-disable camelcase */\nfunction EVP_BytesToKey (password, salt, keyBits, ivLen) {\n  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')\n  if (salt) {\n    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')\n    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')\n  }\n\n  var keyLen = keyBits / 8\n  var key = Buffer.alloc(keyLen)\n  var iv = Buffer.alloc(ivLen || 0)\n  var tmp = Buffer.alloc(0)\n\n  while (keyLen > 0 || ivLen > 0) {\n    var hash = new MD5()\n    hash.update(tmp)\n    hash.update(password)\n    if (salt) hash.update(salt)\n    tmp = hash.digest()\n\n    var used = 0\n\n    if (keyLen > 0) {\n      var keyStart = key.length - keyLen\n      used = Math.min(keyLen, tmp.length)\n      tmp.copy(key, keyStart, 0, used)\n      keyLen -= used\n    }\n\n    if (used < tmp.length && ivLen > 0) {\n      var ivStart = iv.length - ivLen\n      var length = Math.min(ivLen, tmp.length - used)\n      tmp.copy(iv, ivStart, used, used + length)\n      ivLen -= length\n    }\n  }\n\n  tmp.fill(0)\n  return { key: key, iv: iv }\n}\n\nmodule.exports = EVP_BytesToKey\n","map":{"mappings":[{"source":"node_modules/evp_bytestokey/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/evp_bytestokey/index.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}}],"sources":{"node_modules/evp_bytestokey/index.js":"var Buffer = require('safe-buffer').Buffer\nvar MD5 = require('md5.js')\n\n/* eslint-disable camelcase */\nfunction EVP_BytesToKey (password, salt, keyBits, ivLen) {\n  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')\n  if (salt) {\n    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')\n    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')\n  }\n\n  var keyLen = keyBits / 8\n  var key = Buffer.alloc(keyLen)\n  var iv = Buffer.alloc(ivLen || 0)\n  var tmp = Buffer.alloc(0)\n\n  while (keyLen > 0 || ivLen > 0) {\n    var hash = new MD5()\n    hash.update(tmp)\n    hash.update(password)\n    if (salt) hash.update(salt)\n    tmp = hash.digest()\n\n    var used = 0\n\n    if (keyLen > 0) {\n      var keyStart = key.length - keyLen\n      used = Math.min(keyLen, tmp.length)\n      tmp.copy(key, keyStart, 0, used)\n      keyLen -= used\n    }\n\n    if (used < tmp.length && ivLen > 0) {\n      var ivStart = iv.length - ivLen\n      var length = Math.min(ivLen, tmp.length - used)\n      tmp.copy(iv, ivStart, used, used + length)\n      ivLen -= length\n    }\n  }\n\n  tmp.fill(0)\n  return { key: key, iv: iv }\n}\n\nmodule.exports = EVP_BytesToKey\n"},"lineCount":47}},"hash":"7db26effb507facf3226bb0e31764e19","cacheData":{"env":{}}}