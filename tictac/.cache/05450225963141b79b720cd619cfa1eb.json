{"dependencies":[{"name":"/home/supersteve/git/DeepReinforcementLearning/tictac/package.json","includedInParent":true,"mtime":1530407050385},{"name":"/home/supersteve/git/DeepReinforcementLearning/tictac/node_modules/@protobufjs/pool/package.json","includedInParent":true,"mtime":1485367838000}],"generated":{"js":"\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","map":{"mappings":[{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}}],"sources":{"node_modules/@protobufjs/pool/index.js":"\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n"},"lineCount":49}},"hash":"6bf68ffb5ace8285f89d5327e1830b35","cacheData":{"env":{}}}