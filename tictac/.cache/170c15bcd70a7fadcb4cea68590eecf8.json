{"dependencies":[{"name":"/home/supersteve/git/DeepReinforcementLearning/tictac/package.json","includedInParent":true,"mtime":1530407050385},{"name":"/home/supersteve/git/DeepReinforcementLearning/tictac/node_modules/browserify-aes/package.json","includedInParent":true,"mtime":499162500000},{"name":"buffer-xor","loc":{"line":1,"column":18}},{"name":"safe-buffer","loc":{"line":2,"column":21}},{"name":"../incr32","loc":{"line":3,"column":21}}],"generated":{"js":"\nvar xor = require('buffer-xor')\nvar Buffer = require('safe-buffer').Buffer\nvar incr32 = require('../incr32')\n\nfunction getBlock (self) {\n  var out = self._cipher.encryptBlockRaw(self._prev)\n  incr32(self._prev)\n  return out\n}\n\nvar blockSize = 16\nexports.encrypt = function (self, chunk) {\n  var chunkNum = Math.ceil(chunk.length / blockSize)\n  var start = self._cache.length\n  self._cache = Buffer.concat([\n    self._cache,\n    Buffer.allocUnsafe(chunkNum * blockSize)\n  ])\n  for (var i = 0; i < chunkNum; i++) {\n    var out = getBlock(self)\n    var offset = start + i * blockSize\n    self._cache.writeUInt32BE(out[0], offset + 0)\n    self._cache.writeUInt32BE(out[1], offset + 4)\n    self._cache.writeUInt32BE(out[2], offset + 8)\n    self._cache.writeUInt32BE(out[3], offset + 12)\n  }\n  var pad = self._cache.slice(0, chunk.length)\n  self._cache = self._cache.slice(chunk.length)\n  return xor(chunk, pad)\n}\n","map":{"mappings":[{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/browserify-aes/modes/ctr.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}}],"sources":{"node_modules/browserify-aes/modes/ctr.js":"var xor = require('buffer-xor')\nvar Buffer = require('safe-buffer').Buffer\nvar incr32 = require('../incr32')\n\nfunction getBlock (self) {\n  var out = self._cipher.encryptBlockRaw(self._prev)\n  incr32(self._prev)\n  return out\n}\n\nvar blockSize = 16\nexports.encrypt = function (self, chunk) {\n  var chunkNum = Math.ceil(chunk.length / blockSize)\n  var start = self._cache.length\n  self._cache = Buffer.concat([\n    self._cache,\n    Buffer.allocUnsafe(chunkNum * blockSize)\n  ])\n  for (var i = 0; i < chunkNum; i++) {\n    var out = getBlock(self)\n    var offset = start + i * blockSize\n    self._cache.writeUInt32BE(out[0], offset + 0)\n    self._cache.writeUInt32BE(out[1], offset + 4)\n    self._cache.writeUInt32BE(out[2], offset + 8)\n    self._cache.writeUInt32BE(out[3], offset + 12)\n  }\n  var pad = self._cache.slice(0, chunk.length)\n  self._cache = self._cache.slice(chunk.length)\n  return xor(chunk, pad)\n}\n"},"lineCount":32}},"hash":"48120c5346269ac803eeef1fad5d3aa8","cacheData":{"env":{}}}